     1                                  global main
     2                                  
     3                                  %macro mPuts 0
     4                                      sub     rsp,8
     5                                      call    puts
     6                                      add     rsp,8
     7                                  %endmacro
     8                                  
     9                                  %macro mGets 0
    10                                      sub     rsp,8
    11                                      call    gets
    12                                      add     rsp,8
    13                                  %endmacro
    14                                  
    15                                  %macro mPrintF 0
    16                                      sub     rsp,8
    17                                      call    printf
    18                                      add     rsp,8
    19                                  %endmacro
    20                                  
    21                                  extern puts
    22                                  extern gets
    23                                  extern sscanf
    24                                  extern fopen
    25                                  extern fgets
    26                                  extern printf
    27                                  extern fputs
    28                                  extern fclose
    29                                  
    30                                  
    31                                  section .data
    32 00000000 00000101010000              tablero     db  0, 0, 1, 1, 1, 0, 0
    33 00000007 00000101010000                          db  0, 0, 1, 1, 1, 0, 0
    34 0000000E 01010101010101                          db  1, 1, 1, 1, 1, 1, 1
    35 00000015 01020202020201                          db  1, 2, 2, 2, 2, 2, 1
    36 0000001C 01020203020201                          db  1, 2, 2, 3, 2, 2, 1
    37 00000023 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    38 0000002A 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    39                                  
    40 00000031 0A00                        salto_linea                 db 10, 0        
    41 00000033 2E00                        simbolo_fuera_tablero       db ".", 0
    42 00000035 4F00                        simbolo_oca                 db 'O', 0    ; symbolo por default para ocas
    43 00000037 5800                        simbolo_zorro               db 'X', 0    ; symbolo por default para el zorro
    44 00000039 2000                        simbolo_espacio_vacio       db ' ', 0
    45 0000003B 7C00                        simbolo_separador           db '|', 0
    46 0000003D 496E6772657365206C-         mensaje_mover_oca           db "Ingrese la fila y columna de la oca a mover (ejemplo: 3 3). Presione f para salir de la partida: ", 0
    46 00000046 612066696C61207920-
    46 0000004F 636F6C756D6E612064-
    46 00000058 65206C61206F636120-
    46 00000061 61206D6F7665722028-
    46 0000006A 656A656D706C6F3A20-
    46 00000073 332033292E20507265-
    46 0000007C 73696F6E6520662070-
    46 00000085 6172612073616C6972-
    46 0000008E 206465206C61207061-
    46 00000097 72746964613A2000   
    47 0000009F 4D75657661206C6120-         mensaje_mover_oca_direccion db "Mueva la oca con a: izquierda /s: abajo /d: derecha. Presione f para salir de la partida: ", 0
    47 000000A8 6F636120636F6E2061-
    47 000000B1 3A20697A7175696572-
    47 000000BA 6461202F733A206162-
    47 000000C3 616A6F202F643A2064-
    47 000000CC 6572656368612E2050-
    47 000000D5 726573696F6E652066-
    47 000000DE 20706172612073616C-
    47 000000E7 6972206465206C6120-
    47 000000F0 706172746964613A20-
    47 000000F9 00                 
    48 000000FA 256868752025686875-         formatInputFilCol           db "%hhu %hhu", 0                               ; Formato para leer enteros de 1 byte
    48 00000103 00                 
    49 00000104 4C6F73206461746F73-         mensaje_error_input         db "Los datos ingresados son inv√°lidos. Intente nuevamente.", 0
    49 0000010D 20696E677265736164-
    49 00000116 6F7320736F6E20696E-
    49 0000011F 76C3A16C69646F732E-
    49 00000128 20496E74656E746520-
    49 00000131 6E756576616D656E74-
    49 0000013A 652E00             
    50 0000013D 4D7565766120656C20-         mensaje_mover_zorro         db "Mueva el zorro con w: arriba /a: izquierda /s: abajo /d: derecha /e: arriba-derecha /q: arriba-izquierda /z: abajo-izquierda /x: abajo-derecha. Presione f para salir de la partida: ", 0
    50 00000146 7A6F72726F20636F6E-
    50 0000014F 20773A206172726962-
    50 00000158 61202F613A20697A71-
    50 00000161 756965726461202F73-
    50 0000016A 3A206162616A6F202F-
    50 00000173 643A20646572656368-
    50 0000017C 61202F653A20617272-
    50 00000185 6962612D6465726563-
    50 0000018E 6861202F713A206172-
    50 00000197 726962612D697A7175-
    50 000001A0 6965726461202F7A3A-
    50 000001A9 206162616A6F2D697A-
    50 000001B2 71756965726461202F-
    50 000001BB 783A206162616A6F2D-
    50 000001C4 646572656368612E20-
    50 000001CD 50726573696F6E6520-
    50 000001D6 662070617261207361-
    50 000001DF 6C6972206465206C61-
    50 000001E8 20706172746964613A-
    50 000001F1 2000               
    51 000001F3 4D6F76696D69656E74-         mensaje_mov_invalido        db "Movimiento invalido, intente nuevamente", 0
    51 000001FC 6F20696E76616C6964-
    51 00000205 6F2C20696E74656E74-
    51 0000020E 65206E756576616D65-
    51 00000217 6E746500           
    52 0000021B 496E67726573652065-         mensaje_ingresar_j1         db "Ingrese el nombre del jugador 1 (zorro): ", 0
    52 00000224 6C206E6F6D62726520-
    52 0000022D 64656C206A75676164-
    52 00000236 6F72203120287A6F72-
    52 0000023F 726F293A2000       
    53 00000245 496E67726573652065-         mensaje_ingresar_j2         db "Ingrese el nombre del jugador 2 (ocas): ", 0
    53 0000024E 6C206E6F6D62726520-
    53 00000257 64656C206A75676164-
    53 00000260 6F72203220286F6361-
    53 00000269 73293A2000         
    54 0000026E 496E67726573652065-         mensaje_ingresar_simbolo_zorro db "Ingrese el simbolo para el zorro (presione Enter para usar 'X'): ", 0
    54 00000277 6C2073696D626F6C6F-
    54 00000280 207061726120656C20-
    54 00000289 7A6F72726F20287072-
    54 00000292 6573696F6E6520456E-
    54 0000029B 746572207061726120-
    54 000002A4 757361722027582729-
    54 000002AD 3A2000             
    55 000002B0 496E67726573652065-         mensaje_ingresar_simbolo_oca db "Ingrese el simbolo para las ocas (presione Enter para usar 'O'): ", 0
    55 000002B9 6C2073696D626F6C6F-
    55 000002C2 2070617261206C6173-
    55 000002CB 206F63617320287072-
    55 000002D4 6573696F6E6520456E-
    55 000002DD 746572207061726120-
    55 000002E6 7573617220274F2729-
    55 000002EF 3A2000             
    56 000002F2 456C2067616E61646F-         mensaje_ganador             db "El ganador es: %s ", 0
    56 000002FB 722065733A20257320-
    56 00000304 00                 
    57 00000305 456C206A7565676F20-         mensaje_fin_juego           db "El juego ha sido abandonado.", 0
    57 0000030E 6861207369646F2061-
    57 00000317 62616E646F6E61646F-
    57 00000320 2E00               
    58 00000322 4F63617320656C696D-         mensaje_ocas_eliminadas     db "Ocas eliminadas: %lli",0
    58 0000032B 696E616461733A2025-
    58 00000334 6C6C6900           
    59 00000338 0000000000000000            cantidad_ocas_eliminadas    dq 0
    60                                  
    61 00000340 4D6F76696D69656E74-         msg_mov_abajo               db "Movimientos abajo: %li",0
    61 00000349 6F73206162616A6F3A-
    61 00000352 20256C6900         
    62 00000357 4D6F76696D69656E74-         msg_mov_arriba              db "Movimientos arriba: %li",0
    62 00000360 6F7320617272696261-
    62 00000369 3A20256C6900       
    63 0000036F 4D6F76696D69656E74-         msg_mov_izquierda           db "Movimientos izquierda: %li",0
    63 00000378 6F7320697A71756965-
    63 00000381 7264613A20256C6900 
    64 0000038A 4D6F76696D69656E74-         msg_mov_derecha             db "Movimientos derecha: %li",0
    64 00000393 6F7320646572656368-
    64 0000039C 613A20256C6900     
    65 000003A3 4D6F76696D69656E74-         msg_mov_abajo_der           db "Movimientos abajo y derecha: %li",0
    65 000003AC 6F73206162616A6F20-
    65 000003B5 792064657265636861-
    65 000003BE 3A20256C6900       
    66 000003C4 4D6F76696D69656E74-         msg_mov_abajo_izq           db "Movimientos abajo e izquierda: %li",0
    66 000003CD 6F73206162616A6F20-
    66 000003D6 6520697A7175696572-
    66 000003DF 64613A20256C6900   
    67 000003E7 4D6F76696D69656E74-         msg_mov_arriba_der          db "Movimientos arriba y derecha: %li",0
    67 000003F0 6F7320617272696261-
    67 000003F9 207920646572656368-
    67 00000402 613A20256C6900     
    68 00000409 4D6F76696D69656E74-         msg_mov_arriba_izq          db "Movimientos arriba e izquierda: %li",0
    68 00000412 6F7320617272696261-
    68 0000041B 206520697A71756965-
    68 00000424 7264613A20256C6900 
    69                                  
    70                                      ;Variables de archivo
    71 0000042D 7461626C65726F2E74-         archivoTablero              db      "tablero.txt",0
    71 00000436 787400             
    72 00000439 7200                        modoAperturaRead            db      "r",0   ; Abro y leo un archivo de texto
    73 0000043B 7700                        modoAperturaWrite           db      "w",0
    74 0000043D 657374616469737469-         archivoEstadisticas         db      "estadisticas.txt",0
    74 00000446 6361732E74787400   
    75                                  
    76 0000044E 4C6F2073656E74696D-         msgErrorAp                  db      "Lo sentimos, no se pudo abrir el archivo.",10,0
    76 00000457 6F732C206E6F207365-
    76 00000460 207075646F20616272-
    76 00000469 697220656C20617263-
    76 00000472 6869766F2E0A00     
    77 00000479 4E6F20736520656E63-         msgErrorLectura             db      "No se encontr√≥ una partida guardada, se iniciar√° una nueva.",10,0
    77 00000482 6F6E7472C3B320756E-
    77 0000048B 612070617274696461-
    77 00000494 206775617264616461-
    77 0000049D 2C20736520696E6963-
    77 000004A6 696172C3A120756E61-
    77 000004AF 206E756576612E0A00 
    78 000004B8 4C65C3AD646F20636F-         msgLeido                    db      "Le√≠do con √©xito.",10,0
    78 000004C1 6E20C3A97869746F2E-
    78 000004CA 0A00               
    79 000004CC 4572726F7220636F6E-         msgErrorConvirt             db      "Error convirtiendo el numero",10,0
    79 000004D5 7669727469656E646F-
    79 000004DE 20656C206E756D6572-
    79 000004E7 6F0A00             
    80 000004EA 4572726F7220657363-         msgErrorEscritura           db      "Error escribiendo el archivo",10,0
    80 000004F3 72696269656E646F20-
    80 000004FC 656C20617263686976-
    80 00000505 6F0A00             
    81 00000508 536520686120656E63-         msgPartidaGuardada          db      "Se ha encontrado una partida guardada, desea continuarla? (si/no)",0
    81 00000511 6F6E747261646F2075-
    81 0000051A 6E6120706172746964-
    81 00000523 612067756172646164-
    81 0000052C 612C20646573656120-
    81 00000535 636F6E74696E756172-
    81 0000053E 6C613F202873692F6E-
    81 00000547 6F2900             
    82 0000054A 457374C3A173207361-         msgGuardarPartida           db      "Est√°s saliendo del juego, quer√©s guardar tu partida? (si/no)",0
    82 00000553 6C69656E646F206465-
    82 0000055C 6C206A7565676F2C20-
    82 00000565 71756572C3A9732067-
    82 0000056E 756172646172207475-
    82 00000577 20706172746964613F-
    82 00000580 202873692F6E6F2900 
    83 00000589 736900                      respuestaSi                 db      "si",0
    84 0000058C 20<rep 33h>                 registro          times 51  db      " "
    85 000005BF 20<rep 33h>                 tableroStr        times 51  db      " "
    86                                      
    87                                      estadisticas      times 0   db      ''
    88 000005F2 20                              turnoGuardado                        db     " "
    89 000005F3 20                              cantOcasEliminadas                   db     " "
    90 000005F4 20                              estats_mov_abajo_guardado            db     " "
    91 000005F5 20                              estats_mov_arriba_guardado           db     " "
    92 000005F6 20                              estats_mov_izq_guardado              db     " "
    93 000005F7 20                              estats_mov_der_guardado              db     " "
    94 000005F8 20                              estats_mov_abajo_der_guardado        db     " "
    95 000005F9 20                              estats_mov_abajo_izq_guardado        db     " "
    96 000005FA 20                              estats_mov_arriba_der_guardado       db     " "
    97 000005FB 20                              estats_mov_arriba_izq_guardado       db     " "
    98                                          
    99                                  
   100                                      CANT_FIL_COL        equ     7
   101                                      DESPLAZ_LIMITE      equ     48
   102                                      TURNO_ZORRO         equ     1
   103                                      TURNO_OCAS          equ     2
   104                                  
   105 000005FC 0000000000000000            estats_mov_abajo            dq  0
   106 00000604 0000000000000000            estats_mov_arriba           dq  0
   107 0000060C 0000000000000000            estats_mov_izq              dq  0
   108 00000614 0000000000000000            estats_mov_der              dq  0
   109 0000061C 0000000000000000            estats_mov_abajo_der        dq  0
   110 00000624 0000000000000000            estats_mov_abajo_izq        dq  0
   111 0000062C 0000000000000000            estats_mov_arriba_der       dq  0
   112 00000634 0000000000000000            estats_mov_arriba_izq       dq  0
   113                                  
   114                                  section .bss
   115 00000000 <res 15Eh>                  buffer          resb 350  ; Suficiente espacio para el tablero con saltos de l√≠nea
   116 0000015E <res Ah>                    input_oca       resb 10
   117 00000168 ??                          fila            resb 1
   118 00000169 ??                          columna         resb 1
   119 0000016A ??                          input_valido    resb 1
   120 0000016B ????????????????            posicion_oca    resq 1
   121 00000173 <res Ah>                    input_zorro     resb 10
   122 0000017D <res 32h>                   nombre_jugador1 resb 50
   123 000001AF <res 32h>                   nombre_jugador2 resb 50
   124 000001E1 ??                          turno           resb 1
   125 000001E2 ??                          comio_oca       resb 1
   126                                  
   127                                      ;Variables de archivo
   128 000001E3 ????????????????            handleArchTablero           resq  1
   129 000001EB ????????????????            handleArchEstadisticas      resq  1
   130 000001F3 ??                          numero                      resb  1
   131 000001F4 ??                          posicionVect                resb  1
   132 000001F5 ??                          posicionMatFil              resb  1
   133 000001F6 ??                          posicionMatCol              resb  1
   134 000001F7 ????????                    respuestaPartidaGuardada    resb  4
   135                                  
   136                                  section .text
   137                                  main:
   138 00000000 C60425[E1010000]01          mov     byte[turno], TURNO_ZORRO
   139                                  
   140 00000008 48BF-                       mov     rdi, archivoTablero
   140 0000000A [2D04000000000000] 
   141 00000012 E84C0A0000                  call    abrirLecturaArchivoTablero
   142 00000017 4883F800                    cmp     rax, 0
   143 0000001B 0F8EC4080000                jle     errorApertura
   144                                          
   145 00000021 E89D0A0000                  call    leerArchivoTablero  
   146 00000026 4883F800                    cmp     rax, 0
   147 0000002A 0F8ED1080000                jle     errorLeyendoArchivo
   148                                  
   149 00000030 48BF-                       mov     rdi, msgPartidaGuardada
   149 00000032 [0805000000000000] 
   150                                      mPuts
     4 0000003A 4883EC08            <1>  sub rsp,8
     5 0000003E E8(00000000)        <1>  call puts
     6 00000043 4883C408            <1>  add rsp,8
   151 00000047 48BF-                       mov     rdi, respuestaPartidaGuardada
   151 00000049 [F701000000000000] 
   152                                      mGets
    10 00000051 4883EC08            <1>  sub rsp,8
    11 00000055 E8(00000000)        <1>  call gets
    12 0000005A 4883C408            <1>  add rsp,8
   153 0000005E B902000000                  mov     rcx, 2
   154 00000063 488D3425[89050000]          lea     rsi, [respuestaSi]
   155 0000006B 488D3C25[F7010000]          lea     rdi, [respuestaPartidaGuardada]
   156 00000073 F3A6                        repe    cmpsb
   157 00000075 753C                        jne     continuar_jugando
   158 00000077 E8CC0A0000                  call    copiarRegistroATablero
   159 0000007C E8AB0A0000                  call    cerrarArchivoTablero
   160                                  
   161 00000081 48BF-                       mov     rdi, archivoEstadisticas
   161 00000083 [3D04000000000000] 
   162 0000008B E8EB090000                  call    abrirLecturaArchivoEstadisticas
   163 00000090 4883F800                    cmp     rax, 0
   164 00000094 0F8E4B080000                jle     errorApertura
   165                                  
   166 0000009A E8410A0000                  call    leerArchivoEstadisticas
   167 0000009F 4883F800                    cmp     rax, 0
   168 000000A3 0F8E58080000                jle     errorLeyendoArchivo
   169 000000A9 E8D40B0000                  call    cargarEstadisticas
   170 000000AE E8870A0000                  call    cerrarArchivoEstadisticas
   171                                  
   172                                  continuar_jugando:
   173 000000B3 4883EC08                    sub     rsp,8
   174 000000B7 E8F5000000                  call    ingresar_nombres_y_simbolos_jugadores  ;llamo a la subrutina para ingresar nombres y simbolos
   175 000000BC 4883C408                    add     rsp,8
   176                                  
   177 000000C0 4883EC08                    sub     rsp,8
   178 000000C4 E8D8010000                  call    construir_tablero       ;llamo a la subrutina para construir el tablero inicial
   179 000000C9 4883C408                    add     rsp,8
   180                                  
   181 000000CD 4883EC08                    sub     rsp,8
   182 000000D1 E8A6020000                  call    imprimir_tablero        ;llamo a la subrutina para imprimir el tablero
   183 000000D6 4883C408                    add     rsp,8
   184                                  
   185                                  loop_juego:
   186 000000DA 8A0425[E1010000]            mov     al, [turno]     ; veo de quien es el turno
   187 000000E1 3C01                        cmp     al, 1
   188 000000E3 7404                        je turno_zorro          ; si es el turno del zorro, voy a la etiqueta turno_zorro
   189 000000E5 3C02                        cmp     al, 2
   190 000000E7 746E                        je turno_ocas           ; si es el turno de las ocas, voy a la etiqueta turno_ocas
   191                                  
   192                                  turno_zorro:
   193 000000E9 4883EC08                    sub     rsp,8
   194 000000ED E86E040000                  call    verificar_movimientos_zorro  ; Verifico si el zorro tiene movimientos disponibles
   195 000000F2 4883C408                    add     rsp,8
   196 000000F6 803C25[6A010000]4E          cmp     byte [input_valido], 'N'  ; Si no tiene movimientos v√°lidos, las ocas ganan
   197 000000FE 0F84F5080000                je      ganador_ocas
   198 00000104 4883EC08                    sub     rsp,8
   199 00000108 E8BD020000                  call    pedir_movimiento_zorro  ;llamo a la subrutina para pedir movimiento del zorro
   200 0000010D 4883C408                    add     rsp,8
   201 00000111 803C25[73010000]66          cmp     byte [input_zorro], 'f' ; Verificar si se desea abandonar la partida
   202 00000119 0F841A080000                je      guardar_partida
   203 0000011F 4883EC08                    sub     rsp,8
   204 00000123 E8D1020000                  call    mover_zorro              ;llamo a la subrutina para mover al zorro
   205 00000128 4883C408                    add     rsp,8
   206 0000012C 803C25[6A010000]52          cmp     byte [input_valido], 'R'  ;comparo si el movimiento del zorro fue inv√°lido
   207 00000134 74B3                        je      turno_zorro              ;si fue inv√°lido, vuelvo a pedir movimiento del zorro
   208 00000136 4883EC08                    sub     rsp, 8
   209 0000013A E8DD0C0000                  call    sumarEstadisticaMovimiento
   210 0000013F 4883C408                    add     rsp, 8
   211 00000143 803C25[E2010000]01          cmp     byte [comio_oca], TURNO_ZORRO      ; Si comi√≥ una oca, no cambiar de turno
   212 0000014B 7444                        je      continuar_juego
   213 0000014D C60425[E1010000]02          mov     byte [turno], TURNO_OCAS          ;si fue v√°lido y no comi√≥ oca, cambio el turno a las ocas
   214 00000155 EB3A                        jmp     continuar_juego          ;voy a la etiqueta continuar_juego
   215                                  
   216                                  turno_ocas:
   217 00000157 4883EC08                    sub     rsp,8
   218 0000015B E887050000                  call    pedir_movimiento_oca     ;llamo a la subrutina para pedir movimiento de la oca
   219 00000160 4883C408                    add     rsp,8
   220 00000164 803C25[5E010000]66          cmp     byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   221 0000016C 0F84C7070000                je      guardar_partida
   222 00000172 4883EC08                    sub     rsp,8
   223 00000176 E813060000                  call    mover_oca                ;llamo a la subrutina para mover la oca
   224 0000017B 4883C408                    add     rsp,8
   225 0000017F 803C25[6A010000]52          cmp     byte [input_valido], 'R'  ;comparo si el movimiento de la oca fue inv√°lido
   226 00000187 74CE                        je      turno_ocas               ;si fue inv√°lido, vuelvo a pedir movimiento de la oca
   227 00000189 C60425[E1010000]01          mov     byte [turno], TURNO_ZORRO          ;si fue v√°lido, cambio el turno al zorro
   228                                  
   229                                  continuar_juego:
   230 00000191 4883EC08                    sub     rsp,8
   231 00000195 E807010000                  call    construir_tablero       ;reconstruyo el tablero despu√©s de cada turno
   232 0000019A 4883C408                    add     rsp,8
   233 0000019E 4883EC08                    sub     rsp,8
   234 000001A2 E8D5010000                  call    imprimir_tablero        ;imprimo el tablero despu√©s de cada turno
   235 000001A7 4883C408                    add     rsp,8
   236 000001AB E92AFFFFFF                  jmp     loop_juego              ;vuelvo al inicio del bucle del juego
   237                                  
   238 000001B0 C3                          ret
   239                                  
   240                                  ingresar_nombres_y_simbolos_jugadores:
   241 000001B1 48BF-                       mov     rdi, mensaje_ingresar_j1   
   241 000001B3 [1B02000000000000] 
   242                                      mPuts
     4 000001BB 4883EC08            <1>  sub rsp,8
     5 000001BF E8(00000000)        <1>  call puts
     6 000001C4 4883C408            <1>  add rsp,8
   243 000001C8 48BF-                       mov     rdi, nombre_jugador1              ; guardo el nombre de cada jugador
   243 000001CA [7D01000000000000] 
   244                                      mGets
    10 000001D2 4883EC08            <1>  sub rsp,8
    11 000001D6 E8(00000000)        <1>  call gets
    12 000001DB 4883C408            <1>  add rsp,8
   245 000001DF 48BF-                       mov     rdi, mensaje_ingresar_j2
   245 000001E1 [4502000000000000] 
   246                                      mPuts
     4 000001E9 4883EC08            <1>  sub rsp,8
     5 000001ED E8(00000000)        <1>  call puts
     6 000001F2 4883C408            <1>  add rsp,8
   247 000001F6 48BF-                       mov     rdi, nombre_jugador2
   247 000001F8 [AF01000000000000] 
   248                                      mGets
    10 00000200 4883EC08            <1>  sub rsp,8
    11 00000204 E8(00000000)        <1>  call gets
    12 00000209 4883C408            <1>  add rsp,8
   249 0000020D 48BF-                       mov     rdi, mensaje_ingresar_simbolo_zorro
   249 0000020F [6E02000000000000] 
   250                                      mPuts
     4 00000217 4883EC08            <1>  sub rsp,8
     5 0000021B E8(00000000)        <1>  call puts
     6 00000220 4883C408            <1>  add rsp,8
   251 00000224 48BF-                       mov     rdi, simbolo_zorro
   251 00000226 [3700000000000000] 
   252 0000022E 48BE-                       mov     rsi, simbolo_zorro
   252 00000230 [3700000000000000] 
   253                                      mGets
    10 00000238 4883EC08            <1>  sub rsp,8
    11 0000023C E8(00000000)        <1>  call gets
    12 00000241 4883C408            <1>  add rsp,8
   254 00000245 803C25[37000000]00          cmp     byte [simbolo_zorro], 0   ; verifico si se presiono enter
   255 0000024D 7508                        jne     skip_default_zorro        ; si no es enter, se utiliza el del usuario que se guardo en simbolo_zorro
   256 0000024F C60425[37000000]58          mov     byte [simbolo_zorro], 'X' ; se asigna el s√≠mbolo por defecto para el zorro, pisando en caso de enter
   257                                  skip_default_zorro:
   258 00000257 48BF-                       mov     rdi, mensaje_ingresar_simbolo_oca
   258 00000259 [B002000000000000] 
   259                                      mPuts
     4 00000261 4883EC08            <1>  sub rsp,8
     5 00000265 E8(00000000)        <1>  call puts
     6 0000026A 4883C408            <1>  add rsp,8
   260 0000026E 48BF-                       mov     rdi, simbolo_oca
   260 00000270 [3500000000000000] 
   261 00000278 48BE-                       mov     rsi, simbolo_oca
   261 0000027A [3500000000000000] 
   262                                      mGets
    10 00000282 4883EC08            <1>  sub rsp,8
    11 00000286 E8(00000000)        <1>  call gets
    12 0000028B 4883C408            <1>  add rsp,8
   263 0000028F 803C25[35000000]00          cmp     byte [simbolo_oca], 0     ; verifico si se presiono enter
   264 00000297 7508                        jne     construir_tablero          ; si no es enter, se utiliza el del usuario que se guardo en simbolo_oca
   265 00000299 C60425[35000000]4F          mov     byte [simbolo_oca], 'O'   ; se asigna el s√≠mbolo por defecto para las ocas, pisando en caso de enter
   266                                  
   267                                  
   268                                  construir_tablero:
   269 000002A1 BB01000000                  mov     rbx, 1            ; i que ser√° la fila, iniciada en 1 y no aumenta hasta no terminar las 7 columnas
   270 000002A6 41BA01000000                mov     r10, 1            ; j que ser√° la columna
   271 000002AC 48BF-                       mov     rdi, buffer       ; Apuntar al inicio del buffer
   271 000002AE [0000000000000000] 
   272                                  
   273                                  imprimir_siguiente_caracter:   
   274 000002B6 4889D8                      mov     rax, rbx           ;i
   275 000002B9 48FFC8                      dec     rax
   276 000002BC 486BC007                    imul    rax, rax, 7       ; (i-1) * longfila
   277 000002C0 4C89D2                      mov     rdx, r10          ;j
   278 000002C3 48FFCA                      dec     rdx
   279 000002C6 4801D0                      add     rax, rdx          ; (i-1) * longfila + (j-1)
   280 000002C9 48BE-                       mov     rsi, tablero
   280 000002CB [0000000000000000] 
   281 000002D3 4801C6                      add     rsi, rax          ; rsi apunta a la posici√≥n actual en el tablero
   282                                  
   283 000002D6 803E00                      cmp     byte [rsi], 0      ;segun el numero en tablero imprimo un caracter distinto
   284 000002D9 740F                        je      imprimir_fuera_tablero                
   285 000002DB 803E02                      cmp     byte [rsi], 2           
   286 000002DE 7458                        je      imprimir_espacio_vacio              
   287 000002E0 803E01                      cmp     byte [rsi], 1         
   288 000002E3 741F                        je      imprimir_oca
   289 000002E5 803E03                      cmp     byte [rsi], 3
   290 000002E8 7434                        je      imprimir_zorro
   291                                  
   292                                  imprimir_fuera_tablero:
   293 000002EA 8A0425[3B000000]            mov     al, [simbolo_separador]
   294 000002F1 AA                          stosb                               ;almaceno e incremento el rdi
   295 000002F2 8A0425[33000000]            mov     al, [simbolo_fuera_tablero]
   296 000002F9 AA                          stosb
   297 000002FA 8A0425[3B000000]            mov     al, [simbolo_separador]
   298 00000301 AA                          stosb
   299 00000302 EB4E                        jmp     continuar_construyendo_tablero
   300                                  
   301                                  imprimir_oca:
   302 00000304 8A0425[3B000000]            mov     al, [simbolo_separador]
   303 0000030B AA                          stosb
   304 0000030C 8A0425[35000000]            mov     al, [simbolo_oca]
   305 00000313 AA                          stosb
   306 00000314 8A0425[3B000000]            mov     al, [simbolo_separador]
   307 0000031B AA                          stosb
   308 0000031C EB34                        jmp     continuar_construyendo_tablero
   309                                  
   310                                  imprimir_zorro:
   311 0000031E 8A0425[3B000000]            mov     al, [simbolo_separador]
   312 00000325 AA                          stosb
   313 00000326 8A0425[37000000]            mov     al, [simbolo_zorro]
   314 0000032D AA                          stosb
   315 0000032E 8A0425[3B000000]            mov     al, [simbolo_separador]
   316 00000335 AA                          stosb
   317 00000336 EB1A                        jmp     continuar_construyendo_tablero
   318                                  
   319                                  imprimir_espacio_vacio:
   320 00000338 8A0425[3B000000]            mov     al, [simbolo_separador]
   321 0000033F AA                          stosb
   322 00000340 8A0425[39000000]            mov     al, [simbolo_espacio_vacio]
   323 00000347 AA                          stosb
   324 00000348 8A0425[3B000000]            mov     al, [simbolo_separador]
   325 0000034F AA                          stosb
   326 00000350 EB00                        jmp     continuar_construyendo_tablero
   327                                  
   328                                  continuar_construyendo_tablero:
   329 00000352 49FFC2                      inc     r10                ; Incrementar en uno para tener la siguiente columna
   330 00000355 4983FA08                    cmp     r10, 8             ; Si no llegu√© a la columna 7, construyo el siguiente elemento de la misma fila              
   331 00000359 0F8C57FFFFFF                jl      imprimir_siguiente_caracter       
   332                                  
   333                                      ; A√±adir un salto de l√≠nea al final de la fila
   334 0000035F 8A0425[31000000]            mov     al, [salto_linea]
   335 00000366 AA                          stosb
   336 00000367 41BA01000000                mov     r10, 1
   337 0000036D 48FFC3                      inc     rbx                ; Incremento en uno la fila (siguiente fila)
   338 00000370 4883FB08                    cmp     rbx, 8             ; Si llegu√© a la fila 7, termino la construcci√≥n
   339 00000374 7405                        je      fin_construir_tablero
   340                                  
   341 00000376 E93BFFFFFF                  jmp     imprimir_siguiente_caracter
   342                                  
   343                                  fin_construir_tablero:
   344 0000037B C3                          ret
   345                                  
   346                                  imprimir_tablero:
   347 0000037C 48BF-                       mov     rdi, buffer
   347 0000037E [0000000000000000] 
   348                                      mPuts
     4 00000386 4883EC08            <1>  sub rsp,8
     5 0000038A E8(00000000)        <1>  call puts
     6 0000038F 4883C408            <1>  add rsp,8
   349 00000393 48BF-                       mov rdi, mensaje_ocas_eliminadas
   349 00000395 [2203000000000000] 
   350 0000039D 488B3425[38030000]          mov rsi, [cantidad_ocas_eliminadas]
   351                                      mPrintF
    16 000003A5 4883EC08            <1>  sub rsp,8
    17 000003A9 E8(00000000)        <1>  call printf
    18 000003AE 4883C408            <1>  add rsp,8
   352 000003B2 48BF-                       mov rdi, salto_linea
   352 000003B4 [3100000000000000] 
   353                                      mPuts
     4 000003BC 4883EC08            <1>  sub rsp,8
     5 000003C0 E8(00000000)        <1>  call puts
     6 000003C5 4883C408            <1>  add rsp,8
   354 000003C9 C3                          ret
   355                                  
   356                                  pedir_movimiento_zorro:
   357 000003CA 48BF-                       mov rdi, mensaje_mover_zorro
   357 000003CC [3D01000000000000] 
   358                                      mPuts
     4 000003D4 4883EC08            <1>  sub rsp,8
     5 000003D8 E8(00000000)        <1>  call puts
     6 000003DD 4883C408            <1>  add rsp,8
   359 000003E1 48BF-                       mov rdi, input_zorro
   359 000003E3 [7301000000000000] 
   360                                      mGets
    10 000003EB 4883EC08            <1>  sub rsp,8
    11 000003EF E8(00000000)        <1>  call gets
    12 000003F4 4883C408            <1>  add rsp,8
   361 000003F8 C3                          ret
   362                                  
   363                                  mover_zorro:
   364 000003F9 48BE-                       mov rsi, tablero
   364 000003FB [0000000000000000] 
   365 00000403 B931000000                  mov rcx, 49
   366                                  
   367                                  buscar_zorro:
   368 00000408 AC                          lodsb       ;apunto al siguiente y lo cargo en al
   369 00000409 3C03                        cmp al, 3
   370 0000040B 7403                        je zorro_encontrado
   371 0000040D E2F9                        loop buscar_zorro
   372 0000040F C3                          ret
   373                                  
   374                                  zorro_encontrado:
   375 00000410 4889F3                      mov rbx, rsi   ; Mueve el valor del registro rsi (posici√≥n actual del zorro) a rbx
   376 00000413 48FFCB                      dec rbx         ; Decrementa rbx en 1 para apuntar correctamente a la posici√≥n actual del zorro
   377                                  
   378 00000416 48BF-                       mov rdi, input_zorro
   378 00000418 [7301000000000000] 
   379 00000420 8A07                        mov al, [rdi]
   380 00000422 3C77                        cmp al, 'w'
   381 00000424 7439                        je mover_zorro_arriba
   382 00000426 3C73                        cmp al, 's'
   383 00000428 7442                        je mover_zorro_abajo
   384 0000042A 3C61                        cmp al, 'a'
   385 0000042C 7449                        je mover_zorro_izquierda
   386 0000042E 3C64                        cmp al, 'd'
   387 00000430 7451                        je mover_zorro_derecha
   388 00000432 3C65                        cmp al, 'e'
   389 00000434 7457                        je mover_zorro_arriba_derecha
   390 00000436 3C71                        cmp al, 'q'
   391 00000438 7460                        je mover_zorro_arriba_izquierda
   392 0000043A 3C7A                        cmp al, 'z'
   393 0000043C 7469                        je mover_zorro_abajo_izquierda
   394 0000043E 3C78                        cmp al, 'x'
   395 00000440 7470                        je mover_zorro_abajo_derecha
   396 00000442 48BF-                       mov rdi, mensaje_error_input
   396 00000444 [0401000000000000] 
   397                                      mPuts
     4 0000044C 4883EC08            <1>  sub rsp,8
     5 00000450 E8(00000000)        <1>  call puts
     6 00000455 4883C408            <1>  add rsp,8
   398 00000459 E98BFCFFFF                  jmp turno_zorro
   399 0000045E C3                          ret
   400                                  
   401                                  mover_zorro_arriba:
   402 0000045F 4883EB07                    sub rbx, 7                  ; resto 7 a rbx para mover al zorro una fila hacia arriba
   403 00000463 48C7C7F9FFFFFF              mov rdi, -7                 ; la direcci√≥n del desplazamiento es -7
   404 0000046A EB51                        jmp validar_movimiento_zorro 
   405                                  
   406                                  mover_zorro_abajo:
   407 0000046C 4883C307                    add rbx, 7                  ; sumo 7 a rbx para mover al zorro una fila hacia abajo
   408 00000470 BF07000000                  mov rdi, 7                  ; la direcci√≥n del desplazamiento es 7
   409 00000475 EB46                        jmp validar_movimiento_zorro
   410                                  
   411                                  mover_zorro_izquierda:
   412 00000477 48FFCB                      dec rbx                     ; resto 1 a rbx para mover al zorro una columna a la izquierda
   413 0000047A 48C7C7FFFFFFFF              mov rdi, -1                 ; la direcci√≥n del desplazamiento es -1
   414 00000481 EB3A                        jmp validar_movimiento_zorro
   415                                  
   416                                  mover_zorro_derecha:
   417 00000483 48FFC3                      inc rbx                     ; sumo 1 a rbx para mover al zorro una columna a la derecha
   418 00000486 BF01000000                  mov rdi, 1                  ; la direcci√≥n del desplazamiento es 1
   419 0000048B EB30                        jmp validar_movimiento_zorro
   420                                  
   421                                  mover_zorro_arriba_derecha:
   422 0000048D 4883EB06                    sub rbx, 6                  ; resto 6 a rbx para mover al zorro en diagonal arriba derecha
   423 00000491 48C7C7FAFFFFFF              mov rdi, -6                 ; la direcci√≥n del desplazamiento es -6
   424 00000498 EB23                        jmp validar_movimiento_zorro
   425                                  
   426                                  mover_zorro_arriba_izquierda:
   427 0000049A 4883EB08                    sub rbx, 8                  ; resto 8 a rbx para mover al zorro en diagonal arriba izquierda
   428 0000049E 48C7C7F8FFFFFF              mov rdi, -8                 ; la direcci√≥n del desplazamiento es -8
   429 000004A5 EB16                        jmp validar_movimiento_zorro
   430                                  
   431                                  mover_zorro_abajo_izquierda:
   432 000004A7 4883C306                    add rbx, 6                  ; sumo 6 a rbx para mover al zorro en diagonal abajo izquierda
   433 000004AB BF06000000                  mov rdi, 6                  ; la direcci√≥n del desplazamiento es 6
   434 000004B0 EB0B                        jmp validar_movimiento_zorro
   435                                  
   436                                  mover_zorro_abajo_derecha:
   437 000004B2 4883C308                    add rbx, 8                  ; sumo 8 a rbx para mover al zorro en diagonal abajo derecha
   438 000004B6 BF08000000                  mov rdi, 8                  ; la direcci√≥n del desplazamiento es 8
   439 000004BB EB00                        jmp validar_movimiento_zorro
   440                                  
   441                                  validar_movimiento_zorro:
   442 000004BD 803B02                      cmp byte [rbx], 2           ; Comparar destino con una posici√≥n vac√≠a (2)
   443 000004C0 7518                        jne verificar_si_oca       ; Si no est√° vac√≠a, verificar si se puede comer una oca
   444 000004C2 C646FF02                    mov byte [rsi - 1], 2       ; Actualizar la posici√≥n anterior del zorro con 2 (vac√≠o)
   445 000004C6 C60303                      mov byte [rbx], 3           ; Colocar al zorro en la nueva posici√≥n
   446 000004C9 C60425[E2010000]00          mov byte [comio_oca], 0     ; Indicar que no comi√≥ oca
   447 000004D1 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue v√°lido
   448 000004D9 C3                          ret
   449                                  
   450                                  verificar_si_oca:
   451 000004DA 803B01                      cmp byte [rbx], 1           ; Comparar destino con una oca (1)
   452 000004DD 7561                        jne movimiento_invalido_zorro ; Si no es una oca, el movimiento es inv√°lido
   453 000004DF EB00                        jmp validar_comer_oca       ; Ir a validar si se puede comer la oca
   454                                  
   455                                  validar_comer_oca:
   456                                      ; Verificar si hay una oca en la posici√≥n intermedia
   457                                      ; RDI contiene la direcci√≥n del desplazamiento
   458 000004E1 4889D8                      mov rax, rbx
   459 000004E4 4801F8                      add rax, rdi
   460 000004E7 803802                      cmp byte [rax], 2           ; Verificar si la posici√≥n de salto est√° vac√≠a
   461 000004EA 7554                        jne movimiento_invalido_zorro
   462                                      ; Mover el zorro a la posici√≥n de salto
   463 000004EC C646FF02                    mov byte [rsi - 1], 2       ; Actualizar la posici√≥n anterior del zorro con 2 (vac√≠o)
   464 000004F0 C60003                      mov byte [rax], 3           ; Colocar el zorro en la nueva posici√≥n de salto
   465                                      ; Borrar la oca que fue comida
   466 000004F3 4829F8                      sub rax, rdi
   467 000004F6 C60002                      mov byte [rax], 2
   468 000004F9 48830425[38030000]-         add qword [cantidad_ocas_eliminadas], 1 ;aumento en uno la cantidad de ocas eliminadas
   468 00000501 01                 
   469 00000502 48833C25[38030000]-         cmp qword [cantidad_ocas_eliminadas], 12  ;si gana el zorro
   469 0000050A 0C                 
   470 0000050B 0F84C5040000                je ganador_zorro
   471 00000511 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue v√°lido
   472 00000519 C60425[E2010000]01          mov byte [comio_oca], 1     ; Indicar que el zorro comi√≥ una oca
   473                                      ; Reconstruir e imprimir el tablero para reflejar el estado actual
   474 00000521 4883EC08                    sub     rsp,8
   475 00000525 E877FDFFFF                  call    construir_tablero
   476 0000052A 4883C408                    add     rsp,8
   477 0000052E 4883EC08                    sub     rsp,8
   478 00000532 E845FEFFFF                  call    imprimir_tablero
   479 00000537 4883C408                    add     rsp,8
   480 0000053B E9A9FBFFFF                  jmp turno_zorro             ; Continuar el turno del zorro
   481                                  
   482                                  movimiento_invalido_zorro:
   483 00000540 C60425[6A010000]52          mov byte [input_valido], 'R'
   484 00000548 48BF-                       mov rdi, mensaje_mov_invalido
   484 0000054A [F301000000000000] 
   485                                      mPuts
     4 00000552 4883EC08            <1>  sub rsp,8
     5 00000556 E8(00000000)        <1>  call puts
     6 0000055B 4883C408            <1>  add rsp,8
   486 0000055F C3                          ret
   487                                  
   488                                  verificar_movimientos_zorro:
   489 00000560 48BE-                       mov rsi, tablero
   489 00000562 [0000000000000000] 
   490 0000056A B931000000                  mov rcx, 49
   491                                  
   492                                  buscar_zorro_verificacion_mov:
   493 0000056F AC                          lodsb
   494 00000570 3C03                        cmp al, 3
   495 00000572 7403                        je zorro_encontrado_verificar
   496 00000574 E2F9                        loop buscar_zorro_verificacion_mov
   497 00000576 C3                          ret
   498                                  
   499                                  zorro_encontrado_verificar:
   500 00000577 4889F3                      mov rbx, rsi   ; Mueve el valor del registro rsi (posici√≥n actual del zorro) a rbx
   501 0000057A 48FFCB                      dec rbx         ; Decrementa rbx en 1 para apuntar correctamente a la posici√≥n actual del zorro
   502                                  
   503                                      ; Verificar todas las direcciones alrededor del zorro (cercanas)
   504 0000057D 4889DF                      mov rdi, rbx
   505 00000580 4883EF07                    sub rdi, 7
   506 00000584 E84F010000                  call verificar_casillero
   507 00000589 803C25[6A010000]53          cmp byte [input_valido], 'S'
   508 00000591 0F8447010000                je movimiento_valido
   509                                  
   510 00000597 4889DF                      mov rdi, rbx
   511 0000059A 4883C707                    add rdi, 7
   512 0000059E E835010000                  call verificar_casillero
   513 000005A3 803C25[6A010000]53          cmp byte [input_valido], 'S'
   514 000005AB 0F842D010000                je movimiento_valido
   515                                  
   516 000005B1 4889DF                      mov rdi, rbx
   517 000005B4 48FFCF                      dec rdi
   518 000005B7 E81C010000                  call verificar_casillero
   519 000005BC 803C25[6A010000]53          cmp byte [input_valido], 'S'
   520 000005C4 0F8414010000                je movimiento_valido
   521                                  
   522 000005CA 4889DF                      mov rdi, rbx
   523 000005CD 48FFC7                      inc rdi
   524 000005D0 E803010000                  call verificar_casillero
   525 000005D5 803C25[6A010000]53          cmp byte [input_valido], 'S'
   526 000005DD 0F84FB000000                je movimiento_valido
   527                                  
   528 000005E3 4889DF                      mov rdi, rbx
   529 000005E6 4883EF06                    sub rdi, 6
   530 000005EA E8E9000000                  call verificar_casillero
   531 000005EF 803C25[6A010000]53          cmp byte [input_valido], 'S'
   532 000005F7 0F84E1000000                je movimiento_valido
   533                                  
   534 000005FD 4889DF                      mov rdi, rbx
   535 00000600 4883EF08                    sub rdi, 8
   536 00000604 E8CF000000                  call verificar_casillero
   537 00000609 803C25[6A010000]53          cmp byte [input_valido], 'S'
   538 00000611 0F84C7000000                je movimiento_valido
   539                                  
   540 00000617 4889DF                      mov rdi, rbx
   541 0000061A 4883C706                    add rdi, 6
   542 0000061E E8B5000000                  call verificar_casillero
   543 00000623 803C25[6A010000]53          cmp byte [input_valido], 'S'
   544 0000062B 0F84AD000000                je movimiento_valido
   545                                  
   546 00000631 4889DF                      mov rdi, rbx
   547 00000634 4883C708                    add rdi, 8
   548 00000638 E89B000000                  call verificar_casillero
   549 0000063D 803C25[6A010000]53          cmp byte [input_valido], 'S'
   550 00000645 0F8493000000                je movimiento_valido
   551                                  
   552                                      ; Verificar las posiciones m√°s alejadas (dos espacios en cada direcci√≥n)
   553 0000064B 4889DF                      mov rdi, rbx
   554 0000064E 4883EF0E                    sub rdi, 14  ; dos espacios hacia arriba-izquierda
   555 00000652 E881000000                  call verificar_casillero
   556 00000657 803C25[6A010000]53          cmp byte [input_valido], 'S'
   557 0000065F 747D                        je movimiento_valido
   558                                  
   559 00000661 4889DF                      mov rdi, rbx
   560 00000664 4883EF0C                    sub rdi, 12  ; dos espacios hacia arriba-derecha
   561 00000668 E86B000000                  call verificar_casillero
   562 0000066D 803C25[6A010000]53          cmp byte [input_valido], 'S'
   563 00000675 7467                        je movimiento_valido
   564                                  
   565 00000677 4889DF                      mov rdi, rbx
   566 0000067A 4883C70C                    add rdi, 12  ; dos espacios hacia abajo-izquierda
   567 0000067E E855000000                  call verificar_casillero
   568 00000683 803C25[6A010000]53          cmp byte [input_valido], 'S'
   569 0000068B 7451                        je movimiento_valido
   570                                  
   571 0000068D 4889DF                      mov rdi, rbx
   572 00000690 4883C70E                    add rdi, 14  ; dos espacios hacia abajo-derecha
   573 00000694 E83F000000                  call verificar_casillero
   574 00000699 803C25[6A010000]53          cmp byte [input_valido], 'S'
   575 000006A1 743B                        je movimiento_valido
   576                                  
   577 000006A3 4889DF                      mov rdi, rbx
   578 000006A6 4883EF0E                    sub rdi, 14  ; dos espacios hacia arriba
   579 000006AA E829000000                  call verificar_casillero
   580 000006AF 803C25[6A010000]53          cmp byte [input_valido], 'S'
   581 000006B7 7425                        je movimiento_valido
   582                                  
   583 000006B9 4889DF                      mov rdi, rbx
   584 000006BC 4883C70E                    add rdi, 14  ; dos espacios hacia abajo
   585 000006C0 E813000000                  call verificar_casillero
   586 000006C5 803C25[6A010000]53          cmp byte [input_valido], 'S'
   587 000006CD 740F                        je movimiento_valido
   588                                  
   589                                      ; Si no hay movimientos v√°lidos
   590 000006CF C60425[6A010000]4E          mov byte [input_valido], 'N'
   591 000006D7 C3                          ret
   592                                  
   593                                  verificar_casillero:
   594 000006D8 803F02                      cmp byte [rdi], 2  ; Verificar si el casillero es vac√≠o (2)
   595 000006DB 7401                        je movimiento_valido
   596 000006DD C3                          ret
   597                                  
   598                                  movimiento_valido:
   599 000006DE C60425[6A010000]53          mov byte [input_valido], 'S'
   600 000006E6 C3                          ret
   601                                  
   602                                  pedir_movimiento_oca:
   603 000006E7 48BF-                       mov rdi, mensaje_mover_oca
   603 000006E9 [3D00000000000000] 
   604                                      mPuts
     4 000006F1 4883EC08            <1>  sub rsp,8
     5 000006F5 E8(00000000)        <1>  call puts
     6 000006FA 4883C408            <1>  add rsp,8
   605 000006FE 48BF-                       mov rdi, input_oca
   605 00000700 [5E01000000000000] 
   606                                      mGets
    10 00000708 4883EC08            <1>  sub rsp,8
    11 0000070C E8(00000000)        <1>  call gets
    12 00000711 4883C408            <1>  add rsp,8
   607 00000715 803C25[5E010000]66          cmp byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   608 0000071D 0F8416020000                je guardar_partida
   609                                      ; Validar las coordenadas de la oca
   610 00000723 4883EC08                    sub rsp,8
   611 00000727 E8F5000000                  call validar_coordenadas_oca
   612 0000072C 4883C408                    add rsp,8
   613 00000730 803C25[6A010000]53          cmp byte [input_valido], 'S'
   614 00000738 7425                        je pedir_direccion_oca
   615                                  
   616 0000073A 48BF-                       mov rdi, mensaje_error_input
   616 0000073C [0401000000000000] 
   617                                      mPuts
     4 00000744 4883EC08            <1>  sub rsp,8
     5 00000748 E8(00000000)        <1>  call puts
     6 0000074D 4883C408            <1>  add rsp,8
   618 00000751 4883EC08                    sub rsp,8
   619 00000755 E88DFFFFFF                  call pedir_movimiento_oca
   620 0000075A 4883C408                    add rsp,8
   621 0000075E C3                          ret
   622                                  
   623                                  pedir_direccion_oca:
   624 0000075F 48BF-                       mov rdi, mensaje_mover_oca_direccion
   624 00000761 [9F00000000000000] 
   625                                      mPuts
     4 00000769 4883EC08            <1>  sub rsp,8
     5 0000076D E8(00000000)        <1>  call puts
     6 00000772 4883C408            <1>  add rsp,8
   626 00000776 48BF-                       mov rdi, input_oca
   626 00000778 [5E01000000000000] 
   627                                      mGets
    10 00000780 4883EC08            <1>  sub rsp,8
    11 00000784 E8(00000000)        <1>  call gets
    12 00000789 4883C408            <1>  add rsp,8
   628 0000078D C3                          ret
   629                                  
   630                                  mover_oca:
   631 0000078E 48BE-                       mov rsi, tablero
   631 00000790 [0000000000000000] 
   632                                      ; Calcular la posici√≥n en el tablero
   633 00000798 488B1C25[6B010000]          mov rbx, [posicion_oca]
   634                                      ; Leer la direcci√≥n de movimiento
   635 000007A0 48BF-                       mov rdi, input_oca
   635 000007A2 [5E01000000000000] 
   636 000007AA 8A07                        mov al, [rdi]
   637 000007AC 3C73                        cmp al, 's'
   638 000007AE 7425                        je mover_oca_abajo
   639 000007B0 3C61                        cmp al, 'a'
   640 000007B2 7427                        je mover_oca_izquierda
   641 000007B4 3C64                        cmp al, 'd'
   642 000007B6 7428                        je mover_oca_derecha
   643 000007B8 48BF-                       mov rdi, mensaje_error_input
   643 000007BA [0401000000000000] 
   644                                      mPuts
     4 000007C2 4883EC08            <1>  sub rsp,8
     5 000007C6 E8(00000000)        <1>  call puts
     6 000007CB 4883C408            <1>  add rsp,8
   645 000007CF E983F9FFFF                  jmp turno_ocas
   646 000007D4 C3                          ret
   647                                  
   648                                  mover_oca_abajo:
   649 000007D5 4883C307                    add rbx, 7
   650 000007D9 EB0A                        jmp validar_movimiento_oca
   651                                  
   652                                  mover_oca_izquierda:
   653 000007DB 48FFCB                      dec rbx
   654 000007DE EB05                        jmp validar_movimiento_oca
   655                                  
   656                                  mover_oca_derecha:
   657 000007E0 48FFC3                      inc rbx
   658 000007E3 EB00                        jmp validar_movimiento_oca
   659                                  
   660                                  validar_movimiento_oca:
   661 000007E5 803B02                      cmp byte [rbx], 2
   662 000007E8 7517                        jne movimiento_invalido_oca
   663 000007EA 488B3425[6B010000]          mov rsi, [posicion_oca]
   664 000007F2 C60602                      mov byte [rsi], 2          ; Actualizar la posici√≥n anterior de la oca con 2 (vac√≠o)
   665 000007F5 C60301                      mov byte [rbx], 1          ; Colocar la oca en la nueva posici√≥n
   666 000007F8 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue v√°lido
   667 00000800 C3                          ret
   668                                  
   669                                  movimiento_invalido_oca:
   670 00000801 C60425[6A010000]52          mov byte [input_valido], 'R'
   671 00000809 48BF-                       mov rdi, mensaje_mov_invalido
   671 0000080B [F301000000000000] 
   672                                      mPuts
     4 00000813 4883EC08            <1>  sub rsp,8
     5 00000817 E8(00000000)        <1>  call puts
     6 0000081C 4883C408            <1>  add rsp,8
   673 00000820 C3                          ret
   674                                  
   675                                  validar_coordenadas_oca:
   676 00000821 C60425[6A010000]4E          mov byte [input_valido], 'N'
   677 00000829 48BF-                       mov rdi, input_oca
   677 0000082B [5E01000000000000] 
   678 00000833 48BE-                       mov rsi, formatInputFilCol
   678 00000835 [FA00000000000000] 
   679 0000083D 48BA-                       mov rdx, fila
   679 0000083F [6801000000000000] 
   680 00000847 48B9-                       mov rcx, columna
   680 00000849 [6901000000000000] 
   681 00000851 4883EC08                    sub rsp,8
   682 00000855 E8(00000000)                call sscanf
   683 0000085A 4883C408                    add rsp,8
   684                                  
   685 0000085E 4883F802                    cmp rax, 2
   686 00000862 7C69                        jl coordenadas_invalidas
   687                                  
   688 00000864 803C25[68010000]01          cmp byte [fila], 1
   689 0000086C 7C5F                        jl coordenadas_invalidas
   690 0000086E 803C25[68010000]07          cmp byte [fila], 7
   691 00000876 7F55                        jg coordenadas_invalidas
   692                                  
   693 00000878 803C25[69010000]01          cmp byte [columna], 1
   694 00000880 7C4B                        jl coordenadas_invalidas
   695 00000882 803C25[69010000]07          cmp byte [columna], 7
   696 0000088A 7F41                        jg coordenadas_invalidas
   697                                  
   698                                      ; Calcular la posici√≥n en el tablero
   699 0000088C 660FB60425-                 movzx ax, byte [fila]   ;cargo en ax la fila
   699 00000891 [68010000]         
   700 00000895 6683E801                    sub ax, 1               ;para indexar en 0 
   701 00000899 666BC007                    imul ax, 7              ;desplazamiento en fila
   702 0000089D 660FB61425-                 movzx dx, byte [columna]    ;cargo en dx la columna
   702 000008A2 [69010000]         
   703 000008A6 6683EA01                    sub dx, 1   
   704 000008AA 6601D0                      add ax, dx              ;desplazamiento total
   705 000008AD 4889C3                      mov rbx, rax    
   706 000008B0 4881C3[00000000]            add rbx, tablero          ;posicion en el tablero
   707                                  
   708                                      ; Verificar si hay una oca en la posici√≥n ingresada
   709 000008B7 803B01                      cmp byte [rbx], 1
   710 000008BA 7511                        jne coordenadas_invalidas
   711                                  
   712 000008BC C60425[6A010000]53          mov byte [input_valido], 'S'
   713 000008C4 48891C25[6B010000]          mov [posicion_oca], rbx    ; Guardar la posici√≥n de la oca
   714 000008CC C3                          ret
   715                                  
   716                                  coordenadas_invalidas:
   717 000008CD 48BF-                       mov rdi, mensaje_error_input
   717 000008CF [0401000000000000] 
   718                                      mPuts
     4 000008D7 4883EC08            <1>  sub rsp,8
     5 000008DB E8(00000000)        <1>  call puts
     6 000008E0 4883C408            <1>  add rsp,8
   719 000008E4 C3                          ret
   720                                  
   721                                  errorApertura:
   722 000008E5 48BF-                       mov   rdi, msgErrorAp
   722 000008E7 [4E04000000000000] 
   723                                      mPuts
     4 000008EF 4883EC08            <1>  sub rsp,8
     5 000008F3 E8(00000000)        <1>  call puts
     6 000008F8 4883C408            <1>  add rsp,8
   724 000008FC E934010000                  jmp   fin_juego
   725                                  
   726                                  errorLeyendoArchivo:
   727 00000901 48BF-                       mov   rdi, msgErrorLectura
   727 00000903 [7904000000000000] 
   728                                      mPuts
     4 0000090B 4883EC08            <1>  sub rsp,8
     5 0000090F E8(00000000)        <1>  call puts
     6 00000914 4883C408            <1>  add rsp,8
   729 00000918 E996F7FFFF                  jmp   continuar_jugando
   730                                  
   731                                  errorEscritura:
   732 0000091D 48BF-                       mov   rdi, msgErrorEscritura
   732 0000091F [EA04000000000000] 
   733                                      mPuts
     4 00000927 4883EC08            <1>  sub rsp,8
     5 0000092B E8(00000000)        <1>  call puts
     6 00000930 4883C408            <1>  add rsp,8
   734 00000934 E9FC000000                  jmp   fin_juego
   735                                  
   736                                  guardar_partida:
   737 00000939 48BF-                       mov     rdi, archivoTablero
   737 0000093B [2D04000000000000] 
   738 00000943 E84B010000                  call    abrirEscrituraArchivoTablero
   739                                      
   740 00000948 48BF-                       mov     rdi, msgGuardarPartida
   740 0000094A [4A05000000000000] 
   741                                      mPuts
     4 00000952 4883EC08            <1>  sub rsp,8
     5 00000956 E8(00000000)        <1>  call puts
     6 0000095B 4883C408            <1>  add rsp,8
   742 0000095F 48BF-                       mov     rdi, respuestaPartidaGuardada
   742 00000961 [F701000000000000] 
   743                                      mGets
    10 00000969 4883EC08            <1>  sub rsp,8
    11 0000096D E8(00000000)        <1>  call gets
    12 00000972 4883C408            <1>  add rsp,8
   744 00000976 B902000000                  mov     rcx, 2
   745 0000097B 488D3425[89050000]          lea     rsi, [respuestaSi]
   746 00000983 488D3C25[F7010000]          lea     rdi, [respuestaPartidaGuardada]
   747 0000098B F3A6                        repe    cmpsb
   748 0000098D 0F8589000000                jne     noGuardarPartida
   749                                  
   750 00000993 E861020000                  call    convertirTableroAStr
   751 00000998 E85F010000                  call    escribirArchivoTablero
   752 0000099D 4883F800                    cmp     rax, 0
   753 000009A1 0F8E76FFFFFF                jle     errorEscritura
   754 000009A7 E880010000                  call    cerrarArchivoTablero
   755                                  
   756 000009AC 48BF-                       mov     rdi, archivoEstadisticas
   756 000009AE [3D04000000000000] 
   757 000009B6 E8F0000000                  call    abrirEscrituraArchivoEstadisticas
   758 000009BB E88B030000                  call    convertirEstadisticasAStr
   759 000009C0 E84F010000                  call    escribirArchivoEstadisticas
   760 000009C5 4883F800                    cmp     rax, 0
   761 000009C9 0F8E4EFFFFFF                jle     errorEscritura
   762 000009CF E866010000                  call    cerrarArchivoEstadisticas
   763 000009D4 EB5F                        jmp     fin_juego
   764                                  ganador_zorro:
   765                                      ; Imprimir el mensaje del ganador y finalizar el juego
   766 000009D6 48BF-                       mov rdi, mensaje_ganador
   766 000009D8 [F202000000000000] 
   767 000009E0 48BE-                       mov rsi, nombre_jugador1
   767 000009E2 [7D01000000000000] 
   768                                      mPrintF
    16 000009EA 4883EC08            <1>  sub rsp,8
    17 000009EE E8(00000000)        <1>  call printf
    18 000009F3 4883C408            <1>  add rsp,8
   769 000009F7 EB3C                        jmp fin_juego
   770                                  
   771                                  ganador_ocas:
   772                                      ; Imprimir el mensaje del ganador (ocas) y finalizar el juego
   773 000009F9 48BF-                       mov rdi, mensaje_ganador
   773 000009FB [F202000000000000] 
   774 00000A03 48BE-                       mov rsi, nombre_jugador2
   774 00000A05 [AF01000000000000] 
   775                                      mPrintF
    16 00000A0D 4883EC08            <1>  sub rsp,8
    17 00000A11 E8(00000000)        <1>  call printf
    18 00000A16 4883C408            <1>  add rsp,8
   776 00000A1A EB19                        jmp fin_juego
   777                                  
   778                                  noGuardarPartida:
   779 00000A1C E80B010000                  call    cerrarArchivoTablero
   780                                      ;Hago esto para que el contenido del archivo se elimine por completo
   781 00000A21 48BF-                       mov     rdi, archivoEstadisticas
   781 00000A23 [3D04000000000000] 
   782 00000A2B E87B000000                  call    abrirEscrituraArchivoEstadisticas
   783 00000A30 E805010000                  call    cerrarArchivoEstadisticas
   784                                  fin_juego:
   785 00000A35 4883EC08                    sub     rsp, 8
   786 00000A39 E865040000                  call    mostrar_estadisticas
   787 00000A3E 4883C408                    add     rsp, 8
   788 00000A42 48BF-                       mov     rdi, mensaje_fin_juego  ; Imprimir el mensaje de fin del juego
   788 00000A44 [0503000000000000] 
   789                                      mPuts
     4 00000A4C 4883EC08            <1>  sub rsp,8
     5 00000A50 E8(00000000)        <1>  call puts
     6 00000A55 4883C408            <1>  add rsp,8
   790 00000A59 B83C000000                  mov     eax, 60                 ; syscall: exit
   791 00000A5E 31FF                        xor     edi, edi                ; status: 0
   792 00000A60 0F05                        syscall
   793 00000A62 C3                      ret
   794                                  
   795                                  
   796                                  
   797                                  ;---------  RUTINAS INTERNAS -----------
   798                                  abrirLecturaArchivoTablero:
   799                                    
   800 00000A63 48BE-                       mov   rsi, modoAperturaRead
   800 00000A65 [3904000000000000] 
   801 00000A6D E8(00000000)                call  fopen
   802                                  
   803 00000A72 48890425[E3010000]          mov   qword[handleArchTablero],rax
   804 00000A7A C3                      ret
   805                                  
   806                                  abrirLecturaArchivoEstadisticas:
   807                                    
   808 00000A7B 48BE-                       mov   rsi, modoAperturaRead
   808 00000A7D [3904000000000000] 
   809 00000A85 E8(00000000)                call  fopen
   810                                  
   811 00000A8A 48890425[EB010000]          mov   qword[handleArchEstadisticas],rax
   812 00000A92 C3                      ret
   813                                  
   814                                  abrirEscrituraArchivoTablero:
   815                                    
   816 00000A93 48BE-                       mov   rsi, modoAperturaWrite
   816 00000A95 [3B04000000000000] 
   817 00000A9D E8(00000000)                call  fopen
   818                                  
   819 00000AA2 48890425[E3010000]          mov   qword[handleArchTablero],rax
   820 00000AAA C3                      ret
   821                                  
   822                                  
   823                                  abrirEscrituraArchivoEstadisticas:
   824                                    
   825 00000AAB 48BE-                       mov   rsi, modoAperturaWrite
   825 00000AAD [3B04000000000000] 
   826 00000AB5 E8(00000000)                call  fopen
   827                                  
   828 00000ABA 48890425[EB010000]          mov   qword[handleArchEstadisticas],rax
   829 00000AC2 C3                      ret
   830                                  
   831                                  leerArchivoTablero:
   832                                  
   833 00000AC3 48BF-                       mov   rdi, registro
   833 00000AC5 [8C05000000000000] 
   834 00000ACD BE33000000                  mov   rsi, 51
   835 00000AD2 488B1425[E3010000]          mov   rdx, [handleArchTablero]
   836 00000ADA E8(00000000)                call  fgets
   837                                  
   838 00000ADF C3                      ret
   839                                  
   840                                  leerArchivoEstadisticas:
   841 00000AE0 48BF-                       mov     rdi, estadisticas
   841 00000AE2 [F205000000000000] 
   842 00000AEA BE0B000000                  mov     rsi, 11
   843 00000AEF 488B1425[EB010000]          mov     rdx, [handleArchEstadisticas]
   844 00000AF7 E8(00000000)                call    fgets
   845                                  
   846                                  escribirArchivoTablero:
   847                                  
   848 00000AFC 48BF-                       mov   rdi, tableroStr
   848 00000AFE [BF05000000000000] 
   849 00000B06 488B3425[E3010000]          mov   rsi, [handleArchTablero]
   850 00000B0E E8(00000000)                call  fputs
   851 00000B13 C3                      ret
   852                                  
   853                                  escribirArchivoEstadisticas:
   854 00000B14 48BF-                       mov   rdi, estadisticas
   854 00000B16 [F205000000000000] 
   855 00000B1E 488B3425[EB010000]          mov   rsi, [handleArchEstadisticas]
   856 00000B26 E8(00000000)                call  fputs
   857 00000B2B C3                      ret
   858                                  
   859                                  cerrarArchivoTablero:
   860                                  
   861 00000B2C 488B3C25[E3010000]          mov   rdi, [handleArchTablero]
   862 00000B34 E8(00000000)                call  fclose
   863 00000B39 C3                      ret
   864                                  
   865                                  cerrarArchivoEstadisticas:
   866                                  
   867 00000B3A 488B3C25[EB010000]          mov   rdi, [handleArchEstadisticas]
   868 00000B42 E8(00000000)                call  fclose
   869 00000B47 C3                      ret
   870                                  
   871                                  ;---------------------------------
   872                                  copiarRegistroATablero:
   873                                  
   874 00000B48 C60425[F4010000]00          mov   byte[posicionVect], 0
   875 00000B50 C60425[F5010000]01          mov   byte[posicionMatFil], 1
   876 00000B58 C60425[F6010000]01          mov   byte[posicionMatCol], 1
   877                                  
   878                                  recorroReg:
   879                                  
   880 00000B60 803C25[F4010000]31          cmp   byte[posicionVect], 49
   881 00000B68 0F8D8A000000                jge    finalizoCopia
   882                                  
   883 00000B6E 8A0425[F4010000]            mov   al, byte[posicionVect]
   884 00000B75 6698                        cbw
   885 00000B77 98                          cwde
   886 00000B78 4898                        cdqe
   887 00000B7A 8A88[8C050000]              mov   cl,[registro+rax]
   888 00000B80 80E930                      sub   cl, '0'
   889 00000B83 880C25[F3010000]            mov   [numero], cl
   890                                  
   891                                      ; Agrego el nro a la matriz
   892                                      
   893 00000B8A 8A0425[F5010000]            mov   al, byte[posicionMatFil] 
   894 00000B91 6698                        cbw
   895 00000B93 98                          cwde
   896 00000B94 4898                        cdqe
   897 00000B96 48FFC8                      dec   rax
   898 00000B99 486BC007                    imul  rax, CANT_FIL_COL
   899                                  
   900 00000B9D 4889C1                      mov   rcx, rax
   901                                  
   902 00000BA0 8A0425[F6010000]            mov   al, byte[posicionMatCol]
   903 00000BA7 6698                        cbw
   904 00000BA9 98                          cwde
   905 00000BAA 4898                        cdqe
   906 00000BAC 48FFC8                      dec   rax
   907                                      
   908 00000BAF 4801C1                      add   rcx, rax      ; Desplazamiento en matriz
   909                                  
   910 00000BB2 8A0425[F3010000]            mov   al, byte[numero]
   911 00000BB9 8881[00000000]              mov   [tablero+rcx], al
   912                                  
   913                                  avanzarColumna:
   914 00000BBF FE0425[F6010000]            inc   byte[posicionMatCol]
   915 00000BC6 803C25[F6010000]07          cmp   byte[posicionMatCol], CANT_FIL_COL
   916 00000BCE 7F02                        jg    avanzarFila
   917 00000BD0 EB19                        jmp   sigoEnVector
   918                                  
   919                                  avanzarFila:
   920 00000BD2 C60425[F6010000]01          mov   byte[posicionMatCol], 1
   921 00000BDA FE0425[F5010000]            inc   byte[posicionMatFil]
   922 00000BE1 803C25[F5010000]07          cmp   byte[posicionMatFil], CANT_FIL_COL
   923 00000BE9 7F0D                        jg    finalizoCopia
   924                                  
   925                                  sigoEnVector:
   926 00000BEB 800425[F4010000]01          add   byte[posicionVect], 1
   927 00000BF3 E968FFFFFF                  jmp   recorroReg
   928                                  
   929                                  finalizoCopia:
   930 00000BF8 C3                      ret
   931                                  
   932                                  
   933                                  
   934                                  convertirTableroAStr:
   935 00000BF9 C60425[F5010000]01          mov   byte[posicionMatFil], 1
   936 00000C01 C60425[F6010000]01          mov   byte[posicionMatCol], 1
   937                                  
   938                                  continuoCopiaStr:
   939 00000C09 8A0425[F5010000]            mov   al, byte[posicionMatFil] 
   940 00000C10 6698                        cbw
   941 00000C12 98                          cwde
   942 00000C13 4898                        cdqe
   943 00000C15 48FFC8                      dec   rax
   944 00000C18 486BC007                    imul  rax, CANT_FIL_COL
   945                                  
   946 00000C1C 4889C1                      mov   rcx, rax
   947                                  
   948 00000C1F 8A0425[F6010000]            mov   al, byte[posicionMatCol]
   949 00000C26 6698                        cbw
   950 00000C28 98                          cwde
   951 00000C29 4898                        cdqe
   952 00000C2B 48FFC8                      dec   rax
   953                                      
   954 00000C2E 4801C1                      add   rcx, rax      ; Desplazamiento en matriz
   955 00000C31 4883F930                    cmp   rcx, DESPLAZ_LIMITE
   956 00000C35 7F42                        jg    finalizoCopiaStr
   957                                  
   958 00000C37 8A81[00000000]              mov   al, [tablero+rcx]
   959 00000C3D 0430                        add   al, 48
   960 00000C3F 6698                        cbw
   961 00000C41 98                          cwde
   962 00000C42 4898                        cdqe
   963 00000C44 488981[BF050000]            mov   [tableroStr+rcx], rax
   964                                  
   965                                  avanzarColumnaStr:
   966 00000C4B FE0425[F6010000]            inc   byte[posicionMatCol]
   967 00000C52 803C25[F6010000]07          cmp   byte[posicionMatCol], CANT_FIL_COL
   968 00000C5A 7F02                        jg    avanzarFilaStr
   969 00000C5C EBAB                        jmp   continuoCopiaStr
   970                                  
   971                                  avanzarFilaStr:
   972 00000C5E C60425[F6010000]01          mov   byte[posicionMatCol], 1
   973 00000C66 FE0425[F5010000]            inc   byte[posicionMatFil]
   974 00000C6D 803C25[F5010000]07          cmp   byte[posicionMatFil], CANT_FIL_COL
   975 00000C75 7F02                        jg    finalizoCopiaStr
   976 00000C77 EB90                        jmp   continuoCopiaStr
   977                                      
   978                                  finalizoCopiaStr:
   979 00000C79 C60425[F0050000]0A          mov   byte[tableroStr+49], 10 ;Agrego un salto de l√≠nea al final del archivo
   980 00000C81 C3                      ret
   981                                  
   982                                  
   983                                  
   984                                  cargarEstadisticas:
   985 00000C82 488B0C25[F2050000]          mov     rcx, [turnoGuardado]
   986 00000C8A 4883E930                    sub     rcx, 48
   987 00000C8E 48890C25[E1010000]          mov     [turno], rcx
   988                                  
   989 00000C96 488B0C25[F3050000]          mov     rcx, [cantOcasEliminadas]
   990 00000C9E 4883E930                    sub     rcx, 48
   991 00000CA2 48890C25[38030000]          mov     [cantidad_ocas_eliminadas], rcx
   992                                  
   993 00000CAA 488B0C25[F4050000]          mov     rcx, [estats_mov_abajo_guardado]
   994 00000CB2 4883E930                    sub     rcx, 48
   995 00000CB6 48890C25[FC050000]          mov     [estats_mov_abajo], rcx
   996                                  
   997 00000CBE 488B0C25[F9050000]          mov     rcx, [estats_mov_abajo_izq_guardado]
   998 00000CC6 4883E930                    sub     rcx, 48
   999 00000CCA 48890C25[24060000]          mov     [estats_mov_abajo_izq], rcx
  1000                                  
  1001 00000CD2 488B0C25[F8050000]          mov     rcx, [estats_mov_abajo_der_guardado]
  1002 00000CDA 4883E930                    sub     rcx, 48
  1003 00000CDE 48890C25[1C060000]          mov     [estats_mov_abajo_der], rcx
  1004                                  
  1005 00000CE6 488B0C25[F5050000]          mov     rcx, [estats_mov_arriba_guardado]
  1006 00000CEE 4883E930                    sub     rcx, 48
  1007 00000CF2 48890C25[04060000]          mov     [estats_mov_arriba], rcx
  1008                                  
  1009 00000CFA 488B0C25[FB050000]          mov     rcx, [estats_mov_arriba_izq_guardado]
  1010 00000D02 4883E930                    sub     rcx, 48
  1011 00000D06 48890C25[34060000]          mov     [estats_mov_arriba_izq], rcx
  1012                                  
  1013 00000D0E 488B0C25[FA050000]          mov     rcx, [estats_mov_arriba_der_guardado]
  1014 00000D16 4883E930                    sub     rcx, 48
  1015 00000D1A 48890C25[2C060000]          mov     [estats_mov_arriba_der], rcx
  1016                                  
  1017 00000D22 488B0C25[F7050000]          mov     rcx, [estats_mov_der_guardado]
  1018 00000D2A 4883E930                    sub     rcx, 48
  1019 00000D2E 48890C25[14060000]          mov     [estats_mov_der], rcx
  1020                                  
  1021 00000D36 488B0C25[F6050000]          mov     rcx, [estats_mov_izq_guardado]
  1022 00000D3E 4883E930                    sub     rcx, 48
  1023 00000D42 48890C25[0C060000]          mov     [estats_mov_izq], rcx
  1024 00000D4A C3                      ret
  1025                                  
  1026                                  convertirEstadisticasAStr:
  1027 00000D4B 488B0C25[E1010000]          mov     rcx, [turno]
  1028 00000D53 4883C130                    add     rcx, 48
  1029 00000D57 48890C25[F2050000]          mov     [turnoGuardado], rcx
  1030                                  
  1031 00000D5F 488B0C25[38030000]          mov     rcx, [cantidad_ocas_eliminadas]
  1032 00000D67 4883C130                    add     rcx, 48
  1033 00000D6B 48890C25[F3050000]          mov     [cantOcasEliminadas], rcx
  1034                                  
  1035 00000D73 488B0C25[FC050000]          mov     rcx, [estats_mov_abajo]
  1036 00000D7B 4883C130                    add     rcx, 48
  1037 00000D7F 48890C25[F4050000]          mov     [estats_mov_abajo_guardado], rcx
  1038                                  
  1039 00000D87 488B0C25[24060000]          mov     rcx, [estats_mov_abajo_izq]
  1040 00000D8F 4883C130                    add     rcx, 48
  1041 00000D93 48890C25[F9050000]          mov     [estats_mov_abajo_izq_guardado], rcx
  1042                                  
  1043 00000D9B 488B0C25[1C060000]          mov     rcx, [estats_mov_abajo_der]
  1044 00000DA3 4883C130                    add     rcx, 48
  1045 00000DA7 48890C25[F8050000]          mov     [estats_mov_abajo_der_guardado], rcx
  1046                                  
  1047 00000DAF 488B0C25[04060000]          mov     rcx, [estats_mov_arriba]
  1048 00000DB7 4883C130                    add     rcx, 48
  1049 00000DBB 48890C25[F5050000]          mov     [estats_mov_arriba_guardado], rcx
  1050                                  
  1051 00000DC3 488B0C25[34060000]          mov     rcx, [estats_mov_arriba_izq]
  1052 00000DCB 4883C130                    add     rcx, 48
  1053 00000DCF 48890C25[FB050000]          mov     [estats_mov_arriba_izq_guardado], rcx
  1054                                  
  1055 00000DD7 488B0C25[2C060000]          mov     rcx, [estats_mov_arriba_der]
  1056 00000DDF 4883C130                    add     rcx, 48
  1057 00000DE3 48890C25[FA050000]          mov     [estats_mov_arriba_der_guardado], rcx
  1058                                  
  1059 00000DEB 488B0C25[14060000]          mov     rcx, [estats_mov_der]
  1060 00000DF3 4883C130                    add     rcx, 48
  1061 00000DF7 48890C25[F7050000]          mov     [estats_mov_der_guardado], rcx
  1062                                  
  1063 00000DFF 488B0C25[0C060000]          mov     rcx, [estats_mov_izq]
  1064 00000E07 4883C130                    add     rcx, 48
  1065 00000E0B 48890C25[F6050000]          mov     [estats_mov_izq_guardado], rcx
  1066                                  
  1067 00000E13 C60425[FC050000]0A          mov     byte[estadisticas+10], 10
  1068                                  
  1069 00000E1B C3                      ret
  1070                                  sumarEstadisticaMovimiento:
  1071 00000E1C 4829FF                      sub rdi, rdi
  1072 00000E1F 48BF-                       mov rdi, input_zorro
  1072 00000E21 [7301000000000000] 
  1073 00000E29 488B07                      mov rax, [rdi]
  1074                                  
  1075                                  movimiento_arriba:
  1076 00000E2C 4883F877                    cmp rax, 'w'
  1077 00000E30 750B                        jne movimiento_abajo
  1078 00000E32 48830425[04060000]-         add qword[estats_mov_arriba], 1
  1078 00000E3A 01                 
  1079 00000E3B EB65                        jmp fin_estadisticas_mov
  1080                                  
  1081                                  movimiento_abajo:
  1082 00000E3D 3C73                        cmp al, 's'
  1083 00000E3F 750B                        jne movimiento_izq
  1084 00000E41 48830425[FC050000]-         add qword[estats_mov_abajo], 1
  1084 00000E49 01                 
  1085 00000E4A EB56                        jmp fin_estadisticas_mov
  1086                                  
  1087                                  movimiento_izq:
  1088 00000E4C 3C61                        cmp al, 'a'
  1089 00000E4E 750B                        jne movimiento_derecha
  1090 00000E50 48830425[0C060000]-         add qword[estats_mov_izq], 1
  1090 00000E58 01                 
  1091 00000E59 EB47                        jmp fin_estadisticas_mov
  1092                                  
  1093                                  movimiento_derecha:
  1094 00000E5B 3C64                        cmp al, 'd'
  1095 00000E5D 750B                        jne movimiento_arriba_der
  1096 00000E5F 48830425[14060000]-         add qword[estats_mov_der], 1
  1096 00000E67 01                 
  1097 00000E68 EB38                        jmp fin_estadisticas_mov
  1098                                  
  1099                                  movimiento_arriba_der:
  1100 00000E6A 3C65                        cmp al, 'e'
  1101 00000E6C 750B                        jne movimiento_arriba_izq
  1102 00000E6E 48830425[2C060000]-         add qword[estats_mov_arriba_der], 1
  1102 00000E76 01                 
  1103 00000E77 EB29                        jmp fin_estadisticas_mov
  1104                                  
  1105                                  movimiento_arriba_izq:
  1106 00000E79 3C71                        cmp al, 'q'
  1107 00000E7B 750B                        jne movimiento_abajo_izq
  1108 00000E7D 48830425[34060000]-         add qword[estats_mov_arriba_izq], 1
  1108 00000E85 01                 
  1109 00000E86 EB1A                        jmp fin_estadisticas_mov
  1110                                  
  1111                                  movimiento_abajo_izq:
  1112 00000E88 3C7A                        cmp al, 'z'
  1113 00000E8A 750B                        jne movimiento_abajo_der
  1114 00000E8C 48830425[24060000]-         add qword[estats_mov_abajo_izq], 1
  1114 00000E94 01                 
  1115 00000E95 EB0B                        jmp fin_estadisticas_mov
  1116                                  
  1117                                  movimiento_abajo_der:
  1118 00000E97 3C78                        cmp al, 'x'
  1119 00000E99 48830425[1C060000]-         add qword[estats_mov_abajo_der], 1
  1119 00000EA1 01                 
  1120                                  
  1121                                  fin_estadisticas_mov:
  1122 00000EA2 C3                      ret
  1123                                  
  1124                                  mostrar_estadisticas:
  1125                                  
  1126 00000EA3 48BF-                       mov rdi, msg_mov_abajo
  1126 00000EA5 [4003000000000000] 
  1127 00000EAD 4829F6                      sub rsi, rsi
  1128 00000EB0 488B3425[FC050000]          mov rsi, [estats_mov_abajo]
  1129                                      mPrintF
    16 00000EB8 4883EC08            <1>  sub rsp,8
    17 00000EBC E8(00000000)        <1>  call printf
    18 00000EC1 4883C408            <1>  add rsp,8
  1130 00000EC5 48BF-                       mov rdi, salto_linea
  1130 00000EC7 [3100000000000000] 
  1131                                      mPuts
     4 00000ECF 4883EC08            <1>  sub rsp,8
     5 00000ED3 E8(00000000)        <1>  call puts
     6 00000ED8 4883C408            <1>  add rsp,8
  1132                                      
  1133                                  
  1134 00000EDC 48BF-                       mov rdi, msg_mov_abajo_der
  1134 00000EDE [A303000000000000] 
  1135 00000EE6 4829F6                      sub rsi, rsi
  1136 00000EE9 488B3425[1C060000]          mov rsi, [estats_mov_abajo_der]
  1137                                      mPrintF
    16 00000EF1 4883EC08            <1>  sub rsp,8
    17 00000EF5 E8(00000000)        <1>  call printf
    18 00000EFA 4883C408            <1>  add rsp,8
  1138 00000EFE 48BF-                       mov rdi, salto_linea
  1138 00000F00 [3100000000000000] 
  1139                                      mPuts
     4 00000F08 4883EC08            <1>  sub rsp,8
     5 00000F0C E8(00000000)        <1>  call puts
     6 00000F11 4883C408            <1>  add rsp,8
  1140                                      
  1141                                  
  1142 00000F15 48BF-                       mov rdi, msg_mov_abajo_izq
  1142 00000F17 [C403000000000000] 
  1143 00000F1F 4829F6                      sub rsi, rsi
  1144 00000F22 488B3425[24060000]          mov rsi, [estats_mov_abajo_izq]
  1145                                      mPrintF
    16 00000F2A 4883EC08            <1>  sub rsp,8
    17 00000F2E E8(00000000)        <1>  call printf
    18 00000F33 4883C408            <1>  add rsp,8
  1146 00000F37 48BF-                       mov rdi, salto_linea
  1146 00000F39 [3100000000000000] 
  1147                                      mPuts
     4 00000F41 4883EC08            <1>  sub rsp,8
     5 00000F45 E8(00000000)        <1>  call puts
     6 00000F4A 4883C408            <1>  add rsp,8
  1148                                      
  1149                                  
  1150 00000F4E 48BF-                       mov rdi, msg_mov_arriba
  1150 00000F50 [5703000000000000] 
  1151 00000F58 4829F6                      sub rsi, rsi
  1152 00000F5B 488B3425[04060000]          mov rsi, [estats_mov_arriba]
  1153                                      mPrintF
    16 00000F63 4883EC08            <1>  sub rsp,8
    17 00000F67 E8(00000000)        <1>  call printf
    18 00000F6C 4883C408            <1>  add rsp,8
  1154 00000F70 48BF-                       mov rdi, salto_linea
  1154 00000F72 [3100000000000000] 
  1155                                      mPuts
     4 00000F7A 4883EC08            <1>  sub rsp,8
     5 00000F7E E8(00000000)        <1>  call puts
     6 00000F83 4883C408            <1>  add rsp,8
  1156                                      
  1157                                  
  1158 00000F87 48BF-                       mov rdi, msg_mov_arriba_izq
  1158 00000F89 [0904000000000000] 
  1159 00000F91 4829F6                      sub rsi, rsi
  1160 00000F94 488B3425[34060000]          mov rsi, [estats_mov_arriba_izq]
  1161                                      mPrintF
    16 00000F9C 4883EC08            <1>  sub rsp,8
    17 00000FA0 E8(00000000)        <1>  call printf
    18 00000FA5 4883C408            <1>  add rsp,8
  1162 00000FA9 48BF-                       mov rdi, salto_linea
  1162 00000FAB [3100000000000000] 
  1163                                      mPuts
     4 00000FB3 4883EC08            <1>  sub rsp,8
     5 00000FB7 E8(00000000)        <1>  call puts
     6 00000FBC 4883C408            <1>  add rsp,8
  1164                                      
  1165                                  
  1166 00000FC0 48BF-                       mov rdi, msg_mov_arriba_der
  1166 00000FC2 [E703000000000000] 
  1167 00000FCA 4829F6                      sub rsi, rsi
  1168 00000FCD 488B3425[2C060000]          mov rsi, [estats_mov_arriba_der]
  1169                                      mPrintF
    16 00000FD5 4883EC08            <1>  sub rsp,8
    17 00000FD9 E8(00000000)        <1>  call printf
    18 00000FDE 4883C408            <1>  add rsp,8
  1170 00000FE2 48BF-                       mov rdi, salto_linea
  1170 00000FE4 [3100000000000000] 
  1171                                      mPuts
     4 00000FEC 4883EC08            <1>  sub rsp,8
     5 00000FF0 E8(00000000)        <1>  call puts
     6 00000FF5 4883C408            <1>  add rsp,8
  1172                                      
  1173                                  
  1174 00000FF9 48BF-                       mov rdi, msg_mov_derecha
  1174 00000FFB [8A03000000000000] 
  1175 00001003 4829F6                      sub rsi, rsi
  1176 00001006 488B3425[14060000]          mov rsi, [estats_mov_der]
  1177                                      mPrintF
    16 0000100E 4883EC08            <1>  sub rsp,8
    17 00001012 E8(00000000)        <1>  call printf
    18 00001017 4883C408            <1>  add rsp,8
  1178 0000101B 48BF-                       mov rdi, salto_linea
  1178 0000101D [3100000000000000] 
  1179                                      mPuts
     4 00001025 4883EC08            <1>  sub rsp,8
     5 00001029 E8(00000000)        <1>  call puts
     6 0000102E 4883C408            <1>  add rsp,8
  1180                                      
  1181                                  
  1182 00001032 48BF-                       mov rdi, msg_mov_izquierda
  1182 00001034 [6F03000000000000] 
  1183 0000103C 4829F6                      sub rsi, rsi
  1184 0000103F 488B3425[0C060000]          mov rsi, [estats_mov_izq]
  1185                                      mPrintF
    16 00001047 4883EC08            <1>  sub rsp,8
    17 0000104B E8(00000000)        <1>  call printf
    18 00001050 4883C408            <1>  add rsp,8
  1186 00001054 48BF-                       mov rdi, salto_linea
  1186 00001056 [3100000000000000] 
  1187                                      mPuts
     4 0000105E 4883EC08            <1>  sub rsp,8
     5 00001062 E8(00000000)        <1>  call puts
     6 00001067 4883C408            <1>  add rsp,8
  1188                                      
  1189 0000106B C3                      ret
