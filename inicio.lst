     1                                  global main
     2                                  
     3                                  %macro mPuts 0
     4                                      sub     rsp,8
     5                                      call    puts
     6                                      add     rsp,8
     7                                  %endmacro
     8                                  
     9                                  %macro mGets 0
    10                                      sub     rsp,8
    11                                      call    gets
    12                                      add     rsp,8
    13                                  %endmacro
    14                                  
    15                                  %macro mPrintF 0
    16                                      sub     rsp,8
    17                                      call    printf
    18                                      add     rsp,8
    19                                  %endmacro
    20                                  
    21                                  extern puts
    22                                  extern gets
    23                                  extern sscanf
    24                                  extern fopen
    25                                  extern fgets
    26                                  extern printf
    27                                  extern fputs
    28                                  extern fclose
    29                                  
    30                                  
    31                                  section .data
    32 00000000 00000101010000              tablero     db  0, 0, 1, 1, 1, 0, 0
    33 00000007 00000101010000                          db  0, 0, 1, 1, 1, 0, 0
    34 0000000E 01010101010101                          db  1, 1, 1, 1, 1, 1, 1
    35 00000015 01020202020201                          db  1, 2, 2, 2, 2, 2, 1
    36 0000001C 01020203020201                          db  1, 2, 2, 3, 2, 2, 1
    37 00000023 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    38 0000002A 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    39                                  
    40 00000031 0A00                        salto_linea                 db 10, 0        
    41 00000033 2E00                        simbolo_fuera_tablero       db ".", 0
    42 00000035 4F00                        simbolo_oca                 db 'O', 0    ; symbolo por default para ocas
    43 00000037 5800                        simbolo_zorro               db 'X', 0    ; symbolo por default para el zorro
    44 00000039 2000                        simbolo_espacio_vacio       db ' ', 0
    45 0000003B 7C00                        simbolo_separador           db '|', 0
    46 0000003D 496E6772657365206C-         mensaje_mover_oca           db "Ingrese la fila y columna de la oca a mover (ejemplo: 3 3). Presione f para salir de la partida: ", 0
    46 00000046 612066696C61207920-
    46 0000004F 636F6C756D6E612064-
    46 00000058 65206C61206F636120-
    46 00000061 61206D6F7665722028-
    46 0000006A 656A656D706C6F3A20-
    46 00000073 332033292E20507265-
    46 0000007C 73696F6E6520662070-
    46 00000085 6172612073616C6972-
    46 0000008E 206465206C61207061-
    46 00000097 72746964613A2000   
    47 0000009F 4D75657661206C6120-         mensaje_mover_oca_direccion db "Mueva la oca con a: izquierda /s: abajo /d: derecha. Presione f para salir de la partida: ", 0
    47 000000A8 6F636120636F6E2061-
    47 000000B1 3A20697A7175696572-
    47 000000BA 6461202F733A206162-
    47 000000C3 616A6F202F643A2064-
    47 000000CC 6572656368612E2050-
    47 000000D5 726573696F6E652066-
    47 000000DE 20706172612073616C-
    47 000000E7 6972206465206C6120-
    47 000000F0 706172746964613A20-
    47 000000F9 00                 
    48 000000FA 256868752025686875-         formatInputFilCol           db "%hhu %hhu", 0                               ; Formato para leer enteros de 1 byte
    48 00000103 00                 
    49 00000104 4C6F73206461746F73-         mensaje_error_input         db "Los datos ingresados son inv√°lidos. Intente nuevamente.", 0
    49 0000010D 20696E677265736164-
    49 00000116 6F7320736F6E20696E-
    49 0000011F 76C3A16C69646F732E-
    49 00000128 20496E74656E746520-
    49 00000131 6E756576616D656E74-
    49 0000013A 652E00             
    50 0000013D 4D7565766120656C20-         mensaje_mover_zorro         db "Mueva el zorro con w: arriba /a: izquierda /s: abajo /d: derecha /e: arriba-derecha /q: arriba-izquierda /z: abajo-izquierda /x: abajo-derecha. Presione f para salir de la partida: ", 0
    50 00000146 7A6F72726F20636F6E-
    50 0000014F 20773A206172726962-
    50 00000158 61202F613A20697A71-
    50 00000161 756965726461202F73-
    50 0000016A 3A206162616A6F202F-
    50 00000173 643A20646572656368-
    50 0000017C 61202F653A20617272-
    50 00000185 6962612D6465726563-
    50 0000018E 6861202F713A206172-
    50 00000197 726962612D697A7175-
    50 000001A0 6965726461202F7A3A-
    50 000001A9 206162616A6F2D697A-
    50 000001B2 71756965726461202F-
    50 000001BB 783A206162616A6F2D-
    50 000001C4 646572656368612E20-
    50 000001CD 50726573696F6E6520-
    50 000001D6 662070617261207361-
    50 000001DF 6C6972206465206C61-
    50 000001E8 20706172746964613A-
    50 000001F1 2000               
    51 000001F3 4D6F76696D69656E74-         mensaje_mov_invalido        db "Movimiento invalido, intente nuevamente", 0
    51 000001FC 6F20696E76616C6964-
    51 00000205 6F2C20696E74656E74-
    51 0000020E 65206E756576616D65-
    51 00000217 6E746500           
    52 0000021B 496E67726573652065-         mensaje_ingresar_j1         db "Ingrese el nombre del jugador 1 (zorro): ", 0
    52 00000224 6C206E6F6D62726520-
    52 0000022D 64656C206A75676164-
    52 00000236 6F72203120287A6F72-
    52 0000023F 726F293A2000       
    53 00000245 496E67726573652065-         mensaje_ingresar_j2         db "Ingrese el nombre del jugador 2 (ocas): ", 0
    53 0000024E 6C206E6F6D62726520-
    53 00000257 64656C206A75676164-
    53 00000260 6F72203220286F6361-
    53 00000269 73293A2000         
    54 0000026E 496E67726573652065-         mensaje_ingresar_simbolo_zorro db "Ingrese el simbolo para el zorro (presione Enter para usar 'X'): ", 0
    54 00000277 6C2073696D626F6C6F-
    54 00000280 207061726120656C20-
    54 00000289 7A6F72726F20287072-
    54 00000292 6573696F6E6520456E-
    54 0000029B 746572207061726120-
    54 000002A4 757361722027582729-
    54 000002AD 3A2000             
    55 000002B0 496E67726573652065-         mensaje_ingresar_simbolo_oca db "Ingrese el simbolo para las ocas (presione Enter para usar 'O'): ", 0
    55 000002B9 6C2073696D626F6C6F-
    55 000002C2 2070617261206C6173-
    55 000002CB 206F63617320287072-
    55 000002D4 6573696F6E6520456E-
    55 000002DD 746572207061726120-
    55 000002E6 7573617220274F2729-
    55 000002EF 3A2000             
    56 000002F2 456C2067616E61646F-         mensaje_ganador             db "El ganador es: %s ", 0
    56 000002FB 722065733A20257320-
    56 00000304 00                 
    57 00000305 456C206A7565676F20-         mensaje_fin_juego           db "El juego ha sido abandonado.", 0
    57 0000030E 6861207369646F2061-
    57 00000317 62616E646F6E61646F-
    57 00000320 2E00               
    58 00000322 4F63617320656C696D-         mensaje_ocas_eliminadas     db "Ocas eliminadas: %lli",0
    58 0000032B 696E616461733A2025-
    58 00000334 6C6C6900           
    59 00000338 0000000000000000            cantidad_ocas_eliminadas    dq 0
    60                                  
    61 00000340 4D6F76696D69656E74-         msg_mov_abajo               db "Movimientos abajo: %li",0
    61 00000349 6F73206162616A6F3A-
    61 00000352 20256C6900         
    62 00000357 4D6F76696D69656E74-         msg_mov_arriba              db "Movimientos arriba: %li",0
    62 00000360 6F7320617272696261-
    62 00000369 3A20256C6900       
    63 0000036F 4D6F76696D69656E74-         msg_mov_izquierda           db "Movimientos izquierda: %li",0
    63 00000378 6F7320697A71756965-
    63 00000381 7264613A20256C6900 
    64 0000038A 4D6F76696D69656E74-         msg_mov_derecha             db "Movimientos derecha: %li",0
    64 00000393 6F7320646572656368-
    64 0000039C 613A20256C6900     
    65 000003A3 4D6F76696D69656E74-         msg_mov_abajo_der           db "Movimientos abajo y derecha: %li",0
    65 000003AC 6F73206162616A6F20-
    65 000003B5 792064657265636861-
    65 000003BE 3A20256C6900       
    66 000003C4 4D6F76696D69656E74-         msg_mov_abajo_izq           db "Movimientos abajo e izquierda: %li",0
    66 000003CD 6F73206162616A6F20-
    66 000003D6 6520697A7175696572-
    66 000003DF 64613A20256C6900   
    67 000003E7 4D6F76696D69656E74-         msg_mov_arriba_der          db "Movimientos arriba y derecha: %li",0
    67 000003F0 6F7320617272696261-
    67 000003F9 207920646572656368-
    67 00000402 613A20256C6900     
    68 00000409 4D6F76696D69656E74-         msg_mov_arriba_izq          db "Movimientos arriba e izquierda: %li",0
    68 00000412 6F7320617272696261-
    68 0000041B 206520697A71756965-
    68 00000424 7264613A20256C6900 
    69                                  
    70                                      ;Variables de archivo
    71 0000042D 7461626C65726F2E74-         archivoTablero              db      "tablero.txt",0
    71 00000436 787400             
    72 00000439 7200                        modoAperturaRead            db      "r",0   ; Abro y leo un archivo de texto
    73 0000043B 7700                        modoAperturaWrite           db      "w",0
    74 0000043D 657374616469737469-         archivoEstadisticas         db      "estadisticas.txt",0
    74 00000446 6361732E74787400   
    75                                  
    76 0000044E 4C6F2073656E74696D-         msgErrorAp                  db      "Lo sentimos, no se pudo abrir el archivo.",10,0
    76 00000457 6F732C206E6F207365-
    76 00000460 207075646F20616272-
    76 00000469 697220656C20617263-
    76 00000472 6869766F2E0A00     
    77 00000479 4E6F20736520656E63-         msgErrorLectura             db      "No se encontr√≥ una partida guardada, se iniciar√° una nueva.",10,0
    77 00000482 6F6E7472C3B320756E-
    77 0000048B 612070617274696461-
    77 00000494 206775617264616461-
    77 0000049D 2C20736520696E6963-
    77 000004A6 696172C3A120756E61-
    77 000004AF 206E756576612E0A00 
    78 000004B8 4C65C3AD646F20636F-         msgLeido                    db      "Le√≠do con √©xito.",10,0
    78 000004C1 6E20C3A97869746F2E-
    78 000004CA 0A00               
    79 000004CC 4572726F7220636F6E-         msgErrorConvirt             db      "Error convirtiendo el numero",10,0
    79 000004D5 7669727469656E646F-
    79 000004DE 20656C206E756D6572-
    79 000004E7 6F0A00             
    80 000004EA 4572726F7220657363-         msgErrorEscritura           db      "Error escribiendo el archivo",10,0
    80 000004F3 72696269656E646F20-
    80 000004FC 656C20617263686976-
    80 00000505 6F0A00             
    81 00000508 536520686120656E63-         msgPartidaGuardada          db      "Se ha encontrado una partida guardada, desea continuarla? (si/no)",0
    81 00000511 6F6E747261646F2075-
    81 0000051A 6E6120706172746964-
    81 00000523 612067756172646164-
    81 0000052C 612C20646573656120-
    81 00000535 636F6E74696E756172-
    81 0000053E 6C613F202873692F6E-
    81 00000547 6F2900             
    82 0000054A 457374C3A173207361-         msgGuardarPartida           db      "Est√°s saliendo del juego, quer√©s guardar tu partida? (si/no)",0
    82 00000553 6C69656E646F206465-
    82 0000055C 6C206A7565676F2C20-
    82 00000565 71756572C3A9732067-
    82 0000056E 756172646172207475-
    82 00000577 20706172746964613F-
    82 00000580 202873692F6E6F2900 
    83 00000589 736900                      respuestaSi                 db      "si",0
    84 0000058C 20<rep 33h>                 registro          times 51  db      " "
    85 000005BF 20<rep 33h>                 tableroStr        times 51  db      " "
    86                                      
    87 000005F2 0000000000000000            estats_mov_abajo            dq  0
    88 000005FA 0000000000000000            estats_mov_arriba           dq  0
    89 00000602 0000000000000000            estats_mov_izq              dq  0
    90 0000060A 0000000000000000            estats_mov_der              dq  0
    91 00000612 0000000000000000            estats_mov_abajo_der        dq  0
    92 0000061A 0000000000000000            estats_mov_abajo_izq        dq  0
    93 00000622 0000000000000000            estats_mov_arriba_der       dq  0
    94 0000062A 0000000000000000            estats_mov_arriba_izq       dq  0
    95                                      
    96                                      estadisticas      times 0   db      ''
    97 00000632 20                              turnoGuardado                        db     " "
    98 00000633 20                              cantOcasEliminadas                   db     " "
    99 00000634 20                              estats_mov_abajo_guardado            db     " "
   100 00000635 20                              estats_mov_arriba_guardado           db     " "
   101 00000636 20                              estats_mov_izq_guardado              db     " "
   102 00000637 20                              estats_mov_der_guardado              db     " "
   103 00000638 20                              estats_mov_abajo_der_guardado        db     " "
   104 00000639 20                              estats_mov_abajo_izq_guardado        db     " "
   105 0000063A 20                              estats_mov_arriba_der_guardado       db     " "
   106 0000063B 20                              estats_mov_arriba_izq_guardado       db     " "
   107 0000063C 0A                              salto_linea_archivo                  db     10
   108                                          
   109                                  
   110                                      CANT_FIL_COL        equ     7
   111                                      DESPLAZ_LIMITE      equ     48
   112                                      TURNO_ZORRO         equ     1
   113                                      TURNO_OCAS          equ     2
   114                                  
   115                                  
   116                                  section .bss
   117 00000000 <res 15Eh>                  buffer          resb 350  ; Suficiente espacio para el tablero con saltos de l√≠nea
   118 0000015E <res Ah>                    input_oca       resb 10
   119 00000168 ??                          fila            resb 1
   120 00000169 ??                          columna         resb 1
   121 0000016A ??                          input_valido    resb 1
   122 0000016B ????????????????            posicion_oca    resq 1
   123 00000173 <res Ah>                    input_zorro     resb 10
   124 0000017D <res 32h>                   nombre_jugador1 resb 50
   125 000001AF <res 32h>                   nombre_jugador2 resb 50
   126 000001E1 ??                          turno           resb 1
   127 000001E2 ??                          comio_oca       resb 1
   128                                  
   129                                      ;Variables de archivo
   130 000001E3 ????????????????            handleArchTablero           resq  1
   131 000001EB ????????????????            handleArchEstadisticas      resq  1
   132 000001F3 ??                          numero                      resb  1
   133 000001F4 ??                          posicionVect                resb  1
   134 000001F5 ??                          posicionMatFil              resb  1
   135 000001F6 ??                          posicionMatCol              resb  1
   136 000001F7 ????????                    respuestaPartidaGuardada    resb  4
   137                                  
   138                                  section .text
   139                                  main:
   140 00000000 C60425[E1010000]01          mov     byte[turno], TURNO_ZORRO
   141                                  
   142 00000008 48BF-                       mov     rdi, archivoTablero
   142 0000000A [2D04000000000000] 
   143 00000012 E84C0A0000                  call    abrirLecturaArchivoTablero
   144 00000017 4883F800                    cmp     rax, 0
   145 0000001B 0F8EC4080000                jle     errorApertura
   146                                          
   147 00000021 E89D0A0000                  call    leerArchivoTablero  
   148 00000026 4883F800                    cmp     rax, 0
   149 0000002A 0F8ED1080000                jle     errorLeyendoArchivo
   150                                  
   151 00000030 48BF-                       mov     rdi, msgPartidaGuardada
   151 00000032 [0805000000000000] 
   152                                      mPuts
     4 0000003A 4883EC08            <1>  sub rsp,8
     5 0000003E E8(00000000)        <1>  call puts
     6 00000043 4883C408            <1>  add rsp,8
   153 00000047 48BF-                       mov     rdi, respuestaPartidaGuardada
   153 00000049 [F701000000000000] 
   154                                      mGets
    10 00000051 4883EC08            <1>  sub rsp,8
    11 00000055 E8(00000000)        <1>  call gets
    12 0000005A 4883C408            <1>  add rsp,8
   155 0000005E B902000000                  mov     rcx, 2
   156 00000063 488D3425[89050000]          lea     rsi, [respuestaSi]
   157 0000006B 488D3C25[F7010000]          lea     rdi, [respuestaPartidaGuardada]
   158 00000073 F3A6                        repe    cmpsb
   159 00000075 753C                        jne     continuar_jugando
   160 00000077 E8CC0A0000                  call    copiarRegistroATablero
   161 0000007C E8AB0A0000                  call    cerrarArchivoTablero
   162                                  
   163 00000081 48BF-                       mov     rdi, archivoEstadisticas
   163 00000083 [3D04000000000000] 
   164 0000008B E8EB090000                  call    abrirLecturaArchivoEstadisticas
   165 00000090 4883F800                    cmp     rax, 0
   166 00000094 0F8E4B080000                jle     errorApertura
   167                                  
   168 0000009A E8410A0000                  call    leerArchivoEstadisticas
   169 0000009F 4883F800                    cmp     rax, 0
   170 000000A3 0F8E58080000                jle     errorLeyendoArchivo
   171 000000A9 E8D40B0000                  call    cargarEstadisticas
   172 000000AE E8870A0000                  call    cerrarArchivoEstadisticas
   173                                  
   174                                  continuar_jugando:
   175 000000B3 4883EC08                    sub     rsp,8
   176 000000B7 E8F5000000                  call    ingresar_nombres_y_simbolos_jugadores  ;llamo a la subrutina para ingresar nombres y simbolos
   177 000000BC 4883C408                    add     rsp,8
   178                                  
   179 000000C0 4883EC08                    sub     rsp,8
   180 000000C4 E8D8010000                  call    construir_tablero       ;llamo a la subrutina para construir el tablero inicial
   181 000000C9 4883C408                    add     rsp,8
   182                                  
   183 000000CD 4883EC08                    sub     rsp,8
   184 000000D1 E8A6020000                  call    imprimir_tablero        ;llamo a la subrutina para imprimir el tablero
   185 000000D6 4883C408                    add     rsp,8
   186                                  
   187                                  loop_juego:
   188 000000DA 8A0425[E1010000]            mov     al, [turno]     ; veo de quien es el turno
   189 000000E1 3C01                        cmp     al, 1
   190 000000E3 7404                        je turno_zorro          ; si es el turno del zorro, voy a la etiqueta turno_zorro
   191 000000E5 3C02                        cmp     al, 2
   192 000000E7 746E                        je turno_ocas           ; si es el turno de las ocas, voy a la etiqueta turno_ocas
   193                                  
   194                                  turno_zorro:
   195 000000E9 4883EC08                    sub     rsp,8
   196 000000ED E86E040000                  call    verificar_movimientos_zorro  ; Verifico si el zorro tiene movimientos disponibles
   197 000000F2 4883C408                    add     rsp,8
   198 000000F6 803C25[6A010000]4E          cmp     byte [input_valido], 'N'  ; Si no tiene movimientos v√°lidos, las ocas ganan
   199 000000FE 0F84F5080000                je      ganador_ocas
   200 00000104 4883EC08                    sub     rsp,8
   201 00000108 E8BD020000                  call    pedir_movimiento_zorro  ;llamo a la subrutina para pedir movimiento del zorro
   202 0000010D 4883C408                    add     rsp,8
   203 00000111 803C25[73010000]66          cmp     byte [input_zorro], 'f' ; Verificar si se desea abandonar la partida
   204 00000119 0F841A080000                je      guardar_partida
   205 0000011F 4883EC08                    sub     rsp,8
   206 00000123 E8D1020000                  call    mover_zorro              ;llamo a la subrutina para mover al zorro
   207 00000128 4883C408                    add     rsp,8
   208 0000012C 803C25[6A010000]52          cmp     byte [input_valido], 'R'  ;comparo si el movimiento del zorro fue inv√°lido
   209 00000134 74B3                        je      turno_zorro              ;si fue inv√°lido, vuelvo a pedir movimiento del zorro
   210 00000136 4883EC08                    sub     rsp, 8
   211 0000013A E8D50C0000                  call    sumarEstadisticaMovimiento
   212 0000013F 4883C408                    add     rsp, 8
   213 00000143 803C25[E2010000]01          cmp     byte [comio_oca], TURNO_ZORRO      ; Si comi√≥ una oca, no cambiar de turno
   214 0000014B 7444                        je      continuar_juego
   215 0000014D C60425[E1010000]02          mov     byte [turno], TURNO_OCAS          ;si fue v√°lido y no comi√≥ oca, cambio el turno a las ocas
   216 00000155 EB3A                        jmp     continuar_juego          ;voy a la etiqueta continuar_juego
   217                                  
   218                                  turno_ocas:
   219 00000157 4883EC08                    sub     rsp,8
   220 0000015B E887050000                  call    pedir_movimiento_oca     ;llamo a la subrutina para pedir movimiento de la oca
   221 00000160 4883C408                    add     rsp,8
   222 00000164 803C25[5E010000]66          cmp     byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   223 0000016C 0F84C7070000                je      guardar_partida
   224 00000172 4883EC08                    sub     rsp,8
   225 00000176 E813060000                  call    mover_oca                ;llamo a la subrutina para mover la oca
   226 0000017B 4883C408                    add     rsp,8
   227 0000017F 803C25[6A010000]52          cmp     byte [input_valido], 'R'  ;comparo si el movimiento de la oca fue inv√°lido
   228 00000187 74CE                        je      turno_ocas               ;si fue inv√°lido, vuelvo a pedir movimiento de la oca
   229 00000189 C60425[E1010000]01          mov     byte [turno], TURNO_ZORRO          ;si fue v√°lido, cambio el turno al zorro
   230                                  
   231                                  continuar_juego:
   232 00000191 4883EC08                    sub     rsp,8
   233 00000195 E807010000                  call    construir_tablero       ;reconstruyo el tablero despu√©s de cada turno
   234 0000019A 4883C408                    add     rsp,8
   235 0000019E 4883EC08                    sub     rsp,8
   236 000001A2 E8D5010000                  call    imprimir_tablero        ;imprimo el tablero despu√©s de cada turno
   237 000001A7 4883C408                    add     rsp,8
   238 000001AB E92AFFFFFF                  jmp     loop_juego              ;vuelvo al inicio del bucle del juego
   239                                  
   240 000001B0 C3                          ret
   241                                  
   242                                  ingresar_nombres_y_simbolos_jugadores:
   243 000001B1 48BF-                       mov     rdi, mensaje_ingresar_j1   
   243 000001B3 [1B02000000000000] 
   244                                      mPuts
     4 000001BB 4883EC08            <1>  sub rsp,8
     5 000001BF E8(00000000)        <1>  call puts
     6 000001C4 4883C408            <1>  add rsp,8
   245 000001C8 48BF-                       mov     rdi, nombre_jugador1              ; guardo el nombre de cada jugador
   245 000001CA [7D01000000000000] 
   246                                      mGets
    10 000001D2 4883EC08            <1>  sub rsp,8
    11 000001D6 E8(00000000)        <1>  call gets
    12 000001DB 4883C408            <1>  add rsp,8
   247 000001DF 48BF-                       mov     rdi, mensaje_ingresar_j2
   247 000001E1 [4502000000000000] 
   248                                      mPuts
     4 000001E9 4883EC08            <1>  sub rsp,8
     5 000001ED E8(00000000)        <1>  call puts
     6 000001F2 4883C408            <1>  add rsp,8
   249 000001F6 48BF-                       mov     rdi, nombre_jugador2
   249 000001F8 [AF01000000000000] 
   250                                      mGets
    10 00000200 4883EC08            <1>  sub rsp,8
    11 00000204 E8(00000000)        <1>  call gets
    12 00000209 4883C408            <1>  add rsp,8
   251 0000020D 48BF-                       mov     rdi, mensaje_ingresar_simbolo_zorro
   251 0000020F [6E02000000000000] 
   252                                      mPuts
     4 00000217 4883EC08            <1>  sub rsp,8
     5 0000021B E8(00000000)        <1>  call puts
     6 00000220 4883C408            <1>  add rsp,8
   253 00000224 48BF-                       mov     rdi, simbolo_zorro
   253 00000226 [3700000000000000] 
   254 0000022E 48BE-                       mov     rsi, simbolo_zorro
   254 00000230 [3700000000000000] 
   255                                      mGets
    10 00000238 4883EC08            <1>  sub rsp,8
    11 0000023C E8(00000000)        <1>  call gets
    12 00000241 4883C408            <1>  add rsp,8
   256 00000245 803C25[37000000]00          cmp     byte [simbolo_zorro], 0   ; verifico si se presiono enter
   257 0000024D 7508                        jne     skip_default_zorro        ; si no es enter, se utiliza el del usuario que se guardo en simbolo_zorro
   258 0000024F C60425[37000000]58          mov     byte [simbolo_zorro], 'X' ; se asigna el s√≠mbolo por defecto para el zorro, pisando en caso de enter
   259                                  skip_default_zorro:
   260 00000257 48BF-                       mov     rdi, mensaje_ingresar_simbolo_oca
   260 00000259 [B002000000000000] 
   261                                      mPuts
     4 00000261 4883EC08            <1>  sub rsp,8
     5 00000265 E8(00000000)        <1>  call puts
     6 0000026A 4883C408            <1>  add rsp,8
   262 0000026E 48BF-                       mov     rdi, simbolo_oca
   262 00000270 [3500000000000000] 
   263 00000278 48BE-                       mov     rsi, simbolo_oca
   263 0000027A [3500000000000000] 
   264                                      mGets
    10 00000282 4883EC08            <1>  sub rsp,8
    11 00000286 E8(00000000)        <1>  call gets
    12 0000028B 4883C408            <1>  add rsp,8
   265 0000028F 803C25[35000000]00          cmp     byte [simbolo_oca], 0     ; verifico si se presiono enter
   266 00000297 7508                        jne     construir_tablero          ; si no es enter, se utiliza el del usuario que se guardo en simbolo_oca
   267 00000299 C60425[35000000]4F          mov     byte [simbolo_oca], 'O'   ; se asigna el s√≠mbolo por defecto para las ocas, pisando en caso de enter
   268                                  
   269                                  
   270                                  construir_tablero:
   271 000002A1 BB01000000                  mov     rbx, 1            ; i que ser√° la fila, iniciada en 1 y no aumenta hasta no terminar las 7 columnas
   272 000002A6 41BA01000000                mov     r10, 1            ; j que ser√° la columna
   273 000002AC 48BF-                       mov     rdi, buffer       ; Apuntar al inicio del buffer
   273 000002AE [0000000000000000] 
   274                                  
   275                                  imprimir_siguiente_caracter:   
   276 000002B6 4889D8                      mov     rax, rbx           ;i
   277 000002B9 48FFC8                      dec     rax
   278 000002BC 486BC007                    imul    rax, rax, 7       ; (i-1) * longfila
   279 000002C0 4C89D2                      mov     rdx, r10          ;j
   280 000002C3 48FFCA                      dec     rdx
   281 000002C6 4801D0                      add     rax, rdx          ; (i-1) * longfila + (j-1)
   282 000002C9 48BE-                       mov     rsi, tablero
   282 000002CB [0000000000000000] 
   283 000002D3 4801C6                      add     rsi, rax          ; rsi apunta a la posici√≥n actual en el tablero
   284                                  
   285 000002D6 803E00                      cmp     byte [rsi], 0      ;segun el numero en tablero imprimo un caracter distinto
   286 000002D9 740F                        je      imprimir_fuera_tablero                
   287 000002DB 803E02                      cmp     byte [rsi], 2           
   288 000002DE 7458                        je      imprimir_espacio_vacio              
   289 000002E0 803E01                      cmp     byte [rsi], 1         
   290 000002E3 741F                        je      imprimir_oca
   291 000002E5 803E03                      cmp     byte [rsi], 3
   292 000002E8 7434                        je      imprimir_zorro
   293                                  
   294                                  imprimir_fuera_tablero:
   295 000002EA 8A0425[3B000000]            mov     al, [simbolo_separador]
   296 000002F1 AA                          stosb                               ;almaceno e incremento el rdi
   297 000002F2 8A0425[33000000]            mov     al, [simbolo_fuera_tablero]
   298 000002F9 AA                          stosb
   299 000002FA 8A0425[3B000000]            mov     al, [simbolo_separador]
   300 00000301 AA                          stosb
   301 00000302 EB4E                        jmp     continuar_construyendo_tablero
   302                                  
   303                                  imprimir_oca:
   304 00000304 8A0425[3B000000]            mov     al, [simbolo_separador]
   305 0000030B AA                          stosb
   306 0000030C 8A0425[35000000]            mov     al, [simbolo_oca]
   307 00000313 AA                          stosb
   308 00000314 8A0425[3B000000]            mov     al, [simbolo_separador]
   309 0000031B AA                          stosb
   310 0000031C EB34                        jmp     continuar_construyendo_tablero
   311                                  
   312                                  imprimir_zorro:
   313 0000031E 8A0425[3B000000]            mov     al, [simbolo_separador]
   314 00000325 AA                          stosb
   315 00000326 8A0425[37000000]            mov     al, [simbolo_zorro]
   316 0000032D AA                          stosb
   317 0000032E 8A0425[3B000000]            mov     al, [simbolo_separador]
   318 00000335 AA                          stosb
   319 00000336 EB1A                        jmp     continuar_construyendo_tablero
   320                                  
   321                                  imprimir_espacio_vacio:
   322 00000338 8A0425[3B000000]            mov     al, [simbolo_separador]
   323 0000033F AA                          stosb
   324 00000340 8A0425[39000000]            mov     al, [simbolo_espacio_vacio]
   325 00000347 AA                          stosb
   326 00000348 8A0425[3B000000]            mov     al, [simbolo_separador]
   327 0000034F AA                          stosb
   328 00000350 EB00                        jmp     continuar_construyendo_tablero
   329                                  
   330                                  continuar_construyendo_tablero:
   331 00000352 49FFC2                      inc     r10                ; Incrementar en uno para tener la siguiente columna
   332 00000355 4983FA08                    cmp     r10, 8             ; Si no llegu√© a la columna 7, construyo el siguiente elemento de la misma fila              
   333 00000359 0F8C57FFFFFF                jl      imprimir_siguiente_caracter       
   334                                  
   335                                      ; A√±adir un salto de l√≠nea al final de la fila
   336 0000035F 8A0425[31000000]            mov     al, [salto_linea]
   337 00000366 AA                          stosb
   338 00000367 41BA01000000                mov     r10, 1
   339 0000036D 48FFC3                      inc     rbx                ; Incremento en uno la fila (siguiente fila)
   340 00000370 4883FB08                    cmp     rbx, 8             ; Si llegu√© a la fila 7, termino la construcci√≥n
   341 00000374 7405                        je      fin_construir_tablero
   342                                  
   343 00000376 E93BFFFFFF                  jmp     imprimir_siguiente_caracter
   344                                  
   345                                  fin_construir_tablero:
   346 0000037B C3                          ret
   347                                  
   348                                  imprimir_tablero:
   349 0000037C 48BF-                       mov     rdi, buffer
   349 0000037E [0000000000000000] 
   350                                      mPuts
     4 00000386 4883EC08            <1>  sub rsp,8
     5 0000038A E8(00000000)        <1>  call puts
     6 0000038F 4883C408            <1>  add rsp,8
   351 00000393 48BF-                       mov rdi, mensaje_ocas_eliminadas
   351 00000395 [2203000000000000] 
   352 0000039D 488B3425[38030000]          mov rsi, [cantidad_ocas_eliminadas]
   353                                      mPrintF
    16 000003A5 4883EC08            <1>  sub rsp,8
    17 000003A9 E8(00000000)        <1>  call printf
    18 000003AE 4883C408            <1>  add rsp,8
   354 000003B2 48BF-                       mov rdi, salto_linea
   354 000003B4 [3100000000000000] 
   355                                      mPuts
     4 000003BC 4883EC08            <1>  sub rsp,8
     5 000003C0 E8(00000000)        <1>  call puts
     6 000003C5 4883C408            <1>  add rsp,8
   356 000003C9 C3                          ret
   357                                  
   358                                  pedir_movimiento_zorro:
   359 000003CA 48BF-                       mov rdi, mensaje_mover_zorro
   359 000003CC [3D01000000000000] 
   360                                      mPuts
     4 000003D4 4883EC08            <1>  sub rsp,8
     5 000003D8 E8(00000000)        <1>  call puts
     6 000003DD 4883C408            <1>  add rsp,8
   361 000003E1 48BF-                       mov rdi, input_zorro
   361 000003E3 [7301000000000000] 
   362                                      mGets
    10 000003EB 4883EC08            <1>  sub rsp,8
    11 000003EF E8(00000000)        <1>  call gets
    12 000003F4 4883C408            <1>  add rsp,8
   363 000003F8 C3                          ret
   364                                  
   365                                  mover_zorro:
   366 000003F9 48BE-                       mov rsi, tablero
   366 000003FB [0000000000000000] 
   367 00000403 B931000000                  mov rcx, 49
   368                                  
   369                                  buscar_zorro:
   370 00000408 AC                          lodsb       ;apunto al siguiente y lo cargo en al
   371 00000409 3C03                        cmp al, 3
   372 0000040B 7403                        je zorro_encontrado
   373 0000040D E2F9                        loop buscar_zorro
   374 0000040F C3                          ret
   375                                  
   376                                  zorro_encontrado:
   377 00000410 4889F3                      mov rbx, rsi   ; Mueve el valor del registro rsi (posici√≥n actual del zorro) a rbx
   378 00000413 48FFCB                      dec rbx         ; Decrementa rbx en 1 para apuntar correctamente a la posici√≥n actual del zorro
   379                                  
   380 00000416 48BF-                       mov rdi, input_zorro
   380 00000418 [7301000000000000] 
   381 00000420 8A07                        mov al, [rdi]
   382 00000422 3C77                        cmp al, 'w'
   383 00000424 7439                        je mover_zorro_arriba
   384 00000426 3C73                        cmp al, 's'
   385 00000428 7442                        je mover_zorro_abajo
   386 0000042A 3C61                        cmp al, 'a'
   387 0000042C 7449                        je mover_zorro_izquierda
   388 0000042E 3C64                        cmp al, 'd'
   389 00000430 7451                        je mover_zorro_derecha
   390 00000432 3C65                        cmp al, 'e'
   391 00000434 7457                        je mover_zorro_arriba_derecha
   392 00000436 3C71                        cmp al, 'q'
   393 00000438 7460                        je mover_zorro_arriba_izquierda
   394 0000043A 3C7A                        cmp al, 'z'
   395 0000043C 7469                        je mover_zorro_abajo_izquierda
   396 0000043E 3C78                        cmp al, 'x'
   397 00000440 7470                        je mover_zorro_abajo_derecha
   398 00000442 48BF-                       mov rdi, mensaje_error_input
   398 00000444 [0401000000000000] 
   399                                      mPuts
     4 0000044C 4883EC08            <1>  sub rsp,8
     5 00000450 E8(00000000)        <1>  call puts
     6 00000455 4883C408            <1>  add rsp,8
   400 00000459 E98BFCFFFF                  jmp turno_zorro
   401 0000045E C3                          ret
   402                                  
   403                                  mover_zorro_arriba:
   404 0000045F 4883EB07                    sub rbx, 7                  ; resto 7 a rbx para mover al zorro una fila hacia arriba
   405 00000463 48C7C7F9FFFFFF              mov rdi, -7                 ; la direcci√≥n del desplazamiento es -7
   406 0000046A EB51                        jmp validar_movimiento_zorro 
   407                                  
   408                                  mover_zorro_abajo:
   409 0000046C 4883C307                    add rbx, 7                  ; sumo 7 a rbx para mover al zorro una fila hacia abajo
   410 00000470 BF07000000                  mov rdi, 7                  ; la direcci√≥n del desplazamiento es 7
   411 00000475 EB46                        jmp validar_movimiento_zorro
   412                                  
   413                                  mover_zorro_izquierda:
   414 00000477 48FFCB                      dec rbx                     ; resto 1 a rbx para mover al zorro una columna a la izquierda
   415 0000047A 48C7C7FFFFFFFF              mov rdi, -1                 ; la direcci√≥n del desplazamiento es -1
   416 00000481 EB3A                        jmp validar_movimiento_zorro
   417                                  
   418                                  mover_zorro_derecha:
   419 00000483 48FFC3                      inc rbx                     ; sumo 1 a rbx para mover al zorro una columna a la derecha
   420 00000486 BF01000000                  mov rdi, 1                  ; la direcci√≥n del desplazamiento es 1
   421 0000048B EB30                        jmp validar_movimiento_zorro
   422                                  
   423                                  mover_zorro_arriba_derecha:
   424 0000048D 4883EB06                    sub rbx, 6                  ; resto 6 a rbx para mover al zorro en diagonal arriba derecha
   425 00000491 48C7C7FAFFFFFF              mov rdi, -6                 ; la direcci√≥n del desplazamiento es -6
   426 00000498 EB23                        jmp validar_movimiento_zorro
   427                                  
   428                                  mover_zorro_arriba_izquierda:
   429 0000049A 4883EB08                    sub rbx, 8                  ; resto 8 a rbx para mover al zorro en diagonal arriba izquierda
   430 0000049E 48C7C7F8FFFFFF              mov rdi, -8                 ; la direcci√≥n del desplazamiento es -8
   431 000004A5 EB16                        jmp validar_movimiento_zorro
   432                                  
   433                                  mover_zorro_abajo_izquierda:
   434 000004A7 4883C306                    add rbx, 6                  ; sumo 6 a rbx para mover al zorro en diagonal abajo izquierda
   435 000004AB BF06000000                  mov rdi, 6                  ; la direcci√≥n del desplazamiento es 6
   436 000004B0 EB0B                        jmp validar_movimiento_zorro
   437                                  
   438                                  mover_zorro_abajo_derecha:
   439 000004B2 4883C308                    add rbx, 8                  ; sumo 8 a rbx para mover al zorro en diagonal abajo derecha
   440 000004B6 BF08000000                  mov rdi, 8                  ; la direcci√≥n del desplazamiento es 8
   441 000004BB EB00                        jmp validar_movimiento_zorro
   442                                  
   443                                  validar_movimiento_zorro:
   444 000004BD 803B02                      cmp byte [rbx], 2           ; Comparar destino con una posici√≥n vac√≠a (2)
   445 000004C0 7518                        jne verificar_si_oca       ; Si no est√° vac√≠a, verificar si se puede comer una oca
   446 000004C2 C646FF02                    mov byte [rsi - 1], 2       ; Actualizar la posici√≥n anterior del zorro con 2 (vac√≠o)
   447 000004C6 C60303                      mov byte [rbx], 3           ; Colocar al zorro en la nueva posici√≥n
   448 000004C9 C60425[E2010000]00          mov byte [comio_oca], 0     ; Indicar que no comi√≥ oca
   449 000004D1 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue v√°lido
   450 000004D9 C3                          ret
   451                                  
   452                                  verificar_si_oca:
   453 000004DA 803B01                      cmp byte [rbx], 1           ; Comparar destino con una oca (1)
   454 000004DD 7561                        jne movimiento_invalido_zorro ; Si no es una oca, el movimiento es inv√°lido
   455 000004DF EB00                        jmp validar_comer_oca       ; Ir a validar si se puede comer la oca
   456                                  
   457                                  validar_comer_oca:
   458                                      ; Verificar si hay una oca en la posici√≥n intermedia
   459                                      ; RDI contiene la direcci√≥n del desplazamiento
   460 000004E1 4889D8                      mov rax, rbx
   461 000004E4 4801F8                      add rax, rdi
   462 000004E7 803802                      cmp byte [rax], 2           ; Verificar si la posici√≥n de salto est√° vac√≠a
   463 000004EA 7554                        jne movimiento_invalido_zorro
   464                                      ; Mover el zorro a la posici√≥n de salto
   465 000004EC C646FF02                    mov byte [rsi - 1], 2       ; Actualizar la posici√≥n anterior del zorro con 2 (vac√≠o)
   466 000004F0 C60003                      mov byte [rax], 3           ; Colocar el zorro en la nueva posici√≥n de salto
   467                                      ; Borrar la oca que fue comida
   468 000004F3 4829F8                      sub rax, rdi
   469 000004F6 C60002                      mov byte [rax], 2
   470 000004F9 48830425[38030000]-         add qword [cantidad_ocas_eliminadas], 1 ;aumento en uno la cantidad de ocas eliminadas
   470 00000501 01                 
   471 00000502 48833C25[38030000]-         cmp qword [cantidad_ocas_eliminadas], 12  ;si gana el zorro
   471 0000050A 0C                 
   472 0000050B 0F84C5040000                je ganador_zorro
   473 00000511 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue v√°lido
   474 00000519 C60425[E2010000]01          mov byte [comio_oca], 1     ; Indicar que el zorro comi√≥ una oca
   475                                      ; Reconstruir e imprimir el tablero para reflejar el estado actual
   476 00000521 4883EC08                    sub     rsp,8
   477 00000525 E877FDFFFF                  call    construir_tablero
   478 0000052A 4883C408                    add     rsp,8
   479 0000052E 4883EC08                    sub     rsp,8
   480 00000532 E845FEFFFF                  call    imprimir_tablero
   481 00000537 4883C408                    add     rsp,8
   482 0000053B E9A9FBFFFF                  jmp turno_zorro             ; Continuar el turno del zorro
   483                                  
   484                                  movimiento_invalido_zorro:
   485 00000540 C60425[6A010000]52          mov byte [input_valido], 'R'
   486 00000548 48BF-                       mov rdi, mensaje_mov_invalido
   486 0000054A [F301000000000000] 
   487                                      mPuts
     4 00000552 4883EC08            <1>  sub rsp,8
     5 00000556 E8(00000000)        <1>  call puts
     6 0000055B 4883C408            <1>  add rsp,8
   488 0000055F C3                          ret
   489                                  
   490                                  verificar_movimientos_zorro:
   491 00000560 48BE-                       mov rsi, tablero
   491 00000562 [0000000000000000] 
   492 0000056A B931000000                  mov rcx, 49
   493                                  
   494                                  buscar_zorro_verificacion_mov:
   495 0000056F AC                          lodsb
   496 00000570 3C03                        cmp al, 3
   497 00000572 7403                        je zorro_encontrado_verificar
   498 00000574 E2F9                        loop buscar_zorro_verificacion_mov
   499 00000576 C3                          ret
   500                                  
   501                                  zorro_encontrado_verificar:
   502 00000577 4889F3                      mov rbx, rsi   ; Mueve el valor del registro rsi (posici√≥n actual del zorro) a rbx
   503 0000057A 48FFCB                      dec rbx         ; Decrementa rbx en 1 para apuntar correctamente a la posici√≥n actual del zorro
   504                                  
   505                                      ; Verificar todas las direcciones alrededor del zorro (cercanas)
   506 0000057D 4889DF                      mov rdi, rbx
   507 00000580 4883EF07                    sub rdi, 7
   508 00000584 E84F010000                  call verificar_casillero
   509 00000589 803C25[6A010000]53          cmp byte [input_valido], 'S'
   510 00000591 0F8447010000                je movimiento_valido
   511                                  
   512 00000597 4889DF                      mov rdi, rbx
   513 0000059A 4883C707                    add rdi, 7
   514 0000059E E835010000                  call verificar_casillero
   515 000005A3 803C25[6A010000]53          cmp byte [input_valido], 'S'
   516 000005AB 0F842D010000                je movimiento_valido
   517                                  
   518 000005B1 4889DF                      mov rdi, rbx
   519 000005B4 48FFCF                      dec rdi
   520 000005B7 E81C010000                  call verificar_casillero
   521 000005BC 803C25[6A010000]53          cmp byte [input_valido], 'S'
   522 000005C4 0F8414010000                je movimiento_valido
   523                                  
   524 000005CA 4889DF                      mov rdi, rbx
   525 000005CD 48FFC7                      inc rdi
   526 000005D0 E803010000                  call verificar_casillero
   527 000005D5 803C25[6A010000]53          cmp byte [input_valido], 'S'
   528 000005DD 0F84FB000000                je movimiento_valido
   529                                  
   530 000005E3 4889DF                      mov rdi, rbx
   531 000005E6 4883EF06                    sub rdi, 6
   532 000005EA E8E9000000                  call verificar_casillero
   533 000005EF 803C25[6A010000]53          cmp byte [input_valido], 'S'
   534 000005F7 0F84E1000000                je movimiento_valido
   535                                  
   536 000005FD 4889DF                      mov rdi, rbx
   537 00000600 4883EF08                    sub rdi, 8
   538 00000604 E8CF000000                  call verificar_casillero
   539 00000609 803C25[6A010000]53          cmp byte [input_valido], 'S'
   540 00000611 0F84C7000000                je movimiento_valido
   541                                  
   542 00000617 4889DF                      mov rdi, rbx
   543 0000061A 4883C706                    add rdi, 6
   544 0000061E E8B5000000                  call verificar_casillero
   545 00000623 803C25[6A010000]53          cmp byte [input_valido], 'S'
   546 0000062B 0F84AD000000                je movimiento_valido
   547                                  
   548 00000631 4889DF                      mov rdi, rbx
   549 00000634 4883C708                    add rdi, 8
   550 00000638 E89B000000                  call verificar_casillero
   551 0000063D 803C25[6A010000]53          cmp byte [input_valido], 'S'
   552 00000645 0F8493000000                je movimiento_valido
   553                                  
   554                                      ; Verificar las posiciones m√°s alejadas (dos espacios en cada direcci√≥n)
   555 0000064B 4889DF                      mov rdi, rbx
   556 0000064E 4883EF0E                    sub rdi, 14  ; dos espacios hacia arriba-izquierda
   557 00000652 E881000000                  call verificar_casillero
   558 00000657 803C25[6A010000]53          cmp byte [input_valido], 'S'
   559 0000065F 747D                        je movimiento_valido
   560                                  
   561 00000661 4889DF                      mov rdi, rbx
   562 00000664 4883EF0C                    sub rdi, 12  ; dos espacios hacia arriba-derecha
   563 00000668 E86B000000                  call verificar_casillero
   564 0000066D 803C25[6A010000]53          cmp byte [input_valido], 'S'
   565 00000675 7467                        je movimiento_valido
   566                                  
   567 00000677 4889DF                      mov rdi, rbx
   568 0000067A 4883C70C                    add rdi, 12  ; dos espacios hacia abajo-izquierda
   569 0000067E E855000000                  call verificar_casillero
   570 00000683 803C25[6A010000]53          cmp byte [input_valido], 'S'
   571 0000068B 7451                        je movimiento_valido
   572                                  
   573 0000068D 4889DF                      mov rdi, rbx
   574 00000690 4883C70E                    add rdi, 14  ; dos espacios hacia abajo-derecha
   575 00000694 E83F000000                  call verificar_casillero
   576 00000699 803C25[6A010000]53          cmp byte [input_valido], 'S'
   577 000006A1 743B                        je movimiento_valido
   578                                  
   579 000006A3 4889DF                      mov rdi, rbx
   580 000006A6 4883EF0E                    sub rdi, 14  ; dos espacios hacia arriba
   581 000006AA E829000000                  call verificar_casillero
   582 000006AF 803C25[6A010000]53          cmp byte [input_valido], 'S'
   583 000006B7 7425                        je movimiento_valido
   584                                  
   585 000006B9 4889DF                      mov rdi, rbx
   586 000006BC 4883C70E                    add rdi, 14  ; dos espacios hacia abajo
   587 000006C0 E813000000                  call verificar_casillero
   588 000006C5 803C25[6A010000]53          cmp byte [input_valido], 'S'
   589 000006CD 740F                        je movimiento_valido
   590                                  
   591                                      ; Si no hay movimientos v√°lidos
   592 000006CF C60425[6A010000]4E          mov byte [input_valido], 'N'
   593 000006D7 C3                          ret
   594                                  
   595                                  verificar_casillero:
   596 000006D8 803F02                      cmp byte [rdi], 2  ; Verificar si el casillero es vac√≠o (2)
   597 000006DB 7401                        je movimiento_valido
   598 000006DD C3                          ret
   599                                  
   600                                  movimiento_valido:
   601 000006DE C60425[6A010000]53          mov byte [input_valido], 'S'
   602 000006E6 C3                          ret
   603                                  
   604                                  pedir_movimiento_oca:
   605 000006E7 48BF-                       mov rdi, mensaje_mover_oca
   605 000006E9 [3D00000000000000] 
   606                                      mPuts
     4 000006F1 4883EC08            <1>  sub rsp,8
     5 000006F5 E8(00000000)        <1>  call puts
     6 000006FA 4883C408            <1>  add rsp,8
   607 000006FE 48BF-                       mov rdi, input_oca
   607 00000700 [5E01000000000000] 
   608                                      mGets
    10 00000708 4883EC08            <1>  sub rsp,8
    11 0000070C E8(00000000)        <1>  call gets
    12 00000711 4883C408            <1>  add rsp,8
   609 00000715 803C25[5E010000]66          cmp byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   610 0000071D 0F8416020000                je guardar_partida
   611                                      ; Validar las coordenadas de la oca
   612 00000723 4883EC08                    sub rsp,8
   613 00000727 E8F5000000                  call validar_coordenadas_oca
   614 0000072C 4883C408                    add rsp,8
   615 00000730 803C25[6A010000]53          cmp byte [input_valido], 'S'
   616 00000738 7425                        je pedir_direccion_oca
   617                                  
   618 0000073A 48BF-                       mov rdi, mensaje_error_input
   618 0000073C [0401000000000000] 
   619                                      mPuts
     4 00000744 4883EC08            <1>  sub rsp,8
     5 00000748 E8(00000000)        <1>  call puts
     6 0000074D 4883C408            <1>  add rsp,8
   620 00000751 4883EC08                    sub rsp,8
   621 00000755 E88DFFFFFF                  call pedir_movimiento_oca
   622 0000075A 4883C408                    add rsp,8
   623 0000075E C3                          ret
   624                                  
   625                                  pedir_direccion_oca:
   626 0000075F 48BF-                       mov rdi, mensaje_mover_oca_direccion
   626 00000761 [9F00000000000000] 
   627                                      mPuts
     4 00000769 4883EC08            <1>  sub rsp,8
     5 0000076D E8(00000000)        <1>  call puts
     6 00000772 4883C408            <1>  add rsp,8
   628 00000776 48BF-                       mov rdi, input_oca
   628 00000778 [5E01000000000000] 
   629                                      mGets
    10 00000780 4883EC08            <1>  sub rsp,8
    11 00000784 E8(00000000)        <1>  call gets
    12 00000789 4883C408            <1>  add rsp,8
   630 0000078D C3                          ret
   631                                  
   632                                  mover_oca:
   633 0000078E 48BE-                       mov rsi, tablero
   633 00000790 [0000000000000000] 
   634                                      ; Calcular la posici√≥n en el tablero
   635 00000798 488B1C25[6B010000]          mov rbx, [posicion_oca]
   636                                      ; Leer la direcci√≥n de movimiento
   637 000007A0 48BF-                       mov rdi, input_oca
   637 000007A2 [5E01000000000000] 
   638 000007AA 8A07                        mov al, [rdi]
   639 000007AC 3C73                        cmp al, 's'
   640 000007AE 7425                        je mover_oca_abajo
   641 000007B0 3C61                        cmp al, 'a'
   642 000007B2 7427                        je mover_oca_izquierda
   643 000007B4 3C64                        cmp al, 'd'
   644 000007B6 7428                        je mover_oca_derecha
   645 000007B8 48BF-                       mov rdi, mensaje_error_input
   645 000007BA [0401000000000000] 
   646                                      mPuts
     4 000007C2 4883EC08            <1>  sub rsp,8
     5 000007C6 E8(00000000)        <1>  call puts
     6 000007CB 4883C408            <1>  add rsp,8
   647 000007CF E983F9FFFF                  jmp turno_ocas
   648 000007D4 C3                          ret
   649                                  
   650                                  mover_oca_abajo:
   651 000007D5 4883C307                    add rbx, 7
   652 000007D9 EB0A                        jmp validar_movimiento_oca
   653                                  
   654                                  mover_oca_izquierda:
   655 000007DB 48FFCB                      dec rbx
   656 000007DE EB05                        jmp validar_movimiento_oca
   657                                  
   658                                  mover_oca_derecha:
   659 000007E0 48FFC3                      inc rbx
   660 000007E3 EB00                        jmp validar_movimiento_oca
   661                                  
   662                                  validar_movimiento_oca:
   663 000007E5 803B02                      cmp byte [rbx], 2
   664 000007E8 7517                        jne movimiento_invalido_oca
   665 000007EA 488B3425[6B010000]          mov rsi, [posicion_oca]
   666 000007F2 C60602                      mov byte [rsi], 2          ; Actualizar la posici√≥n anterior de la oca con 2 (vac√≠o)
   667 000007F5 C60301                      mov byte [rbx], 1          ; Colocar la oca en la nueva posici√≥n
   668 000007F8 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue v√°lido
   669 00000800 C3                          ret
   670                                  
   671                                  movimiento_invalido_oca:
   672 00000801 C60425[6A010000]52          mov byte [input_valido], 'R'
   673 00000809 48BF-                       mov rdi, mensaje_mov_invalido
   673 0000080B [F301000000000000] 
   674                                      mPuts
     4 00000813 4883EC08            <1>  sub rsp,8
     5 00000817 E8(00000000)        <1>  call puts
     6 0000081C 4883C408            <1>  add rsp,8
   675 00000820 C3                          ret
   676                                  
   677                                  validar_coordenadas_oca:
   678 00000821 C60425[6A010000]4E          mov byte [input_valido], 'N'
   679 00000829 48BF-                       mov rdi, input_oca
   679 0000082B [5E01000000000000] 
   680 00000833 48BE-                       mov rsi, formatInputFilCol
   680 00000835 [FA00000000000000] 
   681 0000083D 48BA-                       mov rdx, fila
   681 0000083F [6801000000000000] 
   682 00000847 48B9-                       mov rcx, columna
   682 00000849 [6901000000000000] 
   683 00000851 4883EC08                    sub rsp,8
   684 00000855 E8(00000000)                call sscanf
   685 0000085A 4883C408                    add rsp,8
   686                                  
   687 0000085E 4883F802                    cmp rax, 2
   688 00000862 7C69                        jl coordenadas_invalidas
   689                                  
   690 00000864 803C25[68010000]01          cmp byte [fila], 1
   691 0000086C 7C5F                        jl coordenadas_invalidas
   692 0000086E 803C25[68010000]07          cmp byte [fila], 7
   693 00000876 7F55                        jg coordenadas_invalidas
   694                                  
   695 00000878 803C25[69010000]01          cmp byte [columna], 1
   696 00000880 7C4B                        jl coordenadas_invalidas
   697 00000882 803C25[69010000]07          cmp byte [columna], 7
   698 0000088A 7F41                        jg coordenadas_invalidas
   699                                  
   700                                      ; Calcular la posici√≥n en el tablero
   701 0000088C 660FB60425-                 movzx ax, byte [fila]   ;cargo en ax la fila
   701 00000891 [68010000]         
   702 00000895 6683E801                    sub ax, 1               ;para indexar en 0 
   703 00000899 666BC007                    imul ax, 7              ;desplazamiento en fila
   704 0000089D 660FB61425-                 movzx dx, byte [columna]    ;cargo en dx la columna
   704 000008A2 [69010000]         
   705 000008A6 6683EA01                    sub dx, 1   
   706 000008AA 6601D0                      add ax, dx              ;desplazamiento total
   707 000008AD 4889C3                      mov rbx, rax    
   708 000008B0 4881C3[00000000]            add rbx, tablero          ;posicion en el tablero
   709                                  
   710                                      ; Verificar si hay una oca en la posici√≥n ingresada
   711 000008B7 803B01                      cmp byte [rbx], 1
   712 000008BA 7511                        jne coordenadas_invalidas
   713                                  
   714 000008BC C60425[6A010000]53          mov byte [input_valido], 'S'
   715 000008C4 48891C25[6B010000]          mov [posicion_oca], rbx    ; Guardar la posici√≥n de la oca
   716 000008CC C3                          ret
   717                                  
   718                                  coordenadas_invalidas:
   719 000008CD 48BF-                       mov rdi, mensaje_error_input
   719 000008CF [0401000000000000] 
   720                                      mPuts
     4 000008D7 4883EC08            <1>  sub rsp,8
     5 000008DB E8(00000000)        <1>  call puts
     6 000008E0 4883C408            <1>  add rsp,8
   721 000008E4 C3                          ret
   722                                  
   723                                  errorApertura:
   724 000008E5 48BF-                       mov   rdi, msgErrorAp
   724 000008E7 [4E04000000000000] 
   725                                      mPuts
     4 000008EF 4883EC08            <1>  sub rsp,8
     5 000008F3 E8(00000000)        <1>  call puts
     6 000008F8 4883C408            <1>  add rsp,8
   726 000008FC E934010000                  jmp   fin_juego
   727                                  
   728                                  errorLeyendoArchivo:
   729 00000901 48BF-                       mov   rdi, msgErrorLectura
   729 00000903 [7904000000000000] 
   730                                      mPuts
     4 0000090B 4883EC08            <1>  sub rsp,8
     5 0000090F E8(00000000)        <1>  call puts
     6 00000914 4883C408            <1>  add rsp,8
   731 00000918 E996F7FFFF                  jmp   continuar_jugando
   732                                  
   733                                  errorEscritura:
   734 0000091D 48BF-                       mov   rdi, msgErrorEscritura
   734 0000091F [EA04000000000000] 
   735                                      mPuts
     4 00000927 4883EC08            <1>  sub rsp,8
     5 0000092B E8(00000000)        <1>  call puts
     6 00000930 4883C408            <1>  add rsp,8
   736 00000934 E9FC000000                  jmp   fin_juego
   737                                  
   738                                  guardar_partida:
   739 00000939 48BF-                       mov     rdi, archivoTablero
   739 0000093B [2D04000000000000] 
   740 00000943 E84B010000                  call    abrirEscrituraArchivoTablero
   741                                      
   742 00000948 48BF-                       mov     rdi, msgGuardarPartida
   742 0000094A [4A05000000000000] 
   743                                      mPuts
     4 00000952 4883EC08            <1>  sub rsp,8
     5 00000956 E8(00000000)        <1>  call puts
     6 0000095B 4883C408            <1>  add rsp,8
   744 0000095F 48BF-                       mov     rdi, respuestaPartidaGuardada
   744 00000961 [F701000000000000] 
   745                                      mGets
    10 00000969 4883EC08            <1>  sub rsp,8
    11 0000096D E8(00000000)        <1>  call gets
    12 00000972 4883C408            <1>  add rsp,8
   746 00000976 B902000000                  mov     rcx, 2
   747 0000097B 488D3425[89050000]          lea     rsi, [respuestaSi]
   748 00000983 488D3C25[F7010000]          lea     rdi, [respuestaPartidaGuardada]
   749 0000098B F3A6                        repe    cmpsb
   750 0000098D 0F8589000000                jne     noGuardarPartida
   751                                  
   752 00000993 E861020000                  call    convertirTableroAStr
   753 00000998 E85F010000                  call    escribirArchivoTablero
   754 0000099D 4883F800                    cmp     rax, 0
   755 000009A1 0F8E76FFFFFF                jle     errorEscritura
   756 000009A7 E880010000                  call    cerrarArchivoTablero
   757                                  
   758 000009AC 48BF-                       mov     rdi, archivoEstadisticas
   758 000009AE [3D04000000000000] 
   759 000009B6 E8F0000000                  call    abrirEscrituraArchivoEstadisticas
   760 000009BB E88B030000                  call    convertirEstadisticasAStr
   761                                      
   762 000009C0 E84F010000                  call    escribirArchivoEstadisticas
   763                                      
   764 000009C5 4883F800                    cmp     rax, 0
   765 000009C9 0F8E4EFFFFFF                jle     errorEscritura
   766 000009CF E866010000                  call    cerrarArchivoEstadisticas
   767 000009D4 EB5F                        jmp     fin_juego
   768                                  ganador_zorro:
   769                                      ; Imprimir el mensaje del ganador y finalizar el juego
   770 000009D6 48BF-                       mov rdi, mensaje_ganador
   770 000009D8 [F202000000000000] 
   771 000009E0 48BE-                       mov rsi, nombre_jugador1
   771 000009E2 [7D01000000000000] 
   772                                      mPrintF
    16 000009EA 4883EC08            <1>  sub rsp,8
    17 000009EE E8(00000000)        <1>  call printf
    18 000009F3 4883C408            <1>  add rsp,8
   773 000009F7 EB3C                        jmp fin_juego
   774                                  
   775                                  ganador_ocas:
   776                                      ; Imprimir el mensaje del ganador (ocas) y finalizar el juego
   777 000009F9 48BF-                       mov rdi, mensaje_ganador
   777 000009FB [F202000000000000] 
   778 00000A03 48BE-                       mov rsi, nombre_jugador2
   778 00000A05 [AF01000000000000] 
   779                                      mPrintF
    16 00000A0D 4883EC08            <1>  sub rsp,8
    17 00000A11 E8(00000000)        <1>  call printf
    18 00000A16 4883C408            <1>  add rsp,8
   780 00000A1A EB19                        jmp fin_juego
   781                                  
   782                                  noGuardarPartida:
   783 00000A1C E80B010000                  call    cerrarArchivoTablero
   784                                      ;Hago esto para que el contenido del archivo se elimine por completo
   785 00000A21 48BF-                       mov     rdi, archivoEstadisticas
   785 00000A23 [3D04000000000000] 
   786 00000A2B E87B000000                  call    abrirEscrituraArchivoEstadisticas
   787 00000A30 E805010000                  call    cerrarArchivoEstadisticas
   788                                  fin_juego:
   789 00000A35 4883EC08                    sub     rsp, 8
   790 00000A39 E85D040000                  call    mostrar_estadisticas
   791 00000A3E 4883C408                    add     rsp, 8
   792 00000A42 48BF-                       mov     rdi, mensaje_fin_juego  ; Imprimir el mensaje de fin del juego
   792 00000A44 [0503000000000000] 
   793                                      mPuts
     4 00000A4C 4883EC08            <1>  sub rsp,8
     5 00000A50 E8(00000000)        <1>  call puts
     6 00000A55 4883C408            <1>  add rsp,8
   794 00000A59 B83C000000                  mov     eax, 60                 ; syscall: exit
   795 00000A5E 31FF                        xor     edi, edi                ; status: 0
   796 00000A60 0F05                        syscall
   797 00000A62 C3                      ret
   798                                  
   799                                  
   800                                  
   801                                  ;---------  RUTINAS INTERNAS -----------
   802                                  abrirLecturaArchivoTablero:
   803                                    
   804 00000A63 48BE-                       mov   rsi, modoAperturaRead
   804 00000A65 [3904000000000000] 
   805 00000A6D E8(00000000)                call  fopen
   806                                  
   807 00000A72 48890425[E3010000]          mov   qword[handleArchTablero],rax
   808 00000A7A C3                      ret
   809                                  
   810                                  abrirLecturaArchivoEstadisticas:
   811                                    
   812 00000A7B 48BE-                       mov   rsi, modoAperturaRead
   812 00000A7D [3904000000000000] 
   813 00000A85 E8(00000000)                call  fopen
   814                                  
   815 00000A8A 48890425[EB010000]          mov   qword[handleArchEstadisticas],rax
   816 00000A92 C3                      ret
   817                                  
   818                                  abrirEscrituraArchivoTablero:
   819                                    
   820 00000A93 48BE-                       mov   rsi, modoAperturaWrite
   820 00000A95 [3B04000000000000] 
   821 00000A9D E8(00000000)                call  fopen
   822                                  
   823 00000AA2 48890425[E3010000]          mov   qword[handleArchTablero],rax
   824 00000AAA C3                      ret
   825                                  
   826                                  
   827                                  abrirEscrituraArchivoEstadisticas:
   828                                    
   829 00000AAB 48BE-                       mov   rsi, modoAperturaWrite
   829 00000AAD [3B04000000000000] 
   830 00000AB5 E8(00000000)                call  fopen
   831                                  
   832 00000ABA 48890425[EB010000]          mov   qword[handleArchEstadisticas],rax
   833 00000AC2 C3                      ret
   834                                  
   835                                  leerArchivoTablero:
   836                                  
   837 00000AC3 48BF-                       mov   rdi, registro
   837 00000AC5 [8C05000000000000] 
   838 00000ACD BE33000000                  mov   rsi, 51
   839 00000AD2 488B1425[E3010000]          mov   rdx, [handleArchTablero]
   840 00000ADA E8(00000000)                call  fgets
   841                                  
   842 00000ADF C3                      ret
   843                                  
   844                                  leerArchivoEstadisticas:
   845 00000AE0 48BF-                       mov     rdi, estadisticas
   845 00000AE2 [3206000000000000] 
   846 00000AEA BE0B000000                  mov     rsi, 11
   847 00000AEF 488B1425[EB010000]          mov     rdx, [handleArchEstadisticas]
   848 00000AF7 E8(00000000)                call    fgets
   849                                  
   850                                  escribirArchivoTablero:
   851                                  
   852 00000AFC 48BF-                       mov   rdi, tableroStr
   852 00000AFE [BF05000000000000] 
   853 00000B06 488B3425[E3010000]          mov   rsi, [handleArchTablero]
   854 00000B0E E8(00000000)                call  fputs
   855 00000B13 C3                      ret
   856                                  
   857                                  escribirArchivoEstadisticas:
   858 00000B14 48BF-                       mov   rdi, estadisticas
   858 00000B16 [3206000000000000] 
   859 00000B1E 488B3425[EB010000]          mov   rsi, [handleArchEstadisticas]
   860 00000B26 E8(00000000)                call  fputs
   861 00000B2B C3                      ret
   862                                  
   863                                  cerrarArchivoTablero:
   864                                  
   865 00000B2C 488B3C25[E3010000]          mov   rdi, [handleArchTablero]
   866 00000B34 E8(00000000)                call  fclose
   867 00000B39 C3                      ret
   868                                  
   869                                  cerrarArchivoEstadisticas:
   870                                  
   871 00000B3A 488B3C25[EB010000]          mov   rdi, [handleArchEstadisticas]
   872 00000B42 E8(00000000)                call  fclose
   873 00000B47 C3                      ret
   874                                  
   875                                  ;---------------------------------
   876                                  copiarRegistroATablero:
   877                                  
   878 00000B48 C60425[F4010000]00          mov   byte[posicionVect], 0
   879 00000B50 C60425[F5010000]01          mov   byte[posicionMatFil], 1
   880 00000B58 C60425[F6010000]01          mov   byte[posicionMatCol], 1
   881                                  
   882                                  recorroReg:
   883                                  
   884 00000B60 803C25[F4010000]31          cmp   byte[posicionVect], 49
   885 00000B68 0F8D8A000000                jge    finalizoCopia
   886                                  
   887 00000B6E 8A0425[F4010000]            mov   al, byte[posicionVect]
   888 00000B75 6698                        cbw
   889 00000B77 98                          cwde
   890 00000B78 4898                        cdqe
   891 00000B7A 8A88[8C050000]              mov   cl,[registro+rax]
   892 00000B80 80E930                      sub   cl, '0'
   893 00000B83 880C25[F3010000]            mov   [numero], cl
   894                                  
   895                                      ; Agrego el nro a la matriz
   896                                      
   897 00000B8A 8A0425[F5010000]            mov   al, byte[posicionMatFil] 
   898 00000B91 6698                        cbw
   899 00000B93 98                          cwde
   900 00000B94 4898                        cdqe
   901 00000B96 48FFC8                      dec   rax
   902 00000B99 486BC007                    imul  rax, CANT_FIL_COL
   903                                  
   904 00000B9D 4889C1                      mov   rcx, rax
   905                                  
   906 00000BA0 8A0425[F6010000]            mov   al, byte[posicionMatCol]
   907 00000BA7 6698                        cbw
   908 00000BA9 98                          cwde
   909 00000BAA 4898                        cdqe
   910 00000BAC 48FFC8                      dec   rax
   911                                      
   912 00000BAF 4801C1                      add   rcx, rax      ; Desplazamiento en matriz
   913                                  
   914 00000BB2 8A0425[F3010000]            mov   al, byte[numero]
   915 00000BB9 8881[00000000]              mov   [tablero+rcx], al
   916                                  
   917                                  avanzarColumna:
   918 00000BBF FE0425[F6010000]            inc   byte[posicionMatCol]
   919 00000BC6 803C25[F6010000]07          cmp   byte[posicionMatCol], CANT_FIL_COL
   920 00000BCE 7F02                        jg    avanzarFila
   921 00000BD0 EB19                        jmp   sigoEnVector
   922                                  
   923                                  avanzarFila:
   924 00000BD2 C60425[F6010000]01          mov   byte[posicionMatCol], 1
   925 00000BDA FE0425[F5010000]            inc   byte[posicionMatFil]
   926 00000BE1 803C25[F5010000]07          cmp   byte[posicionMatFil], CANT_FIL_COL
   927 00000BE9 7F0D                        jg    finalizoCopia
   928                                  
   929                                  sigoEnVector:
   930 00000BEB 800425[F4010000]01          add   byte[posicionVect], 1
   931 00000BF3 E968FFFFFF                  jmp   recorroReg
   932                                  
   933                                  finalizoCopia:
   934 00000BF8 C3                      ret
   935                                  
   936                                  
   937                                  
   938                                  convertirTableroAStr:
   939 00000BF9 C60425[F5010000]01          mov   byte[posicionMatFil], 1
   940 00000C01 C60425[F6010000]01          mov   byte[posicionMatCol], 1
   941                                  
   942                                  continuoCopiaStr:
   943 00000C09 8A0425[F5010000]            mov   al, byte[posicionMatFil] 
   944 00000C10 6698                        cbw
   945 00000C12 98                          cwde
   946 00000C13 4898                        cdqe
   947 00000C15 48FFC8                      dec   rax
   948 00000C18 486BC007                    imul  rax, CANT_FIL_COL
   949                                  
   950 00000C1C 4889C1                      mov   rcx, rax
   951                                  
   952 00000C1F 8A0425[F6010000]            mov   al, byte[posicionMatCol]
   953 00000C26 6698                        cbw
   954 00000C28 98                          cwde
   955 00000C29 4898                        cdqe
   956 00000C2B 48FFC8                      dec   rax
   957                                      
   958 00000C2E 4801C1                      add   rcx, rax      ; Desplazamiento en matriz
   959 00000C31 4883F930                    cmp   rcx, DESPLAZ_LIMITE
   960 00000C35 7F42                        jg    finalizoCopiaStr
   961                                  
   962 00000C37 8A81[00000000]              mov   al, [tablero+rcx]
   963 00000C3D 0430                        add   al, 48
   964 00000C3F 6698                        cbw
   965 00000C41 98                          cwde
   966 00000C42 4898                        cdqe
   967 00000C44 488981[BF050000]            mov   [tableroStr+rcx], rax
   968                                  
   969                                  avanzarColumnaStr:
   970 00000C4B FE0425[F6010000]            inc   byte[posicionMatCol]
   971 00000C52 803C25[F6010000]07          cmp   byte[posicionMatCol], CANT_FIL_COL
   972 00000C5A 7F02                        jg    avanzarFilaStr
   973 00000C5C EBAB                        jmp   continuoCopiaStr
   974                                  
   975                                  avanzarFilaStr:
   976 00000C5E C60425[F6010000]01          mov   byte[posicionMatCol], 1
   977 00000C66 FE0425[F5010000]            inc   byte[posicionMatFil]
   978 00000C6D 803C25[F5010000]07          cmp   byte[posicionMatFil], CANT_FIL_COL
   979 00000C75 7F02                        jg    finalizoCopiaStr
   980 00000C77 EB90                        jmp   continuoCopiaStr
   981                                      
   982                                  finalizoCopiaStr:
   983 00000C79 C60425[F0050000]0A          mov   byte[tableroStr+49], 10 ;Agrego un salto de l√≠nea al final del archivo
   984 00000C81 C3                      ret
   985                                  
   986                                  
   987                                  
   988                                  cargarEstadisticas:
   989 00000C82 488B0C25[32060000]          mov     rcx, [turnoGuardado]
   990 00000C8A 4883E930                    sub     rcx, 48
   991 00000C8E 48890C25[E1010000]          mov     [turno], rcx
   992                                  
   993 00000C96 488B0C25[33060000]          mov     rcx, [cantOcasEliminadas]
   994 00000C9E 4883E930                    sub     rcx, 48
   995 00000CA2 48890C25[38030000]          mov     [cantidad_ocas_eliminadas], rcx
   996                                  
   997 00000CAA 488B0C25[34060000]          mov     rcx, [estats_mov_abajo_guardado]
   998 00000CB2 4883E930                    sub     rcx, 48
   999 00000CB6 48890C25[F2050000]          mov     [estats_mov_abajo], rcx
  1000                                  
  1001 00000CBE 488B0C25[39060000]          mov     rcx, [estats_mov_abajo_izq_guardado]
  1002 00000CC6 4883E930                    sub     rcx, 48
  1003 00000CCA 48890C25[1A060000]          mov     [estats_mov_abajo_izq], rcx
  1004                                  
  1005 00000CD2 488B0C25[38060000]          mov     rcx, [estats_mov_abajo_der_guardado]
  1006 00000CDA 4883E930                    sub     rcx, 48
  1007 00000CDE 48890C25[12060000]          mov     [estats_mov_abajo_der], rcx
  1008                                  
  1009 00000CE6 488B0C25[35060000]          mov     rcx, [estats_mov_arriba_guardado]
  1010 00000CEE 4883E930                    sub     rcx, 48
  1011 00000CF2 48890C25[FA050000]          mov     [estats_mov_arriba], rcx
  1012                                  
  1013 00000CFA 488B0C25[3B060000]          mov     rcx, [estats_mov_arriba_izq_guardado]
  1014 00000D02 4883E930                    sub     rcx, 48
  1015 00000D06 48890C25[2A060000]          mov     [estats_mov_arriba_izq], rcx
  1016                                  
  1017 00000D0E 488B0C25[3A060000]          mov     rcx, [estats_mov_arriba_der_guardado]
  1018 00000D16 4883E930                    sub     rcx, 48
  1019 00000D1A 48890C25[22060000]          mov     [estats_mov_arriba_der], rcx
  1020                                  
  1021 00000D22 488B0C25[37060000]          mov     rcx, [estats_mov_der_guardado]
  1022 00000D2A 4883E930                    sub     rcx, 48
  1023 00000D2E 48890C25[0A060000]          mov     [estats_mov_der], rcx
  1024                                  
  1025 00000D36 488B0C25[36060000]          mov     rcx, [estats_mov_izq_guardado]
  1026 00000D3E 4883E930                    sub     rcx, 48
  1027 00000D42 48890C25[02060000]          mov     [estats_mov_izq], rcx
  1028 00000D4A C3                      ret
  1029                                  
  1030                                  convertirEstadisticasAStr:
  1031 00000D4B 488B0C25[E1010000]          mov     rcx, [turno]
  1032 00000D53 4883C130                    add     rcx, 48
  1033 00000D57 48890C25[32060000]          mov     [turnoGuardado], rcx
  1034                                  
  1035 00000D5F 488B0C25[38030000]          mov     rcx, [cantidad_ocas_eliminadas]
  1036 00000D67 4883C130                    add     rcx, 48
  1037 00000D6B 48890C25[33060000]          mov     [cantOcasEliminadas], rcx
  1038                                  
  1039 00000D73 488B0C25[F2050000]          mov     rcx, [estats_mov_abajo]
  1040 00000D7B 4883C130                    add     rcx, 48
  1041 00000D7F 48890C25[34060000]          mov     [estats_mov_abajo_guardado], rcx
  1042                                  
  1043 00000D87 488B0C25[1A060000]          mov     rcx, [estats_mov_abajo_izq]
  1044 00000D8F 4883C130                    add     rcx, 48
  1045 00000D93 48890C25[39060000]          mov     [estats_mov_abajo_izq_guardado], rcx
  1046                                  
  1047 00000D9B 488B0C25[12060000]          mov     rcx, [estats_mov_abajo_der]
  1048 00000DA3 4883C130                    add     rcx, 48
  1049 00000DA7 48890C25[38060000]          mov     [estats_mov_abajo_der_guardado], rcx
  1050                                  
  1051 00000DAF 488B0C25[FA050000]          mov     rcx, [estats_mov_arriba]
  1052 00000DB7 4883C130                    add     rcx, 48
  1053 00000DBB 48890C25[35060000]          mov     [estats_mov_arriba_guardado], rcx
  1054                                  
  1055 00000DC3 488B0C25[2A060000]          mov     rcx, [estats_mov_arriba_izq]
  1056 00000DCB 4883C130                    add     rcx, 48
  1057 00000DCF 48890C25[3B060000]          mov     [estats_mov_arriba_izq_guardado], rcx
  1058                                  
  1059 00000DD7 488B0C25[22060000]          mov     rcx, [estats_mov_arriba_der]
  1060 00000DDF 4883C130                    add     rcx, 48
  1061 00000DE3 48890C25[3A060000]          mov     [estats_mov_arriba_der_guardado], rcx
  1062                                  
  1063 00000DEB 488B0C25[0A060000]          mov     rcx, [estats_mov_der]
  1064 00000DF3 4883C130                    add     rcx, 48
  1065 00000DF7 48890C25[37060000]          mov     [estats_mov_der_guardado], rcx
  1066                                  
  1067 00000DFF 488B0C25[02060000]          mov     rcx, [estats_mov_izq]
  1068 00000E07 4883C130                    add     rcx, 48
  1069 00000E0B 48890C25[36060000]          mov     [estats_mov_izq_guardado], rcx
  1070                                  
  1071 00000E13 C3                      ret
  1072                                  sumarEstadisticaMovimiento:
  1073 00000E14 4829FF                      sub rdi, rdi
  1074 00000E17 48BF-                       mov rdi, input_zorro
  1074 00000E19 [7301000000000000] 
  1075 00000E21 488B07                      mov rax, [rdi]
  1076                                  
  1077                                  movimiento_arriba:
  1078 00000E24 4883F877                    cmp rax, 'w'
  1079 00000E28 750B                        jne movimiento_abajo
  1080 00000E2A 48830425[FA050000]-         add qword[estats_mov_arriba], 1
  1080 00000E32 01                 
  1081 00000E33 EB65                        jmp fin_estadisticas_mov
  1082                                  
  1083                                  movimiento_abajo:
  1084 00000E35 3C73                        cmp al, 's'
  1085 00000E37 750B                        jne movimiento_izq
  1086 00000E39 48830425[F2050000]-         add qword[estats_mov_abajo], 1
  1086 00000E41 01                 
  1087 00000E42 EB56                        jmp fin_estadisticas_mov
  1088                                  
  1089                                  movimiento_izq:
  1090 00000E44 3C61                        cmp al, 'a'
  1091 00000E46 750B                        jne movimiento_derecha
  1092 00000E48 48830425[02060000]-         add qword[estats_mov_izq], 1
  1092 00000E50 01                 
  1093 00000E51 EB47                        jmp fin_estadisticas_mov
  1094                                  
  1095                                  movimiento_derecha:
  1096 00000E53 3C64                        cmp al, 'd'
  1097 00000E55 750B                        jne movimiento_arriba_der
  1098 00000E57 48830425[0A060000]-         add qword[estats_mov_der], 1
  1098 00000E5F 01                 
  1099 00000E60 EB38                        jmp fin_estadisticas_mov
  1100                                  
  1101                                  movimiento_arriba_der:
  1102 00000E62 3C65                        cmp al, 'e'
  1103 00000E64 750B                        jne movimiento_arriba_izq
  1104 00000E66 48830425[22060000]-         add qword[estats_mov_arriba_der], 1
  1104 00000E6E 01                 
  1105 00000E6F EB29                        jmp fin_estadisticas_mov
  1106                                  
  1107                                  movimiento_arriba_izq:
  1108 00000E71 3C71                        cmp al, 'q'
  1109 00000E73 750B                        jne movimiento_abajo_izq
  1110 00000E75 48830425[2A060000]-         add qword[estats_mov_arriba_izq], 1
  1110 00000E7D 01                 
  1111 00000E7E EB1A                        jmp fin_estadisticas_mov
  1112                                  
  1113                                  movimiento_abajo_izq:
  1114 00000E80 3C7A                        cmp al, 'z'
  1115 00000E82 750B                        jne movimiento_abajo_der
  1116 00000E84 48830425[1A060000]-         add qword[estats_mov_abajo_izq], 1
  1116 00000E8C 01                 
  1117 00000E8D EB0B                        jmp fin_estadisticas_mov
  1118                                  
  1119                                  movimiento_abajo_der:
  1120 00000E8F 3C78                        cmp al, 'x'
  1121 00000E91 48830425[12060000]-         add qword[estats_mov_abajo_der], 1
  1121 00000E99 01                 
  1122                                  
  1123                                  fin_estadisticas_mov:
  1124 00000E9A C3                      ret
  1125                                  
  1126                                  mostrar_estadisticas:
  1127                                  
  1128 00000E9B 48BF-                       mov rdi, msg_mov_abajo
  1128 00000E9D [4003000000000000] 
  1129 00000EA5 4829F6                      sub rsi, rsi
  1130 00000EA8 488B3425[F2050000]          mov rsi, [estats_mov_abajo]
  1131                                      mPrintF
    16 00000EB0 4883EC08            <1>  sub rsp,8
    17 00000EB4 E8(00000000)        <1>  call printf
    18 00000EB9 4883C408            <1>  add rsp,8
  1132 00000EBD 48BF-                       mov rdi, salto_linea
  1132 00000EBF [3100000000000000] 
  1133                                      mPuts
     4 00000EC7 4883EC08            <1>  sub rsp,8
     5 00000ECB E8(00000000)        <1>  call puts
     6 00000ED0 4883C408            <1>  add rsp,8
  1134                                      
  1135                                  
  1136 00000ED4 48BF-                       mov rdi, msg_mov_abajo_der
  1136 00000ED6 [A303000000000000] 
  1137 00000EDE 4829F6                      sub rsi, rsi
  1138 00000EE1 488B3425[12060000]          mov rsi, [estats_mov_abajo_der]
  1139                                      mPrintF
    16 00000EE9 4883EC08            <1>  sub rsp,8
    17 00000EED E8(00000000)        <1>  call printf
    18 00000EF2 4883C408            <1>  add rsp,8
  1140 00000EF6 48BF-                       mov rdi, salto_linea
  1140 00000EF8 [3100000000000000] 
  1141                                      mPuts
     4 00000F00 4883EC08            <1>  sub rsp,8
     5 00000F04 E8(00000000)        <1>  call puts
     6 00000F09 4883C408            <1>  add rsp,8
  1142                                      
  1143                                  
  1144 00000F0D 48BF-                       mov rdi, msg_mov_abajo_izq
  1144 00000F0F [C403000000000000] 
  1145 00000F17 4829F6                      sub rsi, rsi
  1146 00000F1A 488B3425[1A060000]          mov rsi, [estats_mov_abajo_izq]
  1147                                      mPrintF
    16 00000F22 4883EC08            <1>  sub rsp,8
    17 00000F26 E8(00000000)        <1>  call printf
    18 00000F2B 4883C408            <1>  add rsp,8
  1148 00000F2F 48BF-                       mov rdi, salto_linea
  1148 00000F31 [3100000000000000] 
  1149                                      mPuts
     4 00000F39 4883EC08            <1>  sub rsp,8
     5 00000F3D E8(00000000)        <1>  call puts
     6 00000F42 4883C408            <1>  add rsp,8
  1150                                      
  1151                                  
  1152 00000F46 48BF-                       mov rdi, msg_mov_arriba
  1152 00000F48 [5703000000000000] 
  1153 00000F50 4829F6                      sub rsi, rsi
  1154 00000F53 488B3425[FA050000]          mov rsi, [estats_mov_arriba]
  1155                                      mPrintF
    16 00000F5B 4883EC08            <1>  sub rsp,8
    17 00000F5F E8(00000000)        <1>  call printf
    18 00000F64 4883C408            <1>  add rsp,8
  1156 00000F68 48BF-                       mov rdi, salto_linea
  1156 00000F6A [3100000000000000] 
  1157                                      mPuts
     4 00000F72 4883EC08            <1>  sub rsp,8
     5 00000F76 E8(00000000)        <1>  call puts
     6 00000F7B 4883C408            <1>  add rsp,8
  1158                                      
  1159                                  
  1160 00000F7F 48BF-                       mov rdi, msg_mov_arriba_izq
  1160 00000F81 [0904000000000000] 
  1161 00000F89 4829F6                      sub rsi, rsi
  1162 00000F8C 488B3425[2A060000]          mov rsi, [estats_mov_arriba_izq]
  1163                                      mPrintF
    16 00000F94 4883EC08            <1>  sub rsp,8
    17 00000F98 E8(00000000)        <1>  call printf
    18 00000F9D 4883C408            <1>  add rsp,8
  1164 00000FA1 48BF-                       mov rdi, salto_linea
  1164 00000FA3 [3100000000000000] 
  1165                                      mPuts
     4 00000FAB 4883EC08            <1>  sub rsp,8
     5 00000FAF E8(00000000)        <1>  call puts
     6 00000FB4 4883C408            <1>  add rsp,8
  1166                                      
  1167                                  
  1168 00000FB8 48BF-                       mov rdi, msg_mov_arriba_der
  1168 00000FBA [E703000000000000] 
  1169 00000FC2 4829F6                      sub rsi, rsi
  1170 00000FC5 488B3425[22060000]          mov rsi, [estats_mov_arriba_der]
  1171                                      mPrintF
    16 00000FCD 4883EC08            <1>  sub rsp,8
    17 00000FD1 E8(00000000)        <1>  call printf
    18 00000FD6 4883C408            <1>  add rsp,8
  1172 00000FDA 48BF-                       mov rdi, salto_linea
  1172 00000FDC [3100000000000000] 
  1173                                      mPuts
     4 00000FE4 4883EC08            <1>  sub rsp,8
     5 00000FE8 E8(00000000)        <1>  call puts
     6 00000FED 4883C408            <1>  add rsp,8
  1174                                      
  1175                                  
  1176 00000FF1 48BF-                       mov rdi, msg_mov_derecha
  1176 00000FF3 [8A03000000000000] 
  1177 00000FFB 4829F6                      sub rsi, rsi
  1178 00000FFE 488B3425[0A060000]          mov rsi, [estats_mov_der]
  1179                                      mPrintF
    16 00001006 4883EC08            <1>  sub rsp,8
    17 0000100A E8(00000000)        <1>  call printf
    18 0000100F 4883C408            <1>  add rsp,8
  1180 00001013 48BF-                       mov rdi, salto_linea
  1180 00001015 [3100000000000000] 
  1181                                      mPuts
     4 0000101D 4883EC08            <1>  sub rsp,8
     5 00001021 E8(00000000)        <1>  call puts
     6 00001026 4883C408            <1>  add rsp,8
  1182                                      
  1183                                  
  1184 0000102A 48BF-                       mov rdi, msg_mov_izquierda
  1184 0000102C [6F03000000000000] 
  1185 00001034 4829F6                      sub rsi, rsi
  1186 00001037 488B3425[02060000]          mov rsi, [estats_mov_izq]
  1187                                      mPrintF
    16 0000103F 4883EC08            <1>  sub rsp,8
    17 00001043 E8(00000000)        <1>  call printf
    18 00001048 4883C408            <1>  add rsp,8
  1188 0000104C 48BF-                       mov rdi, salto_linea
  1188 0000104E [3100000000000000] 
  1189                                      mPuts
     4 00001056 4883EC08            <1>  sub rsp,8
     5 0000105A E8(00000000)        <1>  call puts
     6 0000105F 4883C408            <1>  add rsp,8
  1190                                      
  1191 00001063 C3                      ret
