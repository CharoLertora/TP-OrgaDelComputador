     1                                  global main
     2                                  
     3                                  %macro mPuts 0
     4                                      sub     rsp,8
     5                                      call    puts
     6                                      add     rsp,8
     7                                  %endmacro
     8                                  
     9                                  %macro mGets 0
    10                                      sub     rsp,8
    11                                      call    gets
    12                                      add     rsp,8
    13                                  %endmacro
    14                                  
    15                                  %macro mPrintF 0
    16                                      sub     rsp,8
    17                                      call    printf
    18                                      add     rsp,8
    19                                  %endmacro
    20                                  
    21                                  extern puts
    22                                  extern gets
    23                                  extern sscanf
    24                                  extern fopen
    25                                  extern fgets
    26                                  extern printf
    27                                  extern fputs
    28                                  extern fclose
    29                                  
    30                                  
    31                                  section .data
    32 00000000 00000101010000              tablero     db  0, 0, 1, 1, 1, 0, 0
    33 00000007 00000101010000                          db  0, 0, 1, 1, 1, 0, 0
    34 0000000E 01010101010101                          db  1, 1, 1, 1, 1, 1, 1
    35 00000015 01020202020201                          db  1, 2, 2, 2, 2, 2, 1
    36 0000001C 01020203020201                          db  1, 2, 2, 3, 2, 2, 1
    37 00000023 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    38 0000002A 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    39                                  
    40 00000031 0A00                        salto_linea                 db 10, 0        
    41 00000033 2E00                        simbolo_fuera_tablero       db ".", 0
    42 00000035 4F00                        simbolo_oca                 db 'O', 0    ; symbolo por default para ocas
    43 00000037 5800                        simbolo_zorro               db 'X', 0    ; symbolo por default para el zorro
    44 00000039 2000                        simbolo_espacio_vacio       db ' ', 0
    45 0000003B 7C00                        simbolo_separador           db '|', 0
    46 0000003D 496E6772657365206C-         mensaje_mover_oca           db "Ingrese la fila y columna de la oca a mover (ejemplo: 3 3). Presione f para salir de la partida: ", 0
    46 00000046 612066696C61207920-
    46 0000004F 636F6C756D6E612064-
    46 00000058 65206C61206F636120-
    46 00000061 61206D6F7665722028-
    46 0000006A 656A656D706C6F3A20-
    46 00000073 332033292E20507265-
    46 0000007C 73696F6E6520662070-
    46 00000085 6172612073616C6972-
    46 0000008E 206465206C61207061-
    46 00000097 72746964613A2000   
    47 0000009F 4D75657661206C6120-         mensaje_mover_oca_direccion db "Mueva la oca con a: izquierda /s: abajo /d: derecha. Presione f para salir de la partida: ", 0
    47 000000A8 6F636120636F6E2061-
    47 000000B1 3A20697A7175696572-
    47 000000BA 6461202F733A206162-
    47 000000C3 616A6F202F643A2064-
    47 000000CC 6572656368612E2050-
    47 000000D5 726573696F6E652066-
    47 000000DE 20706172612073616C-
    47 000000E7 6972206465206C6120-
    47 000000F0 706172746964613A20-
    47 000000F9 00                 
    48 000000FA 256868752025686875-         formatInputFilCol           db "%hhu %hhu", 0                               ; Formato para leer enteros de 1 byte
    48 00000103 00                 
    49 00000104 4C6F73206461746F73-         mensaje_error_input         db "Los datos ingresados son inválidos. Intente nuevamente.", 0
    49 0000010D 20696E677265736164-
    49 00000116 6F7320736F6E20696E-
    49 0000011F 76C3A16C69646F732E-
    49 00000128 20496E74656E746520-
    49 00000131 6E756576616D656E74-
    49 0000013A 652E00             
    50 0000013D 4D7565766120656C20-         mensaje_mover_zorro         db "Mueva el zorro con w: arriba /a: izquierda /s: abajo /d: derecha /e: arriba-derecha /q: arriba-izquierda /z: abajo-izquierda /x: abajo-derecha. Presione f para salir de la partida: ", 0
    50 00000146 7A6F72726F20636F6E-
    50 0000014F 20773A206172726962-
    50 00000158 61202F613A20697A71-
    50 00000161 756965726461202F73-
    50 0000016A 3A206162616A6F202F-
    50 00000173 643A20646572656368-
    50 0000017C 61202F653A20617272-
    50 00000185 6962612D6465726563-
    50 0000018E 6861202F713A206172-
    50 00000197 726962612D697A7175-
    50 000001A0 6965726461202F7A3A-
    50 000001A9 206162616A6F2D697A-
    50 000001B2 71756965726461202F-
    50 000001BB 783A206162616A6F2D-
    50 000001C4 646572656368612E20-
    50 000001CD 50726573696F6E6520-
    50 000001D6 662070617261207361-
    50 000001DF 6C6972206465206C61-
    50 000001E8 20706172746964613A-
    50 000001F1 2000               
    51 000001F3 4D6F76696D69656E74-         mensaje_mov_invalido        db "Movimiento invalido, intente nuevamente", 0
    51 000001FC 6F20696E76616C6964-
    51 00000205 6F2C20696E74656E74-
    51 0000020E 65206E756576616D65-
    51 00000217 6E746500           
    52 0000021B 496E67726573652065-         mensaje_ingresar_j1         db "Ingrese el nombre del jugador 1 (zorro): ", 0
    52 00000224 6C206E6F6D62726520-
    52 0000022D 64656C206A75676164-
    52 00000236 6F72203120287A6F72-
    52 0000023F 726F293A2000       
    53 00000245 496E67726573652065-         mensaje_ingresar_j2         db "Ingrese el nombre del jugador 2 (ocas): ", 0
    53 0000024E 6C206E6F6D62726520-
    53 00000257 64656C206A75676164-
    53 00000260 6F72203220286F6361-
    53 00000269 73293A2000         
    54 0000026E 496E67726573652065-         mensaje_ingresar_simbolo_zorro db "Ingrese el simbolo para el zorro (presione Enter para usar 'X'): ", 0
    54 00000277 6C2073696D626F6C6F-
    54 00000280 207061726120656C20-
    54 00000289 7A6F72726F20287072-
    54 00000292 6573696F6E6520456E-
    54 0000029B 746572207061726120-
    54 000002A4 757361722027582729-
    54 000002AD 3A2000             
    55 000002B0 496E67726573652065-         mensaje_ingresar_simbolo_oca db "Ingrese el simbolo para las ocas (presione Enter para usar 'O'): ", 0
    55 000002B9 6C2073696D626F6C6F-
    55 000002C2 2070617261206C6173-
    55 000002CB 206F63617320287072-
    55 000002D4 6573696F6E6520456E-
    55 000002DD 746572207061726120-
    55 000002E6 7573617220274F2729-
    55 000002EF 3A2000             
    56 000002F2 456C2067616E61646F-         mensaje_ganador             db "El ganador es: %s ", 0
    56 000002FB 722065733A20257320-
    56 00000304 00                 
    57 00000305 456C206A7565676F20-         mensaje_fin_juego           db "El juego ha sido abandonado.", 0
    57 0000030E 6861207369646F2061-
    57 00000317 62616E646F6E61646F-
    57 00000320 2E00               
    58 00000322 4F63617320656C696D-         mensaje_ocas_eliminadas     db "Ocas eliminadas: %lli", 0
    58 0000032B 696E616461733A2025-
    58 00000334 6C6C6900           
    59 00000338 0000000000000000            cantidad_ocas_eliminadas    dq 0
    60                                  
    61                                      
    62                                      ;Variables de archivo
    63 00000340 7461626C65726F2E74-         archivoTablero              db      "tablero.txt",0
    63 00000349 787400             
    64 0000034C 7200                        modoAperturaRead            db      "r",0   ; Abro y leo un archivo de texto
    65 0000034E 7700                        modoAperturaWrite           db      "w",0
    66 00000350 657374616469737469-         archivoEstadisticas         db      "estadisticas.txt",0
    66 00000359 6361732E74787400   
    67                                  
    68 00000361 4C6F2073656E74696D-         msgErrorAp                  db      "Lo sentimos, no se pudo abrir el archivo.",10,0
    68 0000036A 6F732C206E6F207365-
    68 00000373 207075646F20616272-
    68 0000037C 697220656C20617263-
    68 00000385 6869766F2E0A00     
    69 0000038C 4E6F20736520656E63-         msgErrorLectura             db      "No se encontró una partida guardada, se iniciará una nueva.",10,0
    69 00000395 6F6E7472C3B320756E-
    69 0000039E 612070617274696461-
    69 000003A7 206775617264616461-
    69 000003B0 2C20736520696E6963-
    69 000003B9 696172C3A120756E61-
    69 000003C2 206E756576612E0A00 
    70 000003CB 4C65C3AD646F20636F-         msgLeido                    db      "Leído con éxito.",10,0
    70 000003D4 6E20C3A97869746F2E-
    70 000003DD 0A00               
    71 000003DF 4572726F7220636F6E-         msgErrorConvirt             db      "Error convirtiendo el numero",10,0
    71 000003E8 7669727469656E646F-
    71 000003F1 20656C206E756D6572-
    71 000003FA 6F0A00             
    72 000003FD 4572726F7220657363-         msgErrorEscritura           db      "Error escribiendo el archivo",10,0
    72 00000406 72696269656E646F20-
    72 0000040F 656C20617263686976-
    72 00000418 6F0A00             
    73 0000041B 536520686120656E63-         msgPartidaGuardada          db      "Se ha encontrado una partida guardada, desea continuarla? (si/no)",10,0
    73 00000424 6F6E747261646F2075-
    73 0000042D 6E6120706172746964-
    73 00000436 612067756172646164-
    73 0000043F 612C20646573656120-
    73 00000448 636F6E74696E756172-
    73 00000451 6C613F202873692F6E-
    73 0000045A 6F290A00           
    74 0000045E 457374C3A173207361-         msgGuardarPartida           db      "Estás saliendo del juego, querés guardar tu partida? (si/no)",10,0
    74 00000467 6C69656E646F206465-
    74 00000470 6C206A7565676F2C20-
    74 00000479 71756572C3A9732067-
    74 00000482 756172646172207475-
    74 0000048B 20706172746964613F-
    74 00000494 202873692F6E6F290A-
    74 0000049D 00                 
    75 0000049E 736900                      respuestaSi                 db      "si",0
    76 000004A1 20<rep 33h>                 registro          times 51  db      " "
    77 000004D4 20<rep 33h>                 tableroStr        times 51  db      " "
    78                                      
    79                                      estadisticas      times 0   db      ''
    80 00000507 20                              turnoGuardado           db      " "
    81 00000508 20                              cantOcasEliminadas      db      " "
    82                                          
    83                                  
    84                                      CANT_FIL_COL        equ     7
    85                                      DESPLAZ_LIMITE      equ     48
    86                                      TURNO_ZORRO         equ     1
    87                                      TURNO_OCAS          equ     2
    88                                  
    89                                  
    90                                  section .bss
    91 00000000 <res 15Eh>                  buffer          resb 350  ; Suficiente espacio para el tablero con saltos de línea
    92 0000015E <res Ah>                    input_oca       resb 10
    93 00000168 ??                          fila            resb 1
    94 00000169 ??                          columna         resb 1
    95 0000016A ??                          input_valido    resb 1
    96 0000016B ????????????????            posicion_oca    resq 1
    97 00000173 <res Ah>                    input_zorro     resb 10
    98 0000017D <res 32h>                   nombre_jugador1 resb 50
    99 000001AF <res 32h>                   nombre_jugador2 resb 50
   100 000001E1 ??                          turno           resb 1
   101 000001E2 ??                          comio_oca       resb 1
   102                                  
   103                                      ;Variables de archivo
   104 000001E3 ????????????????            handleArchTablero           resq  1
   105 000001EB ????????????????            handleArchEstadisticas      resq  1
   106 000001F3 ??                          numero                      resb  1
   107 000001F4 ??                          posicionVect                resb  1
   108 000001F5 ??                          posicionMatFil              resb  1
   109 000001F6 ??                          posicionMatCol              resb  1
   110 000001F7 ????????                    respuestaPartidaGuardada    resb  4
   111                                  
   112                                  section .text
   113                                  main:
   114 00000000 C60425[E1010000]01          mov     byte[turno], TURNO_ZORRO
   115 00000008 48BF-                       mov     rdi, archivoTablero
   115 0000000A [4003000000000000] 
   116 00000012 E8320A0000                  call    abrirLecturaArchivoTablero
   117 00000017 4883F800                    cmp     rax, 0
   118 0000001B 0F8EB7080000                jle     errorApertura
   119                                          
   120 00000021 E8830A0000                  call    leerArchivoTablero  
   121 00000026 4883F800                    cmp     rax, 0
   122 0000002A 0F8EC4080000                jle     errorLeyendoArchivo
   123                                  
   124 00000030 48BF-                       mov     rdi, msgPartidaGuardada
   124 00000032 [1B04000000000000] 
   125                                      mPuts
     4 0000003A 4883EC08            <1>  sub rsp,8
     5 0000003E E8(00000000)        <1>  call puts
     6 00000043 4883C408            <1>  add rsp,8
   126 00000047 48BF-                       mov     rdi, respuestaPartidaGuardada
   126 00000049 [F701000000000000] 
   127                                      mGets
    10 00000051 4883EC08            <1>  sub rsp,8
    11 00000055 E8(00000000)        <1>  call gets
    12 0000005A 4883C408            <1>  add rsp,8
   128 0000005E B902000000                  mov     rcx, 2
   129 00000063 488D3425[9E040000]          lea     rsi, [respuestaSi]
   130 0000006B 488D3C25[F7010000]          lea     rdi, [respuestaPartidaGuardada]
   131 00000073 F3A6                        repe    cmpsb
   132 00000075 753C                        jne     continuar_jugando
   133 00000077 E8B20A0000                  call    copiarRegistroATablero
   134 0000007C E8910A0000                  call    cerrarArchivoTablero
   135                                  
   136 00000081 48BF-                       mov     rdi, archivoEstadisticas
   136 00000083 [5003000000000000] 
   137 0000008B E8D1090000                  call    abrirLecturaArchivoEstadisticas
   138 00000090 4883F800                    cmp     rax, 0
   139 00000094 0F8E3E080000                jle     errorApertura
   140                                  
   141 0000009A E8270A0000                  call    leerArchivoEstadisticas
   142 0000009F 4883F800                    cmp     rax, 0
   143 000000A3 0F8E4B080000                jle     errorLeyendoArchivo
   144 000000A9 E8BA0B0000                  call    cargarEstadisticas
   145 000000AE E86D0A0000                  call    cerrarArchivoEstadisticas
   146                                  
   147                                  continuar_jugando:
   148 000000B3 4883EC08                    sub     rsp,8
   149 000000B7 E8E8000000                  call    ingresar_nombres_y_simbolos_jugadores  ;llamo a la subrutina para ingresar nombres y simbolos
   150 000000BC 4883C408                    add     rsp,8
   151                                  
   152 000000C0 4883EC08                    sub     rsp,8
   153 000000C4 E8CB010000                  call    construir_tablero       ;llamo a la subrutina para construir el tablero inicial
   154 000000C9 4883C408                    add     rsp,8
   155                                  
   156 000000CD 4883EC08                    sub     rsp,8
   157 000000D1 E899020000                  call    imprimir_tablero        ;llamo a la subrutina para imprimir el tablero
   158 000000D6 4883C408                    add     rsp,8
   159                                  
   160                                  loop_juego:
   161 000000DA 8A0425[E1010000]            mov     al, [turno]     ; veo de quien es el turno
   162 000000E1 3C01                        cmp     al, 1
   163 000000E3 7404                        je turno_zorro          ; si es el turno del zorro, voy a la etiqueta turno_zorro
   164 000000E5 3C02                        cmp     al, 2
   165 000000E7 7461                        je turno_ocas           ; si es el turno de las ocas, voy a la etiqueta turno_ocas
   166                                  
   167                                  turno_zorro:
   168 000000E9 4883EC08                    sub     rsp,8
   169 000000ED E861040000                  call    verificar_movimientos_zorro  ; Verifico si el zorro tiene movimientos disponibles
   170 000000F2 4883C408                    add     rsp,8
   171 000000F6 803C25[6A010000]4E          cmp     byte [input_valido], 'N'  ; Si no tiene movimientos válidos, las ocas ganan
   172 000000FE 0F84E8080000                je      ganador_ocas
   173 00000104 4883EC08                    sub     rsp,8
   174 00000108 E8B0020000                  call    pedir_movimiento_zorro  ;llamo a la subrutina para pedir movimiento del zorro
   175 0000010D 4883C408                    add     rsp,8
   176 00000111 803C25[73010000]66          cmp     byte [input_zorro], 'f' ; Verificar si se desea abandonar la partida
   177 00000119 0F840D080000                je      guardar_partida
   178 0000011F 4883EC08                    sub     rsp,8
   179 00000123 E8C4020000                  call    mover_zorro              ;llamo a la subrutina para mover al zorro
   180 00000128 4883C408                    add     rsp,8
   181 0000012C 803C25[6A010000]52          cmp     byte [input_valido], 'R'  ;comparo si el movimiento del zorro fue inválido
   182 00000134 74B3                        je      turno_zorro              ;si fue inválido, vuelvo a pedir movimiento del zorro
   183 00000136 803C25[E2010000]01          cmp     byte [comio_oca], TURNO_ZORRO      ; Si comió una oca, no cambiar de turno
   184 0000013E 7444                        je      continuar_juego
   185 00000140 C60425[E1010000]02          mov     byte [turno], TURNO_OCAS          ;si fue válido y no comió oca, cambio el turno a las ocas
   186 00000148 EB3A                        jmp     continuar_juego          ;voy a la etiqueta continuar_juego
   187                                  
   188                                  turno_ocas:
   189 0000014A 4883EC08                    sub     rsp,8
   190 0000014E E887050000                  call    pedir_movimiento_oca     ;llamo a la subrutina para pedir movimiento de la oca
   191 00000153 4883C408                    add     rsp,8
   192 00000157 803C25[5E010000]66          cmp     byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   193 0000015F 0F84C7070000                je      guardar_partida
   194 00000165 4883EC08                    sub     rsp,8
   195 00000169 E813060000                  call    mover_oca                ;llamo a la subrutina para mover la oca
   196 0000016E 4883C408                    add     rsp,8
   197 00000172 803C25[6A010000]52          cmp     byte [input_valido], 'R'  ;comparo si el movimiento de la oca fue inválido
   198 0000017A 74CE                        je      turno_ocas               ;si fue inválido, vuelvo a pedir movimiento de la oca
   199 0000017C C60425[E1010000]01          mov     byte [turno], TURNO_ZORRO          ;si fue válido, cambio el turno al zorro
   200                                  
   201                                  continuar_juego:
   202 00000184 4883EC08                    sub     rsp,8
   203 00000188 E807010000                  call    construir_tablero       ;reconstruyo el tablero después de cada turno
   204 0000018D 4883C408                    add     rsp,8
   205 00000191 4883EC08                    sub     rsp,8
   206 00000195 E8D5010000                  call    imprimir_tablero        ;imprimo el tablero después de cada turno
   207 0000019A 4883C408                    add     rsp,8
   208 0000019E E937FFFFFF                  jmp     loop_juego              ;vuelvo al inicio del bucle del juego
   209                                  
   210 000001A3 C3                          ret
   211                                  
   212                                  ingresar_nombres_y_simbolos_jugadores:
   213 000001A4 48BF-                       mov     rdi, mensaje_ingresar_j1   
   213 000001A6 [1B02000000000000] 
   214                                      mPuts
     4 000001AE 4883EC08            <1>  sub rsp,8
     5 000001B2 E8(00000000)        <1>  call puts
     6 000001B7 4883C408            <1>  add rsp,8
   215 000001BB 48BF-                       mov     rdi, nombre_jugador1              ; guardo el nombre de cada jugador
   215 000001BD [7D01000000000000] 
   216                                      mGets
    10 000001C5 4883EC08            <1>  sub rsp,8
    11 000001C9 E8(00000000)        <1>  call gets
    12 000001CE 4883C408            <1>  add rsp,8
   217 000001D2 48BF-                       mov     rdi, mensaje_ingresar_j2
   217 000001D4 [4502000000000000] 
   218                                      mPuts
     4 000001DC 4883EC08            <1>  sub rsp,8
     5 000001E0 E8(00000000)        <1>  call puts
     6 000001E5 4883C408            <1>  add rsp,8
   219 000001E9 48BF-                       mov     rdi, nombre_jugador2
   219 000001EB [AF01000000000000] 
   220                                      mGets
    10 000001F3 4883EC08            <1>  sub rsp,8
    11 000001F7 E8(00000000)        <1>  call gets
    12 000001FC 4883C408            <1>  add rsp,8
   221 00000200 48BF-                       mov     rdi, mensaje_ingresar_simbolo_zorro
   221 00000202 [6E02000000000000] 
   222                                      mPuts
     4 0000020A 4883EC08            <1>  sub rsp,8
     5 0000020E E8(00000000)        <1>  call puts
     6 00000213 4883C408            <1>  add rsp,8
   223 00000217 48BF-                       mov     rdi, simbolo_zorro
   223 00000219 [3700000000000000] 
   224 00000221 48BE-                       mov     rsi, simbolo_zorro
   224 00000223 [3700000000000000] 
   225                                      mGets
    10 0000022B 4883EC08            <1>  sub rsp,8
    11 0000022F E8(00000000)        <1>  call gets
    12 00000234 4883C408            <1>  add rsp,8
   226 00000238 803C25[37000000]00          cmp     byte [simbolo_zorro], 0   ; verifico si se presiono enter
   227 00000240 7508                        jne     skip_default_zorro        ; si no es enter, se utiliza el del usuario que se guardo en simbolo_zorro
   228 00000242 C60425[37000000]58          mov     byte [simbolo_zorro], 'X' ; se asigna el símbolo por defecto para el zorro, pisando en caso de enter
   229                                  skip_default_zorro:
   230 0000024A 48BF-                       mov     rdi, mensaje_ingresar_simbolo_oca
   230 0000024C [B002000000000000] 
   231                                      mPuts
     4 00000254 4883EC08            <1>  sub rsp,8
     5 00000258 E8(00000000)        <1>  call puts
     6 0000025D 4883C408            <1>  add rsp,8
   232 00000261 48BF-                       mov     rdi, simbolo_oca
   232 00000263 [3500000000000000] 
   233 0000026B 48BE-                       mov     rsi, simbolo_oca
   233 0000026D [3500000000000000] 
   234                                      mGets
    10 00000275 4883EC08            <1>  sub rsp,8
    11 00000279 E8(00000000)        <1>  call gets
    12 0000027E 4883C408            <1>  add rsp,8
   235 00000282 803C25[35000000]00          cmp     byte [simbolo_oca], 0     ; verifico si se presiono enter
   236 0000028A 7508                        jne     construir_tablero          ; si no es enter, se utiliza el del usuario que se guardo en simbolo_oca
   237 0000028C C60425[35000000]4F          mov     byte [simbolo_oca], 'O'   ; se asigna el símbolo por defecto para las ocas, pisando en caso de enter
   238                                  
   239                                  ;skip_default_oca:
   240                                  ;    mov byte [turno], TURNO_ZORRO  ; Comienza el turno del zorro
   241                                  ;    ret
   242                                  
   243                                  construir_tablero:
   244 00000294 BB01000000                  mov     rbx, 1            ; i que será la fila, iniciada en 1 y no aumenta hasta no terminar las 7 columnas
   245 00000299 41BA01000000                mov     r10, 1            ; j que será la columna
   246 0000029F 48BF-                       mov     rdi, buffer       ; Apuntar al inicio del buffer
   246 000002A1 [0000000000000000] 
   247                                  
   248                                  imprimir_siguiente_caracter:   
   249 000002A9 4889D8                      mov     rax, rbx           ;i
   250 000002AC 48FFC8                      dec     rax
   251 000002AF 486BC007                    imul    rax, rax, 7       ; (i-1) * longfila
   252 000002B3 4C89D2                      mov     rdx, r10          ;j
   253 000002B6 48FFCA                      dec     rdx
   254 000002B9 4801D0                      add     rax, rdx          ; (i-1) * longfila + (j-1)
   255 000002BC 48BE-                       mov     rsi, tablero
   255 000002BE [0000000000000000] 
   256 000002C6 4801C6                      add     rsi, rax          ; rsi apunta a la posición actual en el tablero
   257                                  
   258 000002C9 803E00                      cmp     byte [rsi], 0      ;segun el numero en tablero imprimo un caracter distinto
   259 000002CC 740F                        je      imprimir_fuera_tablero                
   260 000002CE 803E02                      cmp     byte [rsi], 2           
   261 000002D1 7458                        je      imprimir_espacio_vacio              
   262 000002D3 803E01                      cmp     byte [rsi], 1         
   263 000002D6 741F                        je      imprimir_oca
   264 000002D8 803E03                      cmp     byte [rsi], 3
   265 000002DB 7434                        je      imprimir_zorro
   266                                  
   267                                  imprimir_fuera_tablero:
   268 000002DD 8A0425[3B000000]            mov     al, [simbolo_separador]
   269 000002E4 AA                          stosb                               ;almaceno e incremento el rdi
   270 000002E5 8A0425[33000000]            mov     al, [simbolo_fuera_tablero]
   271 000002EC AA                          stosb
   272 000002ED 8A0425[3B000000]            mov     al, [simbolo_separador]
   273 000002F4 AA                          stosb
   274 000002F5 EB4E                        jmp     continuar_construyendo_tablero
   275                                  
   276                                  imprimir_oca:
   277 000002F7 8A0425[3B000000]            mov     al, [simbolo_separador]
   278 000002FE AA                          stosb
   279 000002FF 8A0425[35000000]            mov     al, [simbolo_oca]
   280 00000306 AA                          stosb
   281 00000307 8A0425[3B000000]            mov     al, [simbolo_separador]
   282 0000030E AA                          stosb
   283 0000030F EB34                        jmp     continuar_construyendo_tablero
   284                                  
   285                                  imprimir_zorro:
   286 00000311 8A0425[3B000000]            mov     al, [simbolo_separador]
   287 00000318 AA                          stosb
   288 00000319 8A0425[37000000]            mov     al, [simbolo_zorro]
   289 00000320 AA                          stosb
   290 00000321 8A0425[3B000000]            mov     al, [simbolo_separador]
   291 00000328 AA                          stosb
   292 00000329 EB1A                        jmp     continuar_construyendo_tablero
   293                                  
   294                                  imprimir_espacio_vacio:
   295 0000032B 8A0425[3B000000]            mov     al, [simbolo_separador]
   296 00000332 AA                          stosb
   297 00000333 8A0425[39000000]            mov     al, [simbolo_espacio_vacio]
   298 0000033A AA                          stosb
   299 0000033B 8A0425[3B000000]            mov     al, [simbolo_separador]
   300 00000342 AA                          stosb
   301 00000343 EB00                        jmp     continuar_construyendo_tablero
   302                                  
   303                                  continuar_construyendo_tablero:
   304 00000345 49FFC2                      inc     r10                ; Incrementar en uno para tener la siguiente columna
   305 00000348 4983FA08                    cmp     r10, 8             ; Si no llegué a la columna 7, construyo el siguiente elemento de la misma fila              
   306 0000034C 0F8C57FFFFFF                jl      imprimir_siguiente_caracter       
   307                                  
   308                                      ; Añadir un salto de línea al final de la fila
   309 00000352 8A0425[31000000]            mov     al, [salto_linea]
   310 00000359 AA                          stosb
   311 0000035A 41BA01000000                mov     r10, 1
   312 00000360 48FFC3                      inc     rbx                ; Incremento en uno la fila (siguiente fila)
   313 00000363 4883FB08                    cmp     rbx, 8             ; Si llegué a la fila 7, termino la construcción
   314 00000367 7405                        je      fin_construir_tablero
   315                                  
   316 00000369 E93BFFFFFF                  jmp     imprimir_siguiente_caracter
   317                                  
   318                                  fin_construir_tablero:
   319 0000036E C3                          ret
   320                                  
   321                                  imprimir_tablero:
   322 0000036F 48BF-                       mov     rdi, buffer
   322 00000371 [0000000000000000] 
   323                                      mPuts
     4 00000379 4883EC08            <1>  sub rsp,8
     5 0000037D E8(00000000)        <1>  call puts
     6 00000382 4883C408            <1>  add rsp,8
   324 00000386 48BF-                       mov rdi, mensaje_ocas_eliminadas
   324 00000388 [2203000000000000] 
   325 00000390 488B3425[38030000]          mov rsi, [cantidad_ocas_eliminadas]
   326                                      mPrintF
    16 00000398 4883EC08            <1>  sub rsp,8
    17 0000039C E8(00000000)        <1>  call printf
    18 000003A1 4883C408            <1>  add rsp,8
   327 000003A5 48BF-                       mov rdi, salto_linea
   327 000003A7 [3100000000000000] 
   328                                      mPuts
     4 000003AF 4883EC08            <1>  sub rsp,8
     5 000003B3 E8(00000000)        <1>  call puts
     6 000003B8 4883C408            <1>  add rsp,8
   329 000003BC C3                          ret
   330                                  
   331                                  pedir_movimiento_zorro:
   332 000003BD 48BF-                       mov rdi, mensaje_mover_zorro
   332 000003BF [3D01000000000000] 
   333                                      mPuts
     4 000003C7 4883EC08            <1>  sub rsp,8
     5 000003CB E8(00000000)        <1>  call puts
     6 000003D0 4883C408            <1>  add rsp,8
   334 000003D4 48BF-                       mov rdi, input_zorro
   334 000003D6 [7301000000000000] 
   335                                      mGets
    10 000003DE 4883EC08            <1>  sub rsp,8
    11 000003E2 E8(00000000)        <1>  call gets
    12 000003E7 4883C408            <1>  add rsp,8
   336 000003EB C3                          ret
   337                                  
   338                                  mover_zorro:
   339 000003EC 48BE-                       mov rsi, tablero
   339 000003EE [0000000000000000] 
   340 000003F6 B931000000                  mov rcx, 49
   341                                  
   342                                  buscar_zorro:
   343 000003FB AC                          lodsb       ;apunto al siguiente y lo cargo en al
   344 000003FC 3C03                        cmp al, 3
   345 000003FE 7403                        je zorro_encontrado
   346 00000400 E2F9                        loop buscar_zorro
   347 00000402 C3                          ret
   348                                  
   349                                  zorro_encontrado:
   350 00000403 4889F3                      mov rbx, rsi   ; Mueve el valor del registro rsi (posición actual del zorro) a rbx
   351 00000406 48FFCB                      dec rbx         ; Decrementa rbx en 1 para apuntar correctamente a la posición actual del zorro
   352                                  
   353 00000409 48BF-                       mov rdi, input_zorro
   353 0000040B [7301000000000000] 
   354 00000413 8A07                        mov al, [rdi]
   355 00000415 3C77                        cmp al, 'w'
   356 00000417 7439                        je mover_zorro_arriba
   357 00000419 3C73                        cmp al, 's'
   358 0000041B 7442                        je mover_zorro_abajo
   359 0000041D 3C61                        cmp al, 'a'
   360 0000041F 7449                        je mover_zorro_izquierda
   361 00000421 3C64                        cmp al, 'd'
   362 00000423 7451                        je mover_zorro_derecha
   363 00000425 3C65                        cmp al, 'e'
   364 00000427 7457                        je mover_zorro_arriba_derecha
   365 00000429 3C71                        cmp al, 'q'
   366 0000042B 7460                        je mover_zorro_arriba_izquierda
   367 0000042D 3C7A                        cmp al, 'z'
   368 0000042F 7469                        je mover_zorro_abajo_izquierda
   369 00000431 3C78                        cmp al, 'x'
   370 00000433 7470                        je mover_zorro_abajo_derecha
   371 00000435 48BF-                       mov rdi, mensaje_error_input
   371 00000437 [0401000000000000] 
   372                                      mPuts
     4 0000043F 4883EC08            <1>  sub rsp,8
     5 00000443 E8(00000000)        <1>  call puts
     6 00000448 4883C408            <1>  add rsp,8
   373 0000044C E998FCFFFF                  jmp turno_zorro
   374 00000451 C3                          ret
   375                                  
   376                                  mover_zorro_arriba:
   377 00000452 4883EB07                    sub rbx, 7                  ; resto 7 a rbx para mover al zorro una fila hacia arriba
   378 00000456 48C7C7F9FFFFFF              mov rdi, -7                 ; la dirección del desplazamiento es -7
   379 0000045D EB51                        jmp validar_movimiento_zorro 
   380                                  
   381                                  mover_zorro_abajo:
   382 0000045F 4883C307                    add rbx, 7                  ; sumo 7 a rbx para mover al zorro una fila hacia abajo
   383 00000463 BF07000000                  mov rdi, 7                  ; la dirección del desplazamiento es 7
   384 00000468 EB46                        jmp validar_movimiento_zorro
   385                                  
   386                                  mover_zorro_izquierda:
   387 0000046A 48FFCB                      dec rbx                     ; resto 1 a rbx para mover al zorro una columna a la izquierda
   388 0000046D 48C7C7FFFFFFFF              mov rdi, -1                 ; la dirección del desplazamiento es -1
   389 00000474 EB3A                        jmp validar_movimiento_zorro
   390                                  
   391                                  mover_zorro_derecha:
   392 00000476 48FFC3                      inc rbx                     ; sumo 1 a rbx para mover al zorro una columna a la derecha
   393 00000479 BF01000000                  mov rdi, 1                  ; la dirección del desplazamiento es 1
   394 0000047E EB30                        jmp validar_movimiento_zorro
   395                                  
   396                                  mover_zorro_arriba_derecha:
   397 00000480 4883EB06                    sub rbx, 6                  ; resto 6 a rbx para mover al zorro en diagonal arriba derecha
   398 00000484 48C7C7FAFFFFFF              mov rdi, -6                 ; la dirección del desplazamiento es -6
   399 0000048B EB23                        jmp validar_movimiento_zorro
   400                                  
   401                                  mover_zorro_arriba_izquierda:
   402 0000048D 4883EB08                    sub rbx, 8                  ; resto 8 a rbx para mover al zorro en diagonal arriba izquierda
   403 00000491 48C7C7F8FFFFFF              mov rdi, -8                 ; la dirección del desplazamiento es -8
   404 00000498 EB16                        jmp validar_movimiento_zorro
   405                                  
   406                                  mover_zorro_abajo_izquierda:
   407 0000049A 4883C306                    add rbx, 6                  ; sumo 6 a rbx para mover al zorro en diagonal abajo izquierda
   408 0000049E BF06000000                  mov rdi, 6                  ; la dirección del desplazamiento es 6
   409 000004A3 EB0B                        jmp validar_movimiento_zorro
   410                                  
   411                                  mover_zorro_abajo_derecha:
   412 000004A5 4883C308                    add rbx, 8                  ; sumo 8 a rbx para mover al zorro en diagonal abajo derecha
   413 000004A9 BF08000000                  mov rdi, 8                  ; la dirección del desplazamiento es 8
   414 000004AE EB00                        jmp validar_movimiento_zorro
   415                                  
   416                                  validar_movimiento_zorro:
   417 000004B0 803B02                      cmp byte [rbx], 2           ; Comparar destino con una posición vacía (2)
   418 000004B3 7518                        jne verificar_si_oca       ; Si no está vacía, verificar si se puede comer una oca
   419 000004B5 C646FF02                    mov byte [rsi - 1], 2       ; Actualizar la posición anterior del zorro con 2 (vacío)
   420 000004B9 C60303                      mov byte [rbx], 3           ; Colocar al zorro en la nueva posición
   421 000004BC C60425[E2010000]00          mov byte [comio_oca], 0     ; Indicar que no comió oca
   422 000004C4 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue válido
   423 000004CC C3                          ret
   424                                  
   425                                  verificar_si_oca:
   426 000004CD 803B01                      cmp byte [rbx], 1           ; Comparar destino con una oca (1)
   427 000004D0 7561                        jne movimiento_invalido_zorro ; Si no es una oca, el movimiento es inválido
   428 000004D2 EB00                        jmp validar_comer_oca       ; Ir a validar si se puede comer la oca
   429                                  
   430                                  validar_comer_oca:
   431                                      ; Verificar si hay una oca en la posición intermedia
   432                                      ; RDI contiene la dirección del desplazamiento
   433 000004D4 4889D8                      mov rax, rbx
   434 000004D7 4801F8                      add rax, rdi
   435 000004DA 803802                      cmp byte [rax], 2           ; Verificar si la posición de salto está vacía
   436 000004DD 7554                        jne movimiento_invalido_zorro
   437                                      ; Mover el zorro a la posición de salto
   438 000004DF C646FF02                    mov byte [rsi - 1], 2       ; Actualizar la posición anterior del zorro con 2 (vacío)
   439 000004E3 C60003                      mov byte [rax], 3           ; Colocar el zorro en la nueva posición de salto
   440                                      ; Borrar la oca que fue comida
   441 000004E6 4829F8                      sub rax, rdi
   442 000004E9 C60002                      mov byte [rax], 2
   443 000004EC 48830425[38030000]-         add qword [cantidad_ocas_eliminadas], 1 ;aumento en uno la cantidad de ocas eliminadas
   443 000004F4 01                 
   444 000004F5 48833C25[38030000]-         cmp qword [cantidad_ocas_eliminadas], 12  ;si gana el zorro
   444 000004FD 0C                 
   445 000004FE 0F84C5040000                je ganador_zorro
   446 00000504 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue válido
   447 0000050C C60425[E2010000]01          mov byte [comio_oca], 1     ; Indicar que el zorro comió una oca
   448                                      ; Reconstruir e imprimir el tablero para reflejar el estado actual
   449 00000514 4883EC08                    sub     rsp,8
   450 00000518 E877FDFFFF                  call    construir_tablero
   451 0000051D 4883C408                    add     rsp,8
   452 00000521 4883EC08                    sub     rsp,8
   453 00000525 E845FEFFFF                  call    imprimir_tablero
   454 0000052A 4883C408                    add     rsp,8
   455 0000052E E9B6FBFFFF                  jmp turno_zorro             ; Continuar el turno del zorro
   456                                  
   457                                  movimiento_invalido_zorro:
   458 00000533 C60425[6A010000]52          mov byte [input_valido], 'R'
   459 0000053B 48BF-                       mov rdi, mensaje_mov_invalido
   459 0000053D [F301000000000000] 
   460                                      mPuts
     4 00000545 4883EC08            <1>  sub rsp,8
     5 00000549 E8(00000000)        <1>  call puts
     6 0000054E 4883C408            <1>  add rsp,8
   461 00000552 C3                          ret
   462                                  
   463                                  verificar_movimientos_zorro:
   464 00000553 48BE-                       mov rsi, tablero
   464 00000555 [0000000000000000] 
   465 0000055D B931000000                  mov rcx, 49
   466                                  
   467                                  buscar_zorro_verificacion_mov:
   468 00000562 AC                          lodsb
   469 00000563 3C03                        cmp al, 3
   470 00000565 7403                        je zorro_encontrado_verificar
   471 00000567 E2F9                        loop buscar_zorro_verificacion_mov
   472 00000569 C3                          ret
   473                                  
   474                                  zorro_encontrado_verificar:
   475 0000056A 4889F3                      mov rbx, rsi   ; Mueve el valor del registro rsi (posición actual del zorro) a rbx
   476 0000056D 48FFCB                      dec rbx         ; Decrementa rbx en 1 para apuntar correctamente a la posición actual del zorro
   477                                  
   478                                      ; Verificar todas las direcciones alrededor del zorro (cercanas)
   479 00000570 4889DF                      mov rdi, rbx
   480 00000573 4883EF07                    sub rdi, 7
   481 00000577 E84F010000                  call verificar_casillero
   482 0000057C 803C25[6A010000]53          cmp byte [input_valido], 'S'
   483 00000584 0F8447010000                je movimiento_valido
   484                                  
   485 0000058A 4889DF                      mov rdi, rbx
   486 0000058D 4883C707                    add rdi, 7
   487 00000591 E835010000                  call verificar_casillero
   488 00000596 803C25[6A010000]53          cmp byte [input_valido], 'S'
   489 0000059E 0F842D010000                je movimiento_valido
   490                                  
   491 000005A4 4889DF                      mov rdi, rbx
   492 000005A7 48FFCF                      dec rdi
   493 000005AA E81C010000                  call verificar_casillero
   494 000005AF 803C25[6A010000]53          cmp byte [input_valido], 'S'
   495 000005B7 0F8414010000                je movimiento_valido
   496                                  
   497 000005BD 4889DF                      mov rdi, rbx
   498 000005C0 48FFC7                      inc rdi
   499 000005C3 E803010000                  call verificar_casillero
   500 000005C8 803C25[6A010000]53          cmp byte [input_valido], 'S'
   501 000005D0 0F84FB000000                je movimiento_valido
   502                                  
   503 000005D6 4889DF                      mov rdi, rbx
   504 000005D9 4883EF06                    sub rdi, 6
   505 000005DD E8E9000000                  call verificar_casillero
   506 000005E2 803C25[6A010000]53          cmp byte [input_valido], 'S'
   507 000005EA 0F84E1000000                je movimiento_valido
   508                                  
   509 000005F0 4889DF                      mov rdi, rbx
   510 000005F3 4883EF08                    sub rdi, 8
   511 000005F7 E8CF000000                  call verificar_casillero
   512 000005FC 803C25[6A010000]53          cmp byte [input_valido], 'S'
   513 00000604 0F84C7000000                je movimiento_valido
   514                                  
   515 0000060A 4889DF                      mov rdi, rbx
   516 0000060D 4883C706                    add rdi, 6
   517 00000611 E8B5000000                  call verificar_casillero
   518 00000616 803C25[6A010000]53          cmp byte [input_valido], 'S'
   519 0000061E 0F84AD000000                je movimiento_valido
   520                                  
   521 00000624 4889DF                      mov rdi, rbx
   522 00000627 4883C708                    add rdi, 8
   523 0000062B E89B000000                  call verificar_casillero
   524 00000630 803C25[6A010000]53          cmp byte [input_valido], 'S'
   525 00000638 0F8493000000                je movimiento_valido
   526                                  
   527                                      ; Verificar las posiciones más alejadas (dos espacios en cada dirección)
   528 0000063E 4889DF                      mov rdi, rbx
   529 00000641 4883EF0E                    sub rdi, 14  ; dos espacios hacia arriba-izquierda
   530 00000645 E881000000                  call verificar_casillero
   531 0000064A 803C25[6A010000]53          cmp byte [input_valido], 'S'
   532 00000652 747D                        je movimiento_valido
   533                                  
   534 00000654 4889DF                      mov rdi, rbx
   535 00000657 4883EF0C                    sub rdi, 12  ; dos espacios hacia arriba-derecha
   536 0000065B E86B000000                  call verificar_casillero
   537 00000660 803C25[6A010000]53          cmp byte [input_valido], 'S'
   538 00000668 7467                        je movimiento_valido
   539                                  
   540 0000066A 4889DF                      mov rdi, rbx
   541 0000066D 4883C70C                    add rdi, 12  ; dos espacios hacia abajo-izquierda
   542 00000671 E855000000                  call verificar_casillero
   543 00000676 803C25[6A010000]53          cmp byte [input_valido], 'S'
   544 0000067E 7451                        je movimiento_valido
   545                                  
   546 00000680 4889DF                      mov rdi, rbx
   547 00000683 4883C70E                    add rdi, 14  ; dos espacios hacia abajo-derecha
   548 00000687 E83F000000                  call verificar_casillero
   549 0000068C 803C25[6A010000]53          cmp byte [input_valido], 'S'
   550 00000694 743B                        je movimiento_valido
   551                                  
   552 00000696 4889DF                      mov rdi, rbx
   553 00000699 4883EF0E                    sub rdi, 14  ; dos espacios hacia arriba
   554 0000069D E829000000                  call verificar_casillero
   555 000006A2 803C25[6A010000]53          cmp byte [input_valido], 'S'
   556 000006AA 7425                        je movimiento_valido
   557                                  
   558 000006AC 4889DF                      mov rdi, rbx
   559 000006AF 4883C70E                    add rdi, 14  ; dos espacios hacia abajo
   560 000006B3 E813000000                  call verificar_casillero
   561 000006B8 803C25[6A010000]53          cmp byte [input_valido], 'S'
   562 000006C0 740F                        je movimiento_valido
   563                                  
   564                                      ; Si no hay movimientos válidos
   565 000006C2 C60425[6A010000]4E          mov byte [input_valido], 'N'
   566 000006CA C3                          ret
   567                                  
   568                                  verificar_casillero:
   569 000006CB 803F02                      cmp byte [rdi], 2  ; Verificar si el casillero es vacío (2)
   570 000006CE 7401                        je movimiento_valido
   571 000006D0 C3                          ret
   572                                  
   573                                  movimiento_valido:
   574 000006D1 C60425[6A010000]53          mov byte [input_valido], 'S'
   575 000006D9 C3                          ret
   576                                  
   577                                  pedir_movimiento_oca:
   578 000006DA 48BF-                       mov rdi, mensaje_mover_oca
   578 000006DC [3D00000000000000] 
   579                                      mPuts
     4 000006E4 4883EC08            <1>  sub rsp,8
     5 000006E8 E8(00000000)        <1>  call puts
     6 000006ED 4883C408            <1>  add rsp,8
   580 000006F1 48BF-                       mov rdi, input_oca
   580 000006F3 [5E01000000000000] 
   581                                      mGets
    10 000006FB 4883EC08            <1>  sub rsp,8
    11 000006FF E8(00000000)        <1>  call gets
    12 00000704 4883C408            <1>  add rsp,8
   582 00000708 803C25[5E010000]66          cmp byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   583 00000710 0F8416020000                je guardar_partida
   584                                      ; Validar las coordenadas de la oca
   585 00000716 4883EC08                    sub rsp,8
   586 0000071A E8F5000000                  call validar_coordenadas_oca
   587 0000071F 4883C408                    add rsp,8
   588 00000723 803C25[6A010000]53          cmp byte [input_valido], 'S'
   589 0000072B 7425                        je pedir_direccion_oca
   590                                  
   591 0000072D 48BF-                       mov rdi, mensaje_error_input
   591 0000072F [0401000000000000] 
   592                                      mPuts
     4 00000737 4883EC08            <1>  sub rsp,8
     5 0000073B E8(00000000)        <1>  call puts
     6 00000740 4883C408            <1>  add rsp,8
   593 00000744 4883EC08                    sub rsp,8
   594 00000748 E88DFFFFFF                  call pedir_movimiento_oca
   595 0000074D 4883C408                    add rsp,8
   596 00000751 C3                          ret
   597                                  
   598                                  pedir_direccion_oca:
   599 00000752 48BF-                       mov rdi, mensaje_mover_oca_direccion
   599 00000754 [9F00000000000000] 
   600                                      mPuts
     4 0000075C 4883EC08            <1>  sub rsp,8
     5 00000760 E8(00000000)        <1>  call puts
     6 00000765 4883C408            <1>  add rsp,8
   601 00000769 48BF-                       mov rdi, input_oca
   601 0000076B [5E01000000000000] 
   602                                      mGets
    10 00000773 4883EC08            <1>  sub rsp,8
    11 00000777 E8(00000000)        <1>  call gets
    12 0000077C 4883C408            <1>  add rsp,8
   603 00000780 C3                          ret
   604                                  
   605                                  mover_oca:
   606 00000781 48BE-                       mov rsi, tablero
   606 00000783 [0000000000000000] 
   607                                      ; Calcular la posición en el tablero
   608 0000078B 488B1C25[6B010000]          mov rbx, [posicion_oca]
   609                                      ; Leer la dirección de movimiento
   610 00000793 48BF-                       mov rdi, input_oca
   610 00000795 [5E01000000000000] 
   611 0000079D 8A07                        mov al, [rdi]
   612 0000079F 3C73                        cmp al, 's'
   613 000007A1 7425                        je mover_oca_abajo
   614 000007A3 3C61                        cmp al, 'a'
   615 000007A5 7427                        je mover_oca_izquierda
   616 000007A7 3C64                        cmp al, 'd'
   617 000007A9 7428                        je mover_oca_derecha
   618 000007AB 48BF-                       mov rdi, mensaje_error_input
   618 000007AD [0401000000000000] 
   619                                      mPuts
     4 000007B5 4883EC08            <1>  sub rsp,8
     5 000007B9 E8(00000000)        <1>  call puts
     6 000007BE 4883C408            <1>  add rsp,8
   620 000007C2 E983F9FFFF                  jmp turno_ocas
   621 000007C7 C3                          ret
   622                                  
   623                                  mover_oca_abajo:
   624 000007C8 4883C307                    add rbx, 7
   625 000007CC EB0A                        jmp validar_movimiento_oca
   626                                  
   627                                  mover_oca_izquierda:
   628 000007CE 48FFCB                      dec rbx
   629 000007D1 EB05                        jmp validar_movimiento_oca
   630                                  
   631                                  mover_oca_derecha:
   632 000007D3 48FFC3                      inc rbx
   633 000007D6 EB00                        jmp validar_movimiento_oca
   634                                  
   635                                  validar_movimiento_oca:
   636 000007D8 803B02                      cmp byte [rbx], 2
   637 000007DB 7517                        jne movimiento_invalido_oca
   638 000007DD 488B3425[6B010000]          mov rsi, [posicion_oca]
   639 000007E5 C60602                      mov byte [rsi], 2          ; Actualizar la posición anterior de la oca con 2 (vacío)
   640 000007E8 C60301                      mov byte [rbx], 1          ; Colocar la oca en la nueva posición
   641 000007EB C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue válido
   642 000007F3 C3                          ret
   643                                  
   644                                  movimiento_invalido_oca:
   645 000007F4 C60425[6A010000]52          mov byte [input_valido], 'R'
   646 000007FC 48BF-                       mov rdi, mensaje_mov_invalido
   646 000007FE [F301000000000000] 
   647                                      mPuts
     4 00000806 4883EC08            <1>  sub rsp,8
     5 0000080A E8(00000000)        <1>  call puts
     6 0000080F 4883C408            <1>  add rsp,8
   648 00000813 C3                          ret
   649                                  
   650                                  validar_coordenadas_oca:
   651 00000814 C60425[6A010000]4E          mov byte [input_valido], 'N'
   652 0000081C 48BF-                       mov rdi, input_oca
   652 0000081E [5E01000000000000] 
   653 00000826 48BE-                       mov rsi, formatInputFilCol
   653 00000828 [FA00000000000000] 
   654 00000830 48BA-                       mov rdx, fila
   654 00000832 [6801000000000000] 
   655 0000083A 48B9-                       mov rcx, columna
   655 0000083C [6901000000000000] 
   656 00000844 4883EC08                    sub rsp,8
   657 00000848 E8(00000000)                call sscanf
   658 0000084D 4883C408                    add rsp,8
   659                                  
   660 00000851 4883F802                    cmp rax, 2
   661 00000855 7C69                        jl coordenadas_invalidas
   662                                  
   663 00000857 803C25[68010000]01          cmp byte [fila], 1
   664 0000085F 7C5F                        jl coordenadas_invalidas
   665 00000861 803C25[68010000]07          cmp byte [fila], 7
   666 00000869 7F55                        jg coordenadas_invalidas
   667                                  
   668 0000086B 803C25[69010000]01          cmp byte [columna], 1
   669 00000873 7C4B                        jl coordenadas_invalidas
   670 00000875 803C25[69010000]07          cmp byte [columna], 7
   671 0000087D 7F41                        jg coordenadas_invalidas
   672                                  
   673                                      ; Calcular la posición en el tablero
   674 0000087F 660FB60425-                 movzx ax, byte [fila]   ;cargo en ax la fila
   674 00000884 [68010000]         
   675 00000888 6683E801                    sub ax, 1               ;para indexar en 0 
   676 0000088C 666BC007                    imul ax, 7              ;desplazamiento en fila
   677 00000890 660FB61425-                 movzx dx, byte [columna]    ;cargo en dx la columna
   677 00000895 [69010000]         
   678 00000899 6683EA01                    sub dx, 1   
   679 0000089D 6601D0                      add ax, dx              ;desplazamiento total
   680 000008A0 4889C3                      mov rbx, rax    
   681 000008A3 4881C3[00000000]            add rbx, tablero          ;posicion en el tablero
   682                                  
   683                                      ; Verificar si hay una oca en la posición ingresada
   684 000008AA 803B01                      cmp byte [rbx], 1
   685 000008AD 7511                        jne coordenadas_invalidas
   686                                  
   687 000008AF C60425[6A010000]53          mov byte [input_valido], 'S'
   688 000008B7 48891C25[6B010000]          mov [posicion_oca], rbx    ; Guardar la posición de la oca
   689 000008BF C3                          ret
   690                                  
   691                                  coordenadas_invalidas:
   692 000008C0 48BF-                       mov rdi, mensaje_error_input
   692 000008C2 [0401000000000000] 
   693                                      mPuts
     4 000008CA 4883EC08            <1>  sub rsp,8
     5 000008CE E8(00000000)        <1>  call puts
     6 000008D3 4883C408            <1>  add rsp,8
   694 000008D7 C3                          ret
   695                                  
   696                                  errorApertura:
   697 000008D8 48BF-                       mov   rdi, msgErrorAp
   697 000008DA [6103000000000000] 
   698                                      mPuts
     4 000008E2 4883EC08            <1>  sub rsp,8
     5 000008E6 E8(00000000)        <1>  call puts
     6 000008EB 4883C408            <1>  add rsp,8
   699 000008EF E934010000                  jmp   fin_juego
   700                                  
   701                                  errorLeyendoArchivo:
   702 000008F4 48BF-                       mov   rdi, msgErrorLectura
   702 000008F6 [8C03000000000000] 
   703                                      mPuts
     4 000008FE 4883EC08            <1>  sub rsp,8
     5 00000902 E8(00000000)        <1>  call puts
     6 00000907 4883C408            <1>  add rsp,8
   704 0000090B E9A3F7FFFF                  jmp   continuar_jugando
   705                                  
   706                                  errorEscritura:
   707 00000910 48BF-                       mov   rdi, msgErrorEscritura
   707 00000912 [FD03000000000000] 
   708                                      mPuts
     4 0000091A 4883EC08            <1>  sub rsp,8
     5 0000091E E8(00000000)        <1>  call puts
     6 00000923 4883C408            <1>  add rsp,8
   709 00000927 E9FC000000                  jmp   fin_juego
   710                                  
   711                                  guardar_partida:
   712 0000092C 48BF-                       mov     rdi, archivoTablero
   712 0000092E [4003000000000000] 
   713 00000936 E83E010000                  call    abrirEscrituraArchivoTablero
   714                                  
   715 0000093B 48BF-                       mov     rdi, msgGuardarPartida
   715 0000093D [5E04000000000000] 
   716                                      mPuts
     4 00000945 4883EC08            <1>  sub rsp,8
     5 00000949 E8(00000000)        <1>  call puts
     6 0000094E 4883C408            <1>  add rsp,8
   717 00000952 48BF-                       mov     rdi, respuestaPartidaGuardada
   717 00000954 [F701000000000000] 
   718                                      mGets
    10 0000095C 4883EC08            <1>  sub rsp,8
    11 00000960 E8(00000000)        <1>  call gets
    12 00000965 4883C408            <1>  add rsp,8
   719 00000969 B902000000                  mov     rcx, 2
   720 0000096E 488D3425[9E040000]          lea     rsi, [respuestaSi]
   721 00000976 488D3C25[F7010000]          lea     rdi, [respuestaPartidaGuardada]
   722 0000097E F3A6                        repe    cmpsb
   723 00000980 0F8589000000                jne     noGuardarPartida
   724                                  
   725 00000986 E854020000                  call    convertirTableroAStr
   726 0000098B E852010000                  call    escribirArchivoTablero
   727 00000990 4883F800                    cmp     rax, 0
   728 00000994 0F8E76FFFFFF                jle     errorEscritura
   729 0000099A E873010000                  call    cerrarArchivoTablero
   730                                  
   731 0000099F 48BF-                       mov     rdi, archivoEstadisticas
   731 000009A1 [5003000000000000] 
   732 000009A9 E8E3000000                  call    abrirEscrituraArchivoEstadisticas
   733 000009AE E8DE020000                  call    convertirEstadisticasAStr
   734 000009B3 E842010000                  call    escribirArchivoEstadisticas
   735 000009B8 4883F800                    cmp     rax, 0
   736 000009BC 0F8E4EFFFFFF                jle     errorEscritura
   737 000009C2 E859010000                  call    cerrarArchivoEstadisticas
   738                                  
   739 000009C7 EB5F                        jmp     fin_juego
   740                                  ganador_zorro:
   741                                      ; Imprimir el mensaje del ganador y finalizar el juego
   742 000009C9 48BF-                       mov rdi, mensaje_ganador
   742 000009CB [F202000000000000] 
   743 000009D3 48BE-                       mov rsi, nombre_jugador1
   743 000009D5 [7D01000000000000] 
   744                                      mPrintF
    16 000009DD 4883EC08            <1>  sub rsp,8
    17 000009E1 E8(00000000)        <1>  call printf
    18 000009E6 4883C408            <1>  add rsp,8
   745 000009EA EB3C                        jmp fin_juego
   746                                  
   747                                  ganador_ocas:
   748                                      ; Imprimir el mensaje del ganador (ocas) y finalizar el juego
   749 000009EC 48BF-                       mov rdi, mensaje_ganador
   749 000009EE [F202000000000000] 
   750 000009F6 48BE-                       mov rsi, nombre_jugador2
   750 000009F8 [AF01000000000000] 
   751                                      mPrintF
    16 00000A00 4883EC08            <1>  sub rsp,8
    17 00000A04 E8(00000000)        <1>  call printf
    18 00000A09 4883C408            <1>  add rsp,8
   752 00000A0D EB19                        jmp fin_juego
   753                                  
   754                                  noGuardarPartida:
   755 00000A0F E8FE000000                  call    cerrarArchivoTablero
   756                                      ;Hago esto para que el contenido del archivo se elimine por completo
   757 00000A14 48BF-                       mov     rdi, archivoEstadisticas
   757 00000A16 [5003000000000000] 
   758 00000A1E E86E000000                  call    abrirEscrituraArchivoEstadisticas
   759 00000A23 E8F8000000                  call    cerrarArchivoEstadisticas
   760                                  fin_juego:
   761                                  
   762 00000A28 48BF-                       mov     rdi, mensaje_fin_juego  ; Imprimir el mensaje de fin del juego
   762 00000A2A [0503000000000000] 
   763                                      mPuts
     4 00000A32 4883EC08            <1>  sub rsp,8
     5 00000A36 E8(00000000)        <1>  call puts
     6 00000A3B 4883C408            <1>  add rsp,8
   764 00000A3F B83C000000                  mov     eax, 60                 ; syscall: exit
   765 00000A44 31FF                        xor     edi, edi                ; status: 0
   766 00000A46 0F05                        syscall
   767 00000A48 C3                      ret
   768                                  
   769                                  
   770                                  
   771                                  ;---------  RUTINAS INTERNAS -----------
   772                                  abrirLecturaArchivoTablero:
   773                                    
   774 00000A49 48BE-                       mov   rsi, modoAperturaRead
   774 00000A4B [4C03000000000000] 
   775 00000A53 E8(00000000)                call  fopen
   776                                  
   777 00000A58 48890425[E3010000]          mov   qword[handleArchTablero],rax
   778 00000A60 C3                      ret
   779                                  
   780                                  abrirLecturaArchivoEstadisticas:
   781                                    
   782 00000A61 48BE-                       mov   rsi, modoAperturaRead
   782 00000A63 [4C03000000000000] 
   783 00000A6B E8(00000000)                call  fopen
   784                                  
   785 00000A70 48890425[EB010000]          mov   qword[handleArchEstadisticas],rax
   786 00000A78 C3                      ret
   787                                  
   788                                  abrirEscrituraArchivoTablero:
   789                                    
   790 00000A79 48BE-                       mov   rsi, modoAperturaWrite
   790 00000A7B [4E03000000000000] 
   791 00000A83 E8(00000000)                call  fopen
   792                                  
   793 00000A88 48890425[E3010000]          mov   qword[handleArchTablero],rax
   794 00000A90 C3                      ret
   795                                  
   796                                  
   797                                  abrirEscrituraArchivoEstadisticas:
   798                                    
   799 00000A91 48BE-                       mov   rsi, modoAperturaWrite
   799 00000A93 [4E03000000000000] 
   800 00000A9B E8(00000000)                call  fopen
   801                                  
   802 00000AA0 48890425[EB010000]          mov   qword[handleArchEstadisticas],rax
   803 00000AA8 C3                      ret
   804                                  
   805                                  leerArchivoTablero:
   806                                  
   807 00000AA9 48BF-                       mov   rdi, registro
   807 00000AAB [A104000000000000] 
   808 00000AB3 BE33000000                  mov   rsi, 51
   809 00000AB8 488B1425[E3010000]          mov   rdx, [handleArchTablero]
   810 00000AC0 E8(00000000)                call  fgets
   811                                  
   812 00000AC5 C3                      ret
   813                                  
   814                                  leerArchivoEstadisticas:
   815 00000AC6 48BF-                       mov     rdi, estadisticas
   815 00000AC8 [0705000000000000] 
   816 00000AD0 BE03000000                  mov     rsi, 3
   817 00000AD5 488B1425[EB010000]          mov     rdx, [handleArchEstadisticas]
   818 00000ADD E8(00000000)                call    fgets
   819                                  
   820                                  escribirArchivoTablero:
   821                                  
   822 00000AE2 48BF-                       mov   rdi, tableroStr
   822 00000AE4 [D404000000000000] 
   823 00000AEC 488B3425[E3010000]          mov   rsi, [handleArchTablero]
   824 00000AF4 E8(00000000)                call  fputs
   825 00000AF9 C3                      ret
   826                                  
   827                                  escribirArchivoEstadisticas:
   828 00000AFA 48BF-                       mov   rdi, estadisticas
   828 00000AFC [0705000000000000] 
   829 00000B04 488B3425[EB010000]          mov   rsi, [handleArchEstadisticas]
   830 00000B0C E8(00000000)                call  fputs
   831 00000B11 C3                      ret
   832                                  
   833                                  cerrarArchivoTablero:
   834                                  
   835 00000B12 488B3C25[E3010000]          mov   rdi, [handleArchTablero]
   836 00000B1A E8(00000000)                call  fclose
   837 00000B1F C3                      ret
   838                                  
   839                                  cerrarArchivoEstadisticas:
   840                                  
   841 00000B20 488B3C25[EB010000]          mov   rdi, [handleArchEstadisticas]
   842 00000B28 E8(00000000)                call  fclose
   843 00000B2D C3                      ret
   844                                  
   845                                  ;---------------------------------
   846                                  copiarRegistroATablero:
   847                                  
   848 00000B2E C60425[F4010000]00          mov   byte[posicionVect], 0
   849 00000B36 C60425[F5010000]01          mov   byte[posicionMatFil], 1
   850 00000B3E C60425[F6010000]01          mov   byte[posicionMatCol], 1
   851                                  
   852                                  recorroReg:
   853                                  
   854 00000B46 803C25[F4010000]31          cmp   byte[posicionVect], 49
   855 00000B4E 0F8D8A000000                jge    finalizoCopia
   856                                  
   857 00000B54 8A0425[F4010000]            mov   al, byte[posicionVect]
   858 00000B5B 6698                        cbw
   859 00000B5D 98                          cwde
   860 00000B5E 4898                        cdqe
   861 00000B60 8A88[A1040000]              mov   cl,[registro+rax]
   862 00000B66 80E930                      sub   cl, '0'
   863 00000B69 880C25[F3010000]            mov   [numero], cl
   864                                  
   865                                      ; Agrego el nro a la matriz
   866                                      
   867 00000B70 8A0425[F5010000]            mov   al, byte[posicionMatFil] 
   868 00000B77 6698                        cbw
   869 00000B79 98                          cwde
   870 00000B7A 4898                        cdqe
   871 00000B7C 48FFC8                      dec   rax
   872 00000B7F 486BC007                    imul  rax, CANT_FIL_COL
   873                                  
   874 00000B83 4889C1                      mov   rcx, rax
   875                                  
   876 00000B86 8A0425[F6010000]            mov   al, byte[posicionMatCol]
   877 00000B8D 6698                        cbw
   878 00000B8F 98                          cwde
   879 00000B90 4898                        cdqe
   880 00000B92 48FFC8                      dec   rax
   881                                      
   882 00000B95 4801C1                      add   rcx, rax      ; Desplazamiento en matriz
   883                                  
   884 00000B98 8A0425[F3010000]            mov   al, byte[numero]
   885 00000B9F 8881[00000000]              mov   [tablero+rcx], al
   886                                  
   887                                  avanzarColumna:
   888 00000BA5 FE0425[F6010000]            inc   byte[posicionMatCol]
   889 00000BAC 803C25[F6010000]07          cmp   byte[posicionMatCol], CANT_FIL_COL
   890 00000BB4 7F02                        jg    avanzarFila
   891 00000BB6 EB19                        jmp   sigoEnVector
   892                                  
   893                                  avanzarFila:
   894 00000BB8 C60425[F6010000]01          mov   byte[posicionMatCol], 1
   895 00000BC0 FE0425[F5010000]            inc   byte[posicionMatFil]
   896 00000BC7 803C25[F5010000]07          cmp   byte[posicionMatFil], CANT_FIL_COL
   897 00000BCF 7F0D                        jg    finalizoCopia
   898                                  
   899                                  sigoEnVector:
   900 00000BD1 800425[F4010000]01          add   byte[posicionVect], 1
   901 00000BD9 E968FFFFFF                  jmp   recorroReg
   902                                  
   903                                  finalizoCopia:
   904 00000BDE C3                      ret
   905                                  
   906                                  
   907                                  
   908                                  convertirTableroAStr:
   909 00000BDF C60425[F5010000]01          mov   byte[posicionMatFil], 1
   910 00000BE7 C60425[F6010000]01          mov   byte[posicionMatCol], 1
   911                                  
   912                                  continuoCopiaStr:
   913 00000BEF 8A0425[F5010000]            mov   al, byte[posicionMatFil] 
   914 00000BF6 6698                        cbw
   915 00000BF8 98                          cwde
   916 00000BF9 4898                        cdqe
   917 00000BFB 48FFC8                      dec   rax
   918 00000BFE 486BC007                    imul  rax, CANT_FIL_COL
   919                                  
   920 00000C02 4889C1                      mov   rcx, rax
   921                                  
   922 00000C05 8A0425[F6010000]            mov   al, byte[posicionMatCol]
   923 00000C0C 6698                        cbw
   924 00000C0E 98                          cwde
   925 00000C0F 4898                        cdqe
   926 00000C11 48FFC8                      dec   rax
   927                                      
   928 00000C14 4801C1                      add   rcx, rax      ; Desplazamiento en matriz
   929 00000C17 4883F930                    cmp   rcx, DESPLAZ_LIMITE
   930 00000C1B 7F42                        jg    finalizoCopiaStr
   931                                  
   932 00000C1D 8A81[00000000]              mov   al, [tablero+rcx]
   933 00000C23 0430                        add   al, 48
   934 00000C25 6698                        cbw
   935 00000C27 98                          cwde
   936 00000C28 4898                        cdqe
   937 00000C2A 488981[D4040000]            mov   [tableroStr+rcx], rax
   938                                  
   939                                  avanzarColumnaStr:
   940 00000C31 FE0425[F6010000]            inc   byte[posicionMatCol]
   941 00000C38 803C25[F6010000]07          cmp   byte[posicionMatCol], CANT_FIL_COL
   942 00000C40 7F02                        jg    avanzarFilaStr
   943 00000C42 EBAB                        jmp   continuoCopiaStr
   944                                  
   945                                  avanzarFilaStr:
   946 00000C44 C60425[F6010000]01          mov   byte[posicionMatCol], 1
   947 00000C4C FE0425[F5010000]            inc   byte[posicionMatFil]
   948 00000C53 803C25[F5010000]07          cmp   byte[posicionMatFil], CANT_FIL_COL
   949 00000C5B 7F02                        jg    finalizoCopiaStr
   950 00000C5D EB90                        jmp   continuoCopiaStr
   951                                      
   952                                  finalizoCopiaStr:
   953 00000C5F C60425[05050000]0A          mov   byte[tableroStr+49], 10 ;Agrego un salto de línea al final del archivo
   954 00000C67 C3                      ret
   955                                  
   956                                  
   957                                  
   958                                  cargarEstadisticas:
   959 00000C68 488B0C25[07050000]          mov     rcx, [turnoGuardado]
   960 00000C70 4883E930                    sub     rcx, 48
   961 00000C74 48890C25[E1010000]          mov     [turno], rcx
   962                                  
   963 00000C7C 488B0C25[08050000]          mov     rcx, [cantOcasEliminadas]
   964 00000C84 4883E930                    sub     rcx, 48
   965 00000C88 48890C25[38030000]          mov     [cantidad_ocas_eliminadas], rcx
   966 00000C90 C3                      ret
   967                                  
   968                                  convertirEstadisticasAStr:
   969 00000C91 488B0C25[E1010000]          mov     rcx, [turno]
   970 00000C99 4883C130                    add     rcx, 48
   971 00000C9D 48890C25[07050000]          mov     [turnoGuardado], rcx
   972                                  
   973 00000CA5 488B0C25[38030000]          mov     rcx, [cantidad_ocas_eliminadas]
   974 00000CAD 4883C130                    add     rcx, 48
   975 00000CB1 48890C25[08050000]          mov     [cantOcasEliminadas], rcx
   976                                  
   977 00000CB9 C60425[09050000]0A          mov     byte[estadisticas+2], 10
   978                                  
   979 00000CC1 C3                      ret
