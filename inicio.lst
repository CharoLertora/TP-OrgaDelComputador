     1                                  global main
     2                                  
     3                                  %macro mPuts 0
     4                                      sub     rsp,8
     5                                      call    puts
     6                                      add     rsp,8
     7                                  %endmacro
     8                                  
     9                                  %macro mGets 0
    10                                      sub     rsp,8
    11                                      call    gets
    12                                      add     rsp,8
    13                                  %endmacro
    14                                  
    15                                  %macro mPrintF 0
    16                                      sub     rsp,8
    17                                      call    printf
    18                                      add     rsp,8
    19                                  %endmacro
    20                                  
    21                                  extern puts
    22                                  extern gets
    23                                  extern sscanf
    24                                  extern fopen
    25                                  extern fgets
    26                                  extern printf
    27                                  extern fputs
    28                                  extern fclose
    29                                  
    30                                  
    31                                  section .data
    32 00000000 00000101010000              tablero     db  0, 0, 1, 1, 1, 0, 0
    33 00000007 00000101010000                          db  0, 0, 1, 1, 1, 0, 0
    34 0000000E 01010101010101                          db  1, 1, 1, 1, 1, 1, 1
    35 00000015 01020202020201                          db  1, 2, 2, 2, 2, 2, 1
    36 0000001C 01020203020201                          db  1, 2, 2, 3, 2, 2, 1
    37 00000023 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    38 0000002A 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    39                                  
    40 00000031 0A00                        salto_linea                 db 10, 0        
    41 00000033 2E00                        simbolo_fuera_tablero       db ".", 0
    42 00000035 4F00                        simbolo_oca                 db 'O', 0    ; symbolo por default para ocas
    43 00000037 5800                        simbolo_zorro               db 'X', 0    ; symbolo por default para el zorro
    44 00000039 2000                        simbolo_espacio_vacio       db ' ', 0
    45 0000003B 7C00                        simbolo_separador           db '|', 0
    46 0000003D 496E6772657365206C-         mensaje_mover_oca           db "Ingrese la fila y columna de la oca a mover (ejemplo: 3 3). Presione f para salir de la partida: ", 0
    46 00000046 612066696C61207920-
    46 0000004F 636F6C756D6E612064-
    46 00000058 65206C61206F636120-
    46 00000061 61206D6F7665722028-
    46 0000006A 656A656D706C6F3A20-
    46 00000073 332033292E20507265-
    46 0000007C 73696F6E6520662070-
    46 00000085 6172612073616C6972-
    46 0000008E 206465206C61207061-
    46 00000097 72746964613A2000   
    47 0000009F 4D75657661206C6120-         mensaje_mover_oca_direccion db "Mueva la oca con a: izquierda /s: abajo /d: derecha. Presione f para salir de la partida: ", 0
    47 000000A8 6F636120636F6E2061-
    47 000000B1 3A20697A7175696572-
    47 000000BA 6461202F733A206162-
    47 000000C3 616A6F202F643A2064-
    47 000000CC 6572656368612E2050-
    47 000000D5 726573696F6E652066-
    47 000000DE 20706172612073616C-
    47 000000E7 6972206465206C6120-
    47 000000F0 706172746964613A20-
    47 000000F9 00                 
    48 000000FA 256868752025686875-         formatInputFilCol           db "%hhu %hhu", 0                               ; Formato para leer enteros de 1 byte
    48 00000103 00                 
    49 00000104 4C6F73206461746F73-         mensaje_error_input         db "Los datos ingresados son inv√°lidos. Intente nuevamente.", 0
    49 0000010D 20696E677265736164-
    49 00000116 6F7320736F6E20696E-
    49 0000011F 76C3A16C69646F732E-
    49 00000128 20496E74656E746520-
    49 00000131 6E756576616D656E74-
    49 0000013A 652E00             
    50 0000013D 4D7565766120656C20-         mensaje_mover_zorro         db "Mueva el zorro con w: arriba /a: izquierda /s: abajo /d: derecha /e: arriba-derecha /q: arriba-izquierda /z: abajo-izquierda /x: abajo-derecha. Presione f para salir de la partida: ", 0
    50 00000146 7A6F72726F20636F6E-
    50 0000014F 20773A206172726962-
    50 00000158 61202F613A20697A71-
    50 00000161 756965726461202F73-
    50 0000016A 3A206162616A6F202F-
    50 00000173 643A20646572656368-
    50 0000017C 61202F653A20617272-
    50 00000185 6962612D6465726563-
    50 0000018E 6861202F713A206172-
    50 00000197 726962612D697A7175-
    50 000001A0 6965726461202F7A3A-
    50 000001A9 206162616A6F2D697A-
    50 000001B2 71756965726461202F-
    50 000001BB 783A206162616A6F2D-
    50 000001C4 646572656368612E20-
    50 000001CD 50726573696F6E6520-
    50 000001D6 662070617261207361-
    50 000001DF 6C6972206465206C61-
    50 000001E8 20706172746964613A-
    50 000001F1 2000               
    51 000001F3 4D6F76696D69656E74-         mensaje_mov_invalido        db "Movimiento invalido, intente nuevamente", 0
    51 000001FC 6F20696E76616C6964-
    51 00000205 6F2C20696E74656E74-
    51 0000020E 65206E756576616D65-
    51 00000217 6E746500           
    52 0000021B 496E67726573652065-         mensaje_ingresar_j1         db "Ingrese el nombre del jugador 1 (zorro): ", 0
    52 00000224 6C206E6F6D62726520-
    52 0000022D 64656C206A75676164-
    52 00000236 6F72203120287A6F72-
    52 0000023F 726F293A2000       
    53 00000245 496E67726573652065-         mensaje_ingresar_j2         db "Ingrese el nombre del jugador 2 (ocas): ", 0
    53 0000024E 6C206E6F6D62726520-
    53 00000257 64656C206A75676164-
    53 00000260 6F72203220286F6361-
    53 00000269 73293A2000         
    54 0000026E 496E67726573652065-         mensaje_ingresar_simbolo_zorro db "Ingrese el simbolo para el zorro (presione Enter para usar 'X'): ", 0
    54 00000277 6C2073696D626F6C6F-
    54 00000280 207061726120656C20-
    54 00000289 7A6F72726F20287072-
    54 00000292 6573696F6E6520456E-
    54 0000029B 746572207061726120-
    54 000002A4 757361722027582729-
    54 000002AD 3A2000             
    55 000002B0 496E67726573652065-         mensaje_ingresar_simbolo_oca db "Ingrese el simbolo para las ocas (presione Enter para usar 'O'): ", 0
    55 000002B9 6C2073696D626F6C6F-
    55 000002C2 2070617261206C6173-
    55 000002CB 206F63617320287072-
    55 000002D4 6573696F6E6520456E-
    55 000002DD 746572207061726120-
    55 000002E6 7573617220274F2729-
    55 000002EF 3A2000             
    56 000002F2 456C2067616E61646F-         mensaje_ganador             db "El ganador es: %s ", 0
    56 000002FB 722065733A20257320-
    56 00000304 00                 
    57 00000305 456C206A7565676F20-         mensaje_fin_juego           db "El juego ha sido abandonado.", 0
    57 0000030E 6861207369646F2061-
    57 00000317 62616E646F6E61646F-
    57 00000320 2E00               
    58 00000322 4F63617320656C696D-         mensaje_ocas_eliminadas     db "Ocas eliminadas: %lli",0
    58 0000032B 696E616461733A2025-
    58 00000334 6C6C6900           
    59 00000338 0000000000000000            cantidad_ocas_eliminadas    dq 0
    60 00000340 4D6F76696D69656E74-         msg_mov_abajo               db "Movimientos abajo: %hhi",0
    60 00000349 6F73206162616A6F3A-
    60 00000352 202568686900       
    61 00000358 4D6F76696D69656E74-         msg_mov_arriba              db "Movimientos arriba: %hhi",0
    61 00000361 6F7320617272696261-
    61 0000036A 3A202568686900     
    62 00000371 4D6F76696D69656E74-         msg_mov_izquierda           db "Movimientos izquierda: %hhi",0
    62 0000037A 6F7320697A71756965-
    62 00000383 7264613A2025686869-
    62 0000038C 00                 
    63 0000038D 4D6F76696D69656E74-         msg_mov_derecha             db "Movimientos derecha: %hhi",0
    63 00000396 6F7320646572656368-
    63 0000039F 613A202568686900   
    64 000003A7 4D6F76696D69656E74-         msg_mov_abajo_der           db "Movimientos abajo y derecha: %hhi",0
    64 000003B0 6F73206162616A6F20-
    64 000003B9 792064657265636861-
    64 000003C2 3A202568686900     
    65 000003C9 4D6F76696D69656E74-         msg_mov_abajo_izq           db "Movimientos abajo e izquierda: %hhi",0
    65 000003D2 6F73206162616A6F20-
    65 000003DB 6520697A7175696572-
    65 000003E4 64613A202568686900 
    66 000003ED 4D6F76696D69656E74-         msg_mov_arriba_der          db "Movimientos arriba y derecha: %hhi",0
    66 000003F6 6F7320617272696261-
    66 000003FF 207920646572656368-
    66 00000408 613A202568686900   
    67 00000410 4D6F76696D69656E74-         msg_mov_arriba_izq          db "Movimientos arriba e izquierda: %hhi",0
    67 00000419 6F7320617272696261-
    67 00000422 206520697A71756965-
    67 0000042B 7264613A2025686869-
    67 00000434 00                 
    68                                  
    69                                      ;Variables de archivo
    70 00000435 7461626C65726F2E74-         archivoTablero              db      "tablero.txt",0
    70 0000043E 787400             
    71 00000441 7200                        modoAperturaRead            db      "r",0   ; Abro y leo un archivo de texto
    72 00000443 7700                        modoAperturaWrite           db      "w",0
    73 00000445 657374616469737469-         archivoEstadisticas         db      "estadisticas.txt",0
    73 0000044E 6361732E74787400   
    74                                  
    75 00000456 4C6F2073656E74696D-         msgErrorAp                  db      "Lo sentimos, no se pudo abrir el archivo.",10,0
    75 0000045F 6F732C206E6F207365-
    75 00000468 207075646F20616272-
    75 00000471 697220656C20617263-
    75 0000047A 6869766F2E0A00     
    76 00000481 4E6F20736520656E63-         msgErrorLectura             db      "No se encontr√≥ una partida guardada, se iniciar√° una nueva.",10,0
    76 0000048A 6F6E7472C3B320756E-
    76 00000493 612070617274696461-
    76 0000049C 206775617264616461-
    76 000004A5 2C20736520696E6963-
    76 000004AE 696172C3A120756E61-
    76 000004B7 206E756576612E0A00 
    77 000004C0 4C65C3AD646F20636F-         msgLeido                    db      "Le√≠do con √©xito.",10,0
    77 000004C9 6E20C3A97869746F2E-
    77 000004D2 0A00               
    78 000004D4 4572726F7220636F6E-         msgErrorConvirt             db      "Error convirtiendo el numero",10,0
    78 000004DD 7669727469656E646F-
    78 000004E6 20656C206E756D6572-
    78 000004EF 6F0A00             
    79 000004F2 4572726F7220657363-         msgErrorEscritura           db      "Error escribiendo el archivo",10,0
    79 000004FB 72696269656E646F20-
    79 00000504 656C20617263686976-
    79 0000050D 6F0A00             
    80 00000510 536520686120656E63-         msgPartidaGuardada          db      "Se ha encontrado una partida guardada, desea continuarla? (si/no)",10,0
    80 00000519 6F6E747261646F2075-
    80 00000522 6E6120706172746964-
    80 0000052B 612067756172646164-
    80 00000534 612C20646573656120-
    80 0000053D 636F6E74696E756172-
    80 00000546 6C613F202873692F6E-
    80 0000054F 6F290A00           
    81 00000553 457374C3A173207361-         msgGuardarPartida           db      "Est√°s saliendo del juego, quer√©s guardar tu partida? (si/no)",10,0
    81 0000055C 6C69656E646F206465-
    81 00000565 6C206A7565676F2C20-
    81 0000056E 71756572C3A9732067-
    81 00000577 756172646172207475-
    81 00000580 20706172746964613F-
    81 00000589 202873692F6E6F290A-
    81 00000592 00                 
    82 00000593 736900                      respuestaSi                 db      "si",0
    83 00000596 20<rep 33h>                 registro          times 51  db      " "
    84 000005C9 20<rep 33h>                 tableroStr        times 51  db      " "
    85                                      
    86                                      estadisticas      times 0   db      ''
    87 000005FC 20                              turnoGuardado                        db     " "
    88 000005FD 20                              cantOcasEliminadas                   db     " "
    89 000005FE 20                              estats_mov_abajo_guardado            db     " "
    90 000005FF 20                              estats_mov_arriba_guardado           db     " "
    91 00000600 20                              estats_mov_izq_guardado              db     " "
    92 00000601 20                              estats_mov_der_guardado              db     " "
    93 00000602 20                              estats_mov_abajo_der_guardado        db     " "
    94 00000603 20                              estats_mov_abajo_izq_guardado        db     " "
    95 00000604 20                              estats_mov_arriba_der_guardado       db     " "
    96 00000605 20                              estats_mov_arriba_izq_guardado       db     " "
    97                                          
    98                                  
    99                                      CANT_FIL_COL        equ     7
   100                                      DESPLAZ_LIMITE      equ     48
   101                                      TURNO_ZORRO         equ     1
   102                                      TURNO_OCAS          equ     2
   103                                  
   104                                  
   105                                  section .bss
   106 00000000 <res 15Eh>                  buffer          resb 350  ; Suficiente espacio para el tablero con saltos de l√≠nea
   107 0000015E <res Ah>                    input_oca       resb 10
   108 00000168 ??                          fila            resb 1
   109 00000169 ??                          columna         resb 1
   110 0000016A ??                          input_valido    resb 1
   111 0000016B ????????????????            posicion_oca    resq 1
   112 00000173 <res Ah>                    input_zorro     resb 10
   113 0000017D <res 32h>                   nombre_jugador1 resb 50
   114 000001AF <res 32h>                   nombre_jugador2 resb 50
   115 000001E1 ??                          turno           resb 1
   116 000001E2 ??                          comio_oca       resb 1
   117 000001E3 ??                          estats_mov_abajo            resb 1
   118 000001E4 ??                          estats_mov_arriba           resb 1
   119 000001E5 ??                          estats_mov_izq              resb 1
   120 000001E6 ??                          estats_mov_der              resb 1
   121 000001E7 ??                          estats_mov_abajo_der        resb 1
   122 000001E8 ??                          estats_mov_abajo_izq        resb 1
   123 000001E9 ??                          estats_mov_arriba_der       resb 1
   124 000001EA ??                          estats_mov_arriba_izq       resb 1
   125                                  
   126                                      ;Variables de archivo
   127 000001EB ????????????????            handleArchTablero           resq  1
   128 000001F3 ????????????????            handleArchEstadisticas      resq  1
   129 000001FB ??                          numero                      resb  1
   130 000001FC ??                          posicionVect                resb  1
   131 000001FD ??                          posicionMatFil              resb  1
   132 000001FE ??                          posicionMatCol              resb  1
   133 000001FF ????????                    respuestaPartidaGuardada    resb  4
   134                                  
   135                                  section .text
   136                                  main:
   137 00000000 C60425[E1010000]01          mov     byte[turno], TURNO_ZORRO
   138 00000008 C60425[E3010000]00          mov     byte[estats_mov_abajo], 0
   139 00000010 C60425[E4010000]00          mov     byte[estats_mov_arriba], 0
   140 00000018 C60425[E5010000]00          mov     byte[estats_mov_izq], 0
   141 00000020 C60425[E6010000]00          mov     byte[estats_mov_der], 0
   142 00000028 C60425[E7010000]00          mov     byte[estats_mov_abajo_der], 0
   143 00000030 C60425[E8010000]00          mov     byte[estats_mov_abajo_izq], 0
   144 00000038 C60425[E9010000]00          mov     byte[estats_mov_arriba_der], 0
   145 00000040 C60425[EA010000]00          mov     byte[estats_mov_arriba_izq], 0
   146                                      
   147 00000048 48BF-                       mov     rdi, archivoTablero
   147 0000004A [3504000000000000] 
   148 00000052 E83C0A0000                  call    abrirLecturaArchivoTablero
   149 00000057 4883F800                    cmp     rax, 0
   150 0000005B 0F8EBC080000                jle     errorApertura
   151                                          
   152 00000061 E88D0A0000                  call    leerArchivoTablero  
   153 00000066 4883F800                    cmp     rax, 0
   154 0000006A 0F8EC9080000                jle     errorLeyendoArchivo
   155                                  
   156 00000070 48BF-                       mov     rdi, msgPartidaGuardada
   156 00000072 [1005000000000000] 
   157                                      mPuts
     4 0000007A 4883EC08            <1>  sub rsp,8
     5 0000007E E8(00000000)        <1>  call puts
     6 00000083 4883C408            <1>  add rsp,8
   158 00000087 48BF-                       mov     rdi, respuestaPartidaGuardada
   158 00000089 [FF01000000000000] 
   159                                      mGets
    10 00000091 4883EC08            <1>  sub rsp,8
    11 00000095 E8(00000000)        <1>  call gets
    12 0000009A 4883C408            <1>  add rsp,8
   160 0000009E B902000000                  mov     rcx, 2
   161 000000A3 488D3425[93050000]          lea     rsi, [respuestaSi]
   162 000000AB 488D3C25[FF010000]          lea     rdi, [respuestaPartidaGuardada]
   163 000000B3 F3A6                        repe    cmpsb
   164 000000B5 753C                        jne     continuar_jugando
   165 000000B7 E8BC0A0000                  call    copiarRegistroATablero
   166 000000BC E89B0A0000                  call    cerrarArchivoTablero
   167                                  
   168 000000C1 48BF-                       mov     rdi, archivoEstadisticas
   168 000000C3 [4504000000000000] 
   169 000000CB E8DB090000                  call    abrirLecturaArchivoEstadisticas
   170 000000D0 4883F800                    cmp     rax, 0
   171 000000D4 0F8E43080000                jle     errorApertura
   172                                  
   173 000000DA E8310A0000                  call    leerArchivoEstadisticas
   174 000000DF 4883F800                    cmp     rax, 0
   175 000000E3 0F8E50080000                jle     errorLeyendoArchivo
   176 000000E9 E8C40B0000                  call    cargarEstadisticas
   177 000000EE E8770A0000                  call    cerrarArchivoEstadisticas
   178                                  
   179                                  continuar_jugando:
   180 000000F3 4883EC08                    sub     rsp,8
   181 000000F7 E8E8000000                  call    ingresar_nombres_y_simbolos_jugadores  ;llamo a la subrutina para ingresar nombres y simbolos
   182 000000FC 4883C408                    add     rsp,8
   183                                  
   184 00000100 4883EC08                    sub     rsp,8
   185 00000104 E8CB010000                  call    construir_tablero       ;llamo a la subrutina para construir el tablero inicial
   186 00000109 4883C408                    add     rsp,8
   187                                  
   188 0000010D 4883EC08                    sub     rsp,8
   189 00000111 E899020000                  call    imprimir_tablero        ;llamo a la subrutina para imprimir el tablero
   190 00000116 4883C408                    add     rsp,8
   191                                  
   192                                  loop_juego:
   193 0000011A 8A0425[E1010000]            mov     al, [turno]     ; veo de quien es el turno
   194 00000121 3C01                        cmp     al, 1
   195 00000123 7404                        je turno_zorro          ; si es el turno del zorro, voy a la etiqueta turno_zorro
   196 00000125 3C02                        cmp     al, 2
   197 00000127 7461                        je turno_ocas           ; si es el turno de las ocas, voy a la etiqueta turno_ocas
   198                                  
   199                                  turno_zorro:
   200 00000129 4883EC08                    sub     rsp,8
   201 0000012D E866040000                  call    verificar_movimientos_zorro  ; Verifico si el zorro tiene movimientos disponibles
   202 00000132 4883C408                    add     rsp,8
   203 00000136 803C25[6A010000]4E          cmp     byte [input_valido], 'N'  ; Si no tiene movimientos v√°lidos, las ocas ganan
   204 0000013E 0F84ED080000                je      ganador_ocas
   205 00000144 4883EC08                    sub     rsp,8
   206 00000148 E8B0020000                  call    pedir_movimiento_zorro  ;llamo a la subrutina para pedir movimiento del zorro
   207 0000014D 4883C408                    add     rsp,8
   208 00000151 803C25[73010000]66          cmp     byte [input_zorro], 'f' ; Verificar si se desea abandonar la partida
   209 00000159 0F8412080000                je      guardar_partida
   210 0000015F 4883EC08                    sub     rsp,8
   211 00000163 E8C4020000                  call    mover_zorro              ;llamo a la subrutina para mover al zorro
   212 00000168 4883C408                    add     rsp,8
   213 0000016C 803C25[6A010000]52          cmp     byte [input_valido], 'R'  ;comparo si el movimiento del zorro fue inv√°lido
   214 00000174 74B3                        je      turno_zorro              ;si fue inv√°lido, vuelvo a pedir movimiento del zorro
   215 00000176 803C25[E2010000]01          cmp     byte [comio_oca], TURNO_ZORRO      ; Si comi√≥ una oca, no cambiar de turno
   216 0000017E 7444                        je      continuar_juego
   217 00000180 C60425[E1010000]02          mov     byte [turno], TURNO_OCAS          ;si fue v√°lido y no comi√≥ oca, cambio el turno a las ocas
   218 00000188 EB3A                        jmp     continuar_juego          ;voy a la etiqueta continuar_juego
   219                                  
   220                                  turno_ocas:
   221 0000018A 4883EC08                    sub     rsp,8
   222 0000018E E88C050000                  call    pedir_movimiento_oca     ;llamo a la subrutina para pedir movimiento de la oca
   223 00000193 4883C408                    add     rsp,8
   224 00000197 803C25[5E010000]66          cmp     byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   225 0000019F 0F84CC070000                je      guardar_partida
   226 000001A5 4883EC08                    sub     rsp,8
   227 000001A9 E818060000                  call    mover_oca                ;llamo a la subrutina para mover la oca
   228 000001AE 4883C408                    add     rsp,8
   229 000001B2 803C25[6A010000]52          cmp     byte [input_valido], 'R'  ;comparo si el movimiento de la oca fue inv√°lido
   230 000001BA 74CE                        je      turno_ocas               ;si fue inv√°lido, vuelvo a pedir movimiento de la oca
   231 000001BC C60425[E1010000]01          mov     byte [turno], TURNO_ZORRO          ;si fue v√°lido, cambio el turno al zorro
   232                                  
   233                                  continuar_juego:
   234 000001C4 4883EC08                    sub     rsp,8
   235 000001C8 E807010000                  call    construir_tablero       ;reconstruyo el tablero despu√©s de cada turno
   236 000001CD 4883C408                    add     rsp,8
   237 000001D1 4883EC08                    sub     rsp,8
   238 000001D5 E8D5010000                  call    imprimir_tablero        ;imprimo el tablero despu√©s de cada turno
   239 000001DA 4883C408                    add     rsp,8
   240 000001DE E937FFFFFF                  jmp     loop_juego              ;vuelvo al inicio del bucle del juego
   241                                  
   242 000001E3 C3                          ret
   243                                  
   244                                  ingresar_nombres_y_simbolos_jugadores:
   245 000001E4 48BF-                       mov     rdi, mensaje_ingresar_j1   
   245 000001E6 [1B02000000000000] 
   246                                      mPuts
     4 000001EE 4883EC08            <1>  sub rsp,8
     5 000001F2 E8(00000000)        <1>  call puts
     6 000001F7 4883C408            <1>  add rsp,8
   247 000001FB 48BF-                       mov     rdi, nombre_jugador1              ; guardo el nombre de cada jugador
   247 000001FD [7D01000000000000] 
   248                                      mGets
    10 00000205 4883EC08            <1>  sub rsp,8
    11 00000209 E8(00000000)        <1>  call gets
    12 0000020E 4883C408            <1>  add rsp,8
   249 00000212 48BF-                       mov     rdi, mensaje_ingresar_j2
   249 00000214 [4502000000000000] 
   250                                      mPuts
     4 0000021C 4883EC08            <1>  sub rsp,8
     5 00000220 E8(00000000)        <1>  call puts
     6 00000225 4883C408            <1>  add rsp,8
   251 00000229 48BF-                       mov     rdi, nombre_jugador2
   251 0000022B [AF01000000000000] 
   252                                      mGets
    10 00000233 4883EC08            <1>  sub rsp,8
    11 00000237 E8(00000000)        <1>  call gets
    12 0000023C 4883C408            <1>  add rsp,8
   253 00000240 48BF-                       mov     rdi, mensaje_ingresar_simbolo_zorro
   253 00000242 [6E02000000000000] 
   254                                      mPuts
     4 0000024A 4883EC08            <1>  sub rsp,8
     5 0000024E E8(00000000)        <1>  call puts
     6 00000253 4883C408            <1>  add rsp,8
   255 00000257 48BF-                       mov     rdi, simbolo_zorro
   255 00000259 [3700000000000000] 
   256 00000261 48BE-                       mov     rsi, simbolo_zorro
   256 00000263 [3700000000000000] 
   257                                      mGets
    10 0000026B 4883EC08            <1>  sub rsp,8
    11 0000026F E8(00000000)        <1>  call gets
    12 00000274 4883C408            <1>  add rsp,8
   258 00000278 803C25[37000000]00          cmp     byte [simbolo_zorro], 0   ; verifico si se presiono enter
   259 00000280 7508                        jne     skip_default_zorro        ; si no es enter, se utiliza el del usuario que se guardo en simbolo_zorro
   260 00000282 C60425[37000000]58          mov     byte [simbolo_zorro], 'X' ; se asigna el s√≠mbolo por defecto para el zorro, pisando en caso de enter
   261                                  skip_default_zorro:
   262 0000028A 48BF-                       mov     rdi, mensaje_ingresar_simbolo_oca
   262 0000028C [B002000000000000] 
   263                                      mPuts
     4 00000294 4883EC08            <1>  sub rsp,8
     5 00000298 E8(00000000)        <1>  call puts
     6 0000029D 4883C408            <1>  add rsp,8
   264 000002A1 48BF-                       mov     rdi, simbolo_oca
   264 000002A3 [3500000000000000] 
   265 000002AB 48BE-                       mov     rsi, simbolo_oca
   265 000002AD [3500000000000000] 
   266                                      mGets
    10 000002B5 4883EC08            <1>  sub rsp,8
    11 000002B9 E8(00000000)        <1>  call gets
    12 000002BE 4883C408            <1>  add rsp,8
   267 000002C2 803C25[35000000]00          cmp     byte [simbolo_oca], 0     ; verifico si se presiono enter
   268 000002CA 7508                        jne     construir_tablero          ; si no es enter, se utiliza el del usuario que se guardo en simbolo_oca
   269 000002CC C60425[35000000]4F          mov     byte [simbolo_oca], 'O'   ; se asigna el s√≠mbolo por defecto para las ocas, pisando en caso de enter
   270                                  
   271                                  
   272                                  construir_tablero:
   273 000002D4 BB01000000                  mov     rbx, 1            ; i que ser√° la fila, iniciada en 1 y no aumenta hasta no terminar las 7 columnas
   274 000002D9 41BA01000000                mov     r10, 1            ; j que ser√° la columna
   275 000002DF 48BF-                       mov     rdi, buffer       ; Apuntar al inicio del buffer
   275 000002E1 [0000000000000000] 
   276                                  
   277                                  imprimir_siguiente_caracter:   
   278 000002E9 4889D8                      mov     rax, rbx           ;i
   279 000002EC 48FFC8                      dec     rax
   280 000002EF 486BC007                    imul    rax, rax, 7       ; (i-1) * longfila
   281 000002F3 4C89D2                      mov     rdx, r10          ;j
   282 000002F6 48FFCA                      dec     rdx
   283 000002F9 4801D0                      add     rax, rdx          ; (i-1) * longfila + (j-1)
   284 000002FC 48BE-                       mov     rsi, tablero
   284 000002FE [0000000000000000] 
   285 00000306 4801C6                      add     rsi, rax          ; rsi apunta a la posici√≥n actual en el tablero
   286                                  
   287 00000309 803E00                      cmp     byte [rsi], 0      ;segun el numero en tablero imprimo un caracter distinto
   288 0000030C 740F                        je      imprimir_fuera_tablero                
   289 0000030E 803E02                      cmp     byte [rsi], 2           
   290 00000311 7458                        je      imprimir_espacio_vacio              
   291 00000313 803E01                      cmp     byte [rsi], 1         
   292 00000316 741F                        je      imprimir_oca
   293 00000318 803E03                      cmp     byte [rsi], 3
   294 0000031B 7434                        je      imprimir_zorro
   295                                  
   296                                  imprimir_fuera_tablero:
   297 0000031D 8A0425[3B000000]            mov     al, [simbolo_separador]
   298 00000324 AA                          stosb                               ;almaceno e incremento el rdi
   299 00000325 8A0425[33000000]            mov     al, [simbolo_fuera_tablero]
   300 0000032C AA                          stosb
   301 0000032D 8A0425[3B000000]            mov     al, [simbolo_separador]
   302 00000334 AA                          stosb
   303 00000335 EB4E                        jmp     continuar_construyendo_tablero
   304                                  
   305                                  imprimir_oca:
   306 00000337 8A0425[3B000000]            mov     al, [simbolo_separador]
   307 0000033E AA                          stosb
   308 0000033F 8A0425[35000000]            mov     al, [simbolo_oca]
   309 00000346 AA                          stosb
   310 00000347 8A0425[3B000000]            mov     al, [simbolo_separador]
   311 0000034E AA                          stosb
   312 0000034F EB34                        jmp     continuar_construyendo_tablero
   313                                  
   314                                  imprimir_zorro:
   315 00000351 8A0425[3B000000]            mov     al, [simbolo_separador]
   316 00000358 AA                          stosb
   317 00000359 8A0425[37000000]            mov     al, [simbolo_zorro]
   318 00000360 AA                          stosb
   319 00000361 8A0425[3B000000]            mov     al, [simbolo_separador]
   320 00000368 AA                          stosb
   321 00000369 EB1A                        jmp     continuar_construyendo_tablero
   322                                  
   323                                  imprimir_espacio_vacio:
   324 0000036B 8A0425[3B000000]            mov     al, [simbolo_separador]
   325 00000372 AA                          stosb
   326 00000373 8A0425[39000000]            mov     al, [simbolo_espacio_vacio]
   327 0000037A AA                          stosb
   328 0000037B 8A0425[3B000000]            mov     al, [simbolo_separador]
   329 00000382 AA                          stosb
   330 00000383 EB00                        jmp     continuar_construyendo_tablero
   331                                  
   332                                  continuar_construyendo_tablero:
   333 00000385 49FFC2                      inc     r10                ; Incrementar en uno para tener la siguiente columna
   334 00000388 4983FA08                    cmp     r10, 8             ; Si no llegu√© a la columna 7, construyo el siguiente elemento de la misma fila              
   335 0000038C 0F8C57FFFFFF                jl      imprimir_siguiente_caracter       
   336                                  
   337                                      ; A√±adir un salto de l√≠nea al final de la fila
   338 00000392 8A0425[31000000]            mov     al, [salto_linea]
   339 00000399 AA                          stosb
   340 0000039A 41BA01000000                mov     r10, 1
   341 000003A0 48FFC3                      inc     rbx                ; Incremento en uno la fila (siguiente fila)
   342 000003A3 4883FB08                    cmp     rbx, 8             ; Si llegu√© a la fila 7, termino la construcci√≥n
   343 000003A7 7405                        je      fin_construir_tablero
   344                                  
   345 000003A9 E93BFFFFFF                  jmp     imprimir_siguiente_caracter
   346                                  
   347                                  fin_construir_tablero:
   348 000003AE C3                          ret
   349                                  
   350                                  imprimir_tablero:
   351 000003AF 48BF-                       mov     rdi, buffer
   351 000003B1 [0000000000000000] 
   352                                      mPuts
     4 000003B9 4883EC08            <1>  sub rsp,8
     5 000003BD E8(00000000)        <1>  call puts
     6 000003C2 4883C408            <1>  add rsp,8
   353 000003C6 48BF-                       mov rdi, mensaje_ocas_eliminadas
   353 000003C8 [2203000000000000] 
   354 000003D0 488B3425[38030000]          mov rsi, [cantidad_ocas_eliminadas]
   355                                      mPrintF
    16 000003D8 4883EC08            <1>  sub rsp,8
    17 000003DC E8(00000000)        <1>  call printf
    18 000003E1 4883C408            <1>  add rsp,8
   356 000003E5 48BF-                       mov rdi, salto_linea
   356 000003E7 [3100000000000000] 
   357                                      mPuts
     4 000003EF 4883EC08            <1>  sub rsp,8
     5 000003F3 E8(00000000)        <1>  call puts
     6 000003F8 4883C408            <1>  add rsp,8
   358 000003FC C3                          ret
   359                                  
   360                                  pedir_movimiento_zorro:
   361 000003FD 48BF-                       mov rdi, mensaje_mover_zorro
   361 000003FF [3D01000000000000] 
   362                                      mPuts
     4 00000407 4883EC08            <1>  sub rsp,8
     5 0000040B E8(00000000)        <1>  call puts
     6 00000410 4883C408            <1>  add rsp,8
   363 00000414 48BF-                       mov rdi, input_zorro
   363 00000416 [7301000000000000] 
   364                                      mGets
    10 0000041E 4883EC08            <1>  sub rsp,8
    11 00000422 E8(00000000)        <1>  call gets
    12 00000427 4883C408            <1>  add rsp,8
   365 0000042B C3                          ret
   366                                  
   367                                  mover_zorro:
   368 0000042C 48BE-                       mov rsi, tablero
   368 0000042E [0000000000000000] 
   369 00000436 B931000000                  mov rcx, 49
   370                                  
   371                                  buscar_zorro:
   372 0000043B AC                          lodsb       ;apunto al siguiente y lo cargo en al
   373 0000043C 3C03                        cmp al, 3
   374 0000043E 7403                        je zorro_encontrado
   375 00000440 E2F9                        loop buscar_zorro
   376 00000442 C3                          ret
   377                                  
   378                                  zorro_encontrado:
   379 00000443 4889F3                      mov rbx, rsi   ; Mueve el valor del registro rsi (posici√≥n actual del zorro) a rbx
   380 00000446 48FFCB                      dec rbx         ; Decrementa rbx en 1 para apuntar correctamente a la posici√≥n actual del zorro
   381                                  
   382 00000449 48BF-                       mov rdi, input_zorro
   382 0000044B [7301000000000000] 
   383 00000453 8A07                        mov al, [rdi]
   384 00000455 3C77                        cmp al, 'w'
   385 00000457 7439                        je mover_zorro_arriba
   386 00000459 3C73                        cmp al, 's'
   387 0000045B 7442                        je mover_zorro_abajo
   388 0000045D 3C61                        cmp al, 'a'
   389 0000045F 7449                        je mover_zorro_izquierda
   390 00000461 3C64                        cmp al, 'd'
   391 00000463 7451                        je mover_zorro_derecha
   392 00000465 3C65                        cmp al, 'e'
   393 00000467 7457                        je mover_zorro_arriba_derecha
   394 00000469 3C71                        cmp al, 'q'
   395 0000046B 7460                        je mover_zorro_arriba_izquierda
   396 0000046D 3C7A                        cmp al, 'z'
   397 0000046F 7469                        je mover_zorro_abajo_izquierda
   398 00000471 3C78                        cmp al, 'x'
   399 00000473 7470                        je mover_zorro_abajo_derecha
   400 00000475 48BF-                       mov rdi, mensaje_error_input
   400 00000477 [0401000000000000] 
   401                                      mPuts
     4 0000047F 4883EC08            <1>  sub rsp,8
     5 00000483 E8(00000000)        <1>  call puts
     6 00000488 4883C408            <1>  add rsp,8
   402 0000048C E998FCFFFF                  jmp turno_zorro
   403 00000491 C3                          ret
   404                                  
   405                                  mover_zorro_arriba:
   406 00000492 4883EB07                    sub rbx, 7                  ; resto 7 a rbx para mover al zorro una fila hacia arriba
   407 00000496 48C7C7F9FFFFFF              mov rdi, -7                 ; la direcci√≥n del desplazamiento es -7
   408 0000049D EB51                        jmp validar_movimiento_zorro 
   409                                  
   410                                  mover_zorro_abajo:
   411 0000049F 4883C307                    add rbx, 7                  ; sumo 7 a rbx para mover al zorro una fila hacia abajo
   412 000004A3 BF07000000                  mov rdi, 7                  ; la direcci√≥n del desplazamiento es 7
   413 000004A8 EB46                        jmp validar_movimiento_zorro
   414                                  
   415                                  mover_zorro_izquierda:
   416 000004AA 48FFCB                      dec rbx                     ; resto 1 a rbx para mover al zorro una columna a la izquierda
   417 000004AD 48C7C7FFFFFFFF              mov rdi, -1                 ; la direcci√≥n del desplazamiento es -1
   418 000004B4 EB3A                        jmp validar_movimiento_zorro
   419                                  
   420                                  mover_zorro_derecha:
   421 000004B6 48FFC3                      inc rbx                     ; sumo 1 a rbx para mover al zorro una columna a la derecha
   422 000004B9 BF01000000                  mov rdi, 1                  ; la direcci√≥n del desplazamiento es 1
   423 000004BE EB30                        jmp validar_movimiento_zorro
   424                                  
   425                                  mover_zorro_arriba_derecha:
   426 000004C0 4883EB06                    sub rbx, 6                  ; resto 6 a rbx para mover al zorro en diagonal arriba derecha
   427 000004C4 48C7C7FAFFFFFF              mov rdi, -6                 ; la direcci√≥n del desplazamiento es -6
   428 000004CB EB23                        jmp validar_movimiento_zorro
   429                                  
   430                                  mover_zorro_arriba_izquierda:
   431 000004CD 4883EB08                    sub rbx, 8                  ; resto 8 a rbx para mover al zorro en diagonal arriba izquierda
   432 000004D1 48C7C7F8FFFFFF              mov rdi, -8                 ; la direcci√≥n del desplazamiento es -8
   433 000004D8 EB16                        jmp validar_movimiento_zorro
   434                                  
   435                                  mover_zorro_abajo_izquierda:
   436 000004DA 4883C306                    add rbx, 6                  ; sumo 6 a rbx para mover al zorro en diagonal abajo izquierda
   437 000004DE BF06000000                  mov rdi, 6                  ; la direcci√≥n del desplazamiento es 6
   438 000004E3 EB0B                        jmp validar_movimiento_zorro
   439                                  
   440                                  mover_zorro_abajo_derecha:
   441 000004E5 4883C308                    add rbx, 8                  ; sumo 8 a rbx para mover al zorro en diagonal abajo derecha
   442 000004E9 BF08000000                  mov rdi, 8                  ; la direcci√≥n del desplazamiento es 8
   443 000004EE EB00                        jmp validar_movimiento_zorro
   444                                  
   445                                  validar_movimiento_zorro:
   446 000004F0 803B02                      cmp byte [rbx], 2           ; Comparar destino con una posici√≥n vac√≠a (2)
   447 000004F3 751D                        jne verificar_si_oca       ; Si no est√° vac√≠a, verificar si se puede comer una oca
   448 000004F5 C646FF02                    mov byte [rsi - 1], 2       ; Actualizar la posici√≥n anterior del zorro con 2 (vac√≠o)
   449 000004F9 C60303                      mov byte [rbx], 3           ; Colocar al zorro en la nueva posici√≥n
   450 000004FC C60425[E2010000]00          mov byte [comio_oca], 0     ; Indicar que no comi√≥ oca
   451 00000504 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue v√°lido
   452 0000050C E83B090000                  call    sumarEstadisticaMovimiento
   453 00000511 C3                          ret
   454                                  
   455                                  verificar_si_oca:
   456 00000512 803B01                      cmp byte [rbx], 1           ; Comparar destino con una oca (1)
   457 00000515 7561                        jne movimiento_invalido_zorro ; Si no es una oca, el movimiento es inv√°lido
   458 00000517 EB00                        jmp validar_comer_oca       ; Ir a validar si se puede comer la oca
   459                                  
   460                                  validar_comer_oca:
   461                                      ; Verificar si hay una oca en la posici√≥n intermedia
   462                                      ; RDI contiene la direcci√≥n del desplazamiento
   463 00000519 4889D8                      mov rax, rbx
   464 0000051C 4801F8                      add rax, rdi
   465 0000051F 803802                      cmp byte [rax], 2           ; Verificar si la posici√≥n de salto est√° vac√≠a
   466 00000522 7554                        jne movimiento_invalido_zorro
   467                                      ; Mover el zorro a la posici√≥n de salto
   468 00000524 C646FF02                    mov byte [rsi - 1], 2       ; Actualizar la posici√≥n anterior del zorro con 2 (vac√≠o)
   469 00000528 C60003                      mov byte [rax], 3           ; Colocar el zorro en la nueva posici√≥n de salto
   470                                      ; Borrar la oca que fue comida
   471 0000052B 4829F8                      sub rax, rdi
   472 0000052E C60002                      mov byte [rax], 2
   473 00000531 48830425[38030000]-         add qword [cantidad_ocas_eliminadas], 1 ;aumento en uno la cantidad de ocas eliminadas
   473 00000539 01                 
   474 0000053A 48833C25[38030000]-         cmp qword [cantidad_ocas_eliminadas], 12  ;si gana el zorro
   474 00000542 0C                 
   475 00000543 0F84C5040000                je ganador_zorro
   476 00000549 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue v√°lido
   477 00000551 C60425[E2010000]01          mov byte [comio_oca], 1     ; Indicar que el zorro comi√≥ una oca
   478                                      ; Reconstruir e imprimir el tablero para reflejar el estado actual
   479 00000559 4883EC08                    sub     rsp,8
   480 0000055D E872FDFFFF                  call    construir_tablero
   481 00000562 4883C408                    add     rsp,8
   482 00000566 4883EC08                    sub     rsp,8
   483 0000056A E840FEFFFF                  call    imprimir_tablero
   484 0000056F 4883C408                    add     rsp,8
   485 00000573 E9B1FBFFFF                  jmp turno_zorro             ; Continuar el turno del zorro
   486                                  
   487                                  movimiento_invalido_zorro:
   488 00000578 C60425[6A010000]52          mov byte [input_valido], 'R'
   489 00000580 48BF-                       mov rdi, mensaje_mov_invalido
   489 00000582 [F301000000000000] 
   490                                      mPuts
     4 0000058A 4883EC08            <1>  sub rsp,8
     5 0000058E E8(00000000)        <1>  call puts
     6 00000593 4883C408            <1>  add rsp,8
   491 00000597 C3                          ret
   492                                  
   493                                  verificar_movimientos_zorro:
   494 00000598 48BE-                       mov rsi, tablero
   494 0000059A [0000000000000000] 
   495 000005A2 B931000000                  mov rcx, 49
   496                                  
   497                                  buscar_zorro_verificacion_mov:
   498 000005A7 AC                          lodsb
   499 000005A8 3C03                        cmp al, 3
   500 000005AA 7403                        je zorro_encontrado_verificar
   501 000005AC E2F9                        loop buscar_zorro_verificacion_mov
   502 000005AE C3                          ret
   503                                  
   504                                  zorro_encontrado_verificar:
   505 000005AF 4889F3                      mov rbx, rsi   ; Mueve el valor del registro rsi (posici√≥n actual del zorro) a rbx
   506 000005B2 48FFCB                      dec rbx         ; Decrementa rbx en 1 para apuntar correctamente a la posici√≥n actual del zorro
   507                                  
   508                                      ; Verificar todas las direcciones alrededor del zorro (cercanas)
   509 000005B5 4889DF                      mov rdi, rbx
   510 000005B8 4883EF07                    sub rdi, 7
   511 000005BC E84F010000                  call verificar_casillero
   512 000005C1 803C25[6A010000]53          cmp byte [input_valido], 'S'
   513 000005C9 0F8447010000                je movimiento_valido
   514                                  
   515 000005CF 4889DF                      mov rdi, rbx
   516 000005D2 4883C707                    add rdi, 7
   517 000005D6 E835010000                  call verificar_casillero
   518 000005DB 803C25[6A010000]53          cmp byte [input_valido], 'S'
   519 000005E3 0F842D010000                je movimiento_valido
   520                                  
   521 000005E9 4889DF                      mov rdi, rbx
   522 000005EC 48FFCF                      dec rdi
   523 000005EF E81C010000                  call verificar_casillero
   524 000005F4 803C25[6A010000]53          cmp byte [input_valido], 'S'
   525 000005FC 0F8414010000                je movimiento_valido
   526                                  
   527 00000602 4889DF                      mov rdi, rbx
   528 00000605 48FFC7                      inc rdi
   529 00000608 E803010000                  call verificar_casillero
   530 0000060D 803C25[6A010000]53          cmp byte [input_valido], 'S'
   531 00000615 0F84FB000000                je movimiento_valido
   532                                  
   533 0000061B 4889DF                      mov rdi, rbx
   534 0000061E 4883EF06                    sub rdi, 6
   535 00000622 E8E9000000                  call verificar_casillero
   536 00000627 803C25[6A010000]53          cmp byte [input_valido], 'S'
   537 0000062F 0F84E1000000                je movimiento_valido
   538                                  
   539 00000635 4889DF                      mov rdi, rbx
   540 00000638 4883EF08                    sub rdi, 8
   541 0000063C E8CF000000                  call verificar_casillero
   542 00000641 803C25[6A010000]53          cmp byte [input_valido], 'S'
   543 00000649 0F84C7000000                je movimiento_valido
   544                                  
   545 0000064F 4889DF                      mov rdi, rbx
   546 00000652 4883C706                    add rdi, 6
   547 00000656 E8B5000000                  call verificar_casillero
   548 0000065B 803C25[6A010000]53          cmp byte [input_valido], 'S'
   549 00000663 0F84AD000000                je movimiento_valido
   550                                  
   551 00000669 4889DF                      mov rdi, rbx
   552 0000066C 4883C708                    add rdi, 8
   553 00000670 E89B000000                  call verificar_casillero
   554 00000675 803C25[6A010000]53          cmp byte [input_valido], 'S'
   555 0000067D 0F8493000000                je movimiento_valido
   556                                  
   557                                      ; Verificar las posiciones m√°s alejadas (dos espacios en cada direcci√≥n)
   558 00000683 4889DF                      mov rdi, rbx
   559 00000686 4883EF0E                    sub rdi, 14  ; dos espacios hacia arriba-izquierda
   560 0000068A E881000000                  call verificar_casillero
   561 0000068F 803C25[6A010000]53          cmp byte [input_valido], 'S'
   562 00000697 747D                        je movimiento_valido
   563                                  
   564 00000699 4889DF                      mov rdi, rbx
   565 0000069C 4883EF0C                    sub rdi, 12  ; dos espacios hacia arriba-derecha
   566 000006A0 E86B000000                  call verificar_casillero
   567 000006A5 803C25[6A010000]53          cmp byte [input_valido], 'S'
   568 000006AD 7467                        je movimiento_valido
   569                                  
   570 000006AF 4889DF                      mov rdi, rbx
   571 000006B2 4883C70C                    add rdi, 12  ; dos espacios hacia abajo-izquierda
   572 000006B6 E855000000                  call verificar_casillero
   573 000006BB 803C25[6A010000]53          cmp byte [input_valido], 'S'
   574 000006C3 7451                        je movimiento_valido
   575                                  
   576 000006C5 4889DF                      mov rdi, rbx
   577 000006C8 4883C70E                    add rdi, 14  ; dos espacios hacia abajo-derecha
   578 000006CC E83F000000                  call verificar_casillero
   579 000006D1 803C25[6A010000]53          cmp byte [input_valido], 'S'
   580 000006D9 743B                        je movimiento_valido
   581                                  
   582 000006DB 4889DF                      mov rdi, rbx
   583 000006DE 4883EF0E                    sub rdi, 14  ; dos espacios hacia arriba
   584 000006E2 E829000000                  call verificar_casillero
   585 000006E7 803C25[6A010000]53          cmp byte [input_valido], 'S'
   586 000006EF 7425                        je movimiento_valido
   587                                  
   588 000006F1 4889DF                      mov rdi, rbx
   589 000006F4 4883C70E                    add rdi, 14  ; dos espacios hacia abajo
   590 000006F8 E813000000                  call verificar_casillero
   591 000006FD 803C25[6A010000]53          cmp byte [input_valido], 'S'
   592 00000705 740F                        je movimiento_valido
   593                                  
   594                                      ; Si no hay movimientos v√°lidos
   595 00000707 C60425[6A010000]4E          mov byte [input_valido], 'N'
   596 0000070F C3                          ret
   597                                  
   598                                  verificar_casillero:
   599 00000710 803F02                      cmp byte [rdi], 2  ; Verificar si el casillero es vac√≠o (2)
   600 00000713 7401                        je movimiento_valido
   601 00000715 C3                          ret
   602                                  
   603                                  movimiento_valido:
   604 00000716 C60425[6A010000]53          mov byte [input_valido], 'S'
   605 0000071E C3                          ret
   606                                  
   607                                  pedir_movimiento_oca:
   608 0000071F 48BF-                       mov rdi, mensaje_mover_oca
   608 00000721 [3D00000000000000] 
   609                                      mPuts
     4 00000729 4883EC08            <1>  sub rsp,8
     5 0000072D E8(00000000)        <1>  call puts
     6 00000732 4883C408            <1>  add rsp,8
   610 00000736 48BF-                       mov rdi, input_oca
   610 00000738 [5E01000000000000] 
   611                                      mGets
    10 00000740 4883EC08            <1>  sub rsp,8
    11 00000744 E8(00000000)        <1>  call gets
    12 00000749 4883C408            <1>  add rsp,8
   612 0000074D 803C25[5E010000]66          cmp byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   613 00000755 0F8416020000                je guardar_partida
   614                                      ; Validar las coordenadas de la oca
   615 0000075B 4883EC08                    sub rsp,8
   616 0000075F E8F5000000                  call validar_coordenadas_oca
   617 00000764 4883C408                    add rsp,8
   618 00000768 803C25[6A010000]53          cmp byte [input_valido], 'S'
   619 00000770 7425                        je pedir_direccion_oca
   620                                  
   621 00000772 48BF-                       mov rdi, mensaje_error_input
   621 00000774 [0401000000000000] 
   622                                      mPuts
     4 0000077C 4883EC08            <1>  sub rsp,8
     5 00000780 E8(00000000)        <1>  call puts
     6 00000785 4883C408            <1>  add rsp,8
   623 00000789 4883EC08                    sub rsp,8
   624 0000078D E88DFFFFFF                  call pedir_movimiento_oca
   625 00000792 4883C408                    add rsp,8
   626 00000796 C3                          ret
   627                                  
   628                                  pedir_direccion_oca:
   629 00000797 48BF-                       mov rdi, mensaje_mover_oca_direccion
   629 00000799 [9F00000000000000] 
   630                                      mPuts
     4 000007A1 4883EC08            <1>  sub rsp,8
     5 000007A5 E8(00000000)        <1>  call puts
     6 000007AA 4883C408            <1>  add rsp,8
   631 000007AE 48BF-                       mov rdi, input_oca
   631 000007B0 [5E01000000000000] 
   632                                      mGets
    10 000007B8 4883EC08            <1>  sub rsp,8
    11 000007BC E8(00000000)        <1>  call gets
    12 000007C1 4883C408            <1>  add rsp,8
   633 000007C5 C3                          ret
   634                                  
   635                                  mover_oca:
   636 000007C6 48BE-                       mov rsi, tablero
   636 000007C8 [0000000000000000] 
   637                                      ; Calcular la posici√≥n en el tablero
   638 000007D0 488B1C25[6B010000]          mov rbx, [posicion_oca]
   639                                      ; Leer la direcci√≥n de movimiento
   640 000007D8 48BF-                       mov rdi, input_oca
   640 000007DA [5E01000000000000] 
   641 000007E2 8A07                        mov al, [rdi]
   642 000007E4 3C73                        cmp al, 's'
   643 000007E6 7425                        je mover_oca_abajo
   644 000007E8 3C61                        cmp al, 'a'
   645 000007EA 7427                        je mover_oca_izquierda
   646 000007EC 3C64                        cmp al, 'd'
   647 000007EE 7428                        je mover_oca_derecha
   648 000007F0 48BF-                       mov rdi, mensaje_error_input
   648 000007F2 [0401000000000000] 
   649                                      mPuts
     4 000007FA 4883EC08            <1>  sub rsp,8
     5 000007FE E8(00000000)        <1>  call puts
     6 00000803 4883C408            <1>  add rsp,8
   650 00000807 E97EF9FFFF                  jmp turno_ocas
   651 0000080C C3                          ret
   652                                  
   653                                  mover_oca_abajo:
   654 0000080D 4883C307                    add rbx, 7
   655 00000811 EB0A                        jmp validar_movimiento_oca
   656                                  
   657                                  mover_oca_izquierda:
   658 00000813 48FFCB                      dec rbx
   659 00000816 EB05                        jmp validar_movimiento_oca
   660                                  
   661                                  mover_oca_derecha:
   662 00000818 48FFC3                      inc rbx
   663 0000081B EB00                        jmp validar_movimiento_oca
   664                                  
   665                                  validar_movimiento_oca:
   666 0000081D 803B02                      cmp byte [rbx], 2
   667 00000820 7517                        jne movimiento_invalido_oca
   668 00000822 488B3425[6B010000]          mov rsi, [posicion_oca]
   669 0000082A C60602                      mov byte [rsi], 2          ; Actualizar la posici√≥n anterior de la oca con 2 (vac√≠o)
   670 0000082D C60301                      mov byte [rbx], 1          ; Colocar la oca en la nueva posici√≥n
   671 00000830 C60425[6A010000]53          mov byte [input_valido], 'S' ; Indicar que el movimiento fue v√°lido
   672 00000838 C3                          ret
   673                                  
   674                                  movimiento_invalido_oca:
   675 00000839 C60425[6A010000]52          mov byte [input_valido], 'R'
   676 00000841 48BF-                       mov rdi, mensaje_mov_invalido
   676 00000843 [F301000000000000] 
   677                                      mPuts
     4 0000084B 4883EC08            <1>  sub rsp,8
     5 0000084F E8(00000000)        <1>  call puts
     6 00000854 4883C408            <1>  add rsp,8
   678 00000858 C3                          ret
   679                                  
   680                                  validar_coordenadas_oca:
   681 00000859 C60425[6A010000]4E          mov byte [input_valido], 'N'
   682 00000861 48BF-                       mov rdi, input_oca
   682 00000863 [5E01000000000000] 
   683 0000086B 48BE-                       mov rsi, formatInputFilCol
   683 0000086D [FA00000000000000] 
   684 00000875 48BA-                       mov rdx, fila
   684 00000877 [6801000000000000] 
   685 0000087F 48B9-                       mov rcx, columna
   685 00000881 [6901000000000000] 
   686 00000889 4883EC08                    sub rsp,8
   687 0000088D E8(00000000)                call sscanf
   688 00000892 4883C408                    add rsp,8
   689                                  
   690 00000896 4883F802                    cmp rax, 2
   691 0000089A 7C69                        jl coordenadas_invalidas
   692                                  
   693 0000089C 803C25[68010000]01          cmp byte [fila], 1
   694 000008A4 7C5F                        jl coordenadas_invalidas
   695 000008A6 803C25[68010000]07          cmp byte [fila], 7
   696 000008AE 7F55                        jg coordenadas_invalidas
   697                                  
   698 000008B0 803C25[69010000]01          cmp byte [columna], 1
   699 000008B8 7C4B                        jl coordenadas_invalidas
   700 000008BA 803C25[69010000]07          cmp byte [columna], 7
   701 000008C2 7F41                        jg coordenadas_invalidas
   702                                  
   703                                      ; Calcular la posici√≥n en el tablero
   704 000008C4 660FB60425-                 movzx ax, byte [fila]   ;cargo en ax la fila
   704 000008C9 [68010000]         
   705 000008CD 6683E801                    sub ax, 1               ;para indexar en 0 
   706 000008D1 666BC007                    imul ax, 7              ;desplazamiento en fila
   707 000008D5 660FB61425-                 movzx dx, byte [columna]    ;cargo en dx la columna
   707 000008DA [69010000]         
   708 000008DE 6683EA01                    sub dx, 1   
   709 000008E2 6601D0                      add ax, dx              ;desplazamiento total
   710 000008E5 4889C3                      mov rbx, rax    
   711 000008E8 4881C3[00000000]            add rbx, tablero          ;posicion en el tablero
   712                                  
   713                                      ; Verificar si hay una oca en la posici√≥n ingresada
   714 000008EF 803B01                      cmp byte [rbx], 1
   715 000008F2 7511                        jne coordenadas_invalidas
   716                                  
   717 000008F4 C60425[6A010000]53          mov byte [input_valido], 'S'
   718 000008FC 48891C25[6B010000]          mov [posicion_oca], rbx    ; Guardar la posici√≥n de la oca
   719 00000904 C3                          ret
   720                                  
   721                                  coordenadas_invalidas:
   722 00000905 48BF-                       mov rdi, mensaje_error_input
   722 00000907 [0401000000000000] 
   723                                      mPuts
     4 0000090F 4883EC08            <1>  sub rsp,8
     5 00000913 E8(00000000)        <1>  call puts
     6 00000918 4883C408            <1>  add rsp,8
   724 0000091C C3                          ret
   725                                  
   726                                  errorApertura:
   727 0000091D 48BF-                       mov   rdi, msgErrorAp
   727 0000091F [5604000000000000] 
   728                                      mPuts
     4 00000927 4883EC08            <1>  sub rsp,8
     5 0000092B E8(00000000)        <1>  call puts
     6 00000930 4883C408            <1>  add rsp,8
   729 00000934 E934010000                  jmp   fin_juego
   730                                  
   731                                  errorLeyendoArchivo:
   732 00000939 48BF-                       mov   rdi, msgErrorLectura
   732 0000093B [8104000000000000] 
   733                                      mPuts
     4 00000943 4883EC08            <1>  sub rsp,8
     5 00000947 E8(00000000)        <1>  call puts
     6 0000094C 4883C408            <1>  add rsp,8
   734 00000950 E99EF7FFFF                  jmp   continuar_jugando
   735                                  
   736                                  errorEscritura:
   737 00000955 48BF-                       mov   rdi, msgErrorEscritura
   737 00000957 [F204000000000000] 
   738                                      mPuts
     4 0000095F 4883EC08            <1>  sub rsp,8
     5 00000963 E8(00000000)        <1>  call puts
     6 00000968 4883C408            <1>  add rsp,8
   739 0000096C E9FC000000                  jmp   fin_juego
   740                                  
   741                                  guardar_partida:
   742 00000971 48BF-                       mov     rdi, archivoTablero
   742 00000973 [3504000000000000] 
   743 0000097B E843010000                  call    abrirEscrituraArchivoTablero
   744                                  
   745 00000980 48BF-                       mov     rdi, msgGuardarPartida
   745 00000982 [5305000000000000] 
   746                                      mPuts
     4 0000098A 4883EC08            <1>  sub rsp,8
     5 0000098E E8(00000000)        <1>  call puts
     6 00000993 4883C408            <1>  add rsp,8
   747 00000997 48BF-                       mov     rdi, respuestaPartidaGuardada
   747 00000999 [FF01000000000000] 
   748                                      mGets
    10 000009A1 4883EC08            <1>  sub rsp,8
    11 000009A5 E8(00000000)        <1>  call gets
    12 000009AA 4883C408            <1>  add rsp,8
   749 000009AE B902000000                  mov     rcx, 2
   750 000009B3 488D3425[93050000]          lea     rsi, [respuestaSi]
   751 000009BB 488D3C25[FF010000]          lea     rdi, [respuestaPartidaGuardada]
   752 000009C3 F3A6                        repe    cmpsb
   753 000009C5 0F8589000000                jne     noGuardarPartida
   754                                  
   755 000009CB E859020000                  call    convertirTableroAStr
   756 000009D0 E857010000                  call    escribirArchivoTablero
   757 000009D5 4883F800                    cmp     rax, 0
   758 000009D9 0F8E76FFFFFF                jle     errorEscritura
   759 000009DF E878010000                  call    cerrarArchivoTablero
   760                                  
   761 000009E4 48BF-                       mov     rdi, archivoEstadisticas
   761 000009E6 [4504000000000000] 
   762 000009EE E8E8000000                  call    abrirEscrituraArchivoEstadisticas
   763 000009F3 E883030000                  call    convertirEstadisticasAStr
   764 000009F8 E847010000                  call    escribirArchivoEstadisticas
   765 000009FD 4883F800                    cmp     rax, 0
   766 00000A01 0F8E4EFFFFFF                jle     errorEscritura
   767 00000A07 E85E010000                  call    cerrarArchivoEstadisticas
   768                                  
   769 00000A0C EB5F                        jmp     fin_juego
   770                                  ganador_zorro:
   771                                      ; Imprimir el mensaje del ganador y finalizar el juego
   772 00000A0E 48BF-                       mov rdi, mensaje_ganador
   772 00000A10 [F202000000000000] 
   773 00000A18 48BE-                       mov rsi, nombre_jugador1
   773 00000A1A [7D01000000000000] 
   774                                      mPrintF
    16 00000A22 4883EC08            <1>  sub rsp,8
    17 00000A26 E8(00000000)        <1>  call printf
    18 00000A2B 4883C408            <1>  add rsp,8
   775 00000A2F EB3C                        jmp fin_juego
   776                                  
   777                                  ganador_ocas:
   778                                      ; Imprimir el mensaje del ganador (ocas) y finalizar el juego
   779 00000A31 48BF-                       mov rdi, mensaje_ganador
   779 00000A33 [F202000000000000] 
   780 00000A3B 48BE-                       mov rsi, nombre_jugador2
   780 00000A3D [AF01000000000000] 
   781                                      mPrintF
    16 00000A45 4883EC08            <1>  sub rsp,8
    17 00000A49 E8(00000000)        <1>  call printf
    18 00000A4E 4883C408            <1>  add rsp,8
   782 00000A52 EB19                        jmp fin_juego
   783                                  
   784                                  noGuardarPartida:
   785 00000A54 E803010000                  call    cerrarArchivoTablero
   786                                      ;Hago esto para que el contenido del archivo se elimine por completo
   787 00000A59 48BF-                       mov     rdi, archivoEstadisticas
   787 00000A5B [4504000000000000] 
   788 00000A63 E873000000                  call    abrirEscrituraArchivoEstadisticas
   789 00000A68 E8FD000000                  call    cerrarArchivoEstadisticas
   790                                  fin_juego:
   791 00000A6D E84B040000                  call    mostrar_estadisticas
   792 00000A72 48BF-                       mov     rdi, mensaje_fin_juego  ; Imprimir el mensaje de fin del juego
   792 00000A74 [0503000000000000] 
   793                                      mPuts
     4 00000A7C 4883EC08            <1>  sub rsp,8
     5 00000A80 E8(00000000)        <1>  call puts
     6 00000A85 4883C408            <1>  add rsp,8
   794 00000A89 B83C000000                  mov     eax, 60                 ; syscall: exit
   795 00000A8E 31FF                        xor     edi, edi                ; status: 0
   796 00000A90 0F05                        syscall
   797 00000A92 C3                      ret
   798                                  
   799                                  
   800                                  
   801                                  ;---------  RUTINAS INTERNAS -----------
   802                                  abrirLecturaArchivoTablero:
   803                                    
   804 00000A93 48BE-                       mov   rsi, modoAperturaRead
   804 00000A95 [4104000000000000] 
   805 00000A9D E8(00000000)                call  fopen
   806                                  
   807 00000AA2 48890425[EB010000]          mov   qword[handleArchTablero],rax
   808 00000AAA C3                      ret
   809                                  
   810                                  abrirLecturaArchivoEstadisticas:
   811                                    
   812 00000AAB 48BE-                       mov   rsi, modoAperturaRead
   812 00000AAD [4104000000000000] 
   813 00000AB5 E8(00000000)                call  fopen
   814                                  
   815 00000ABA 48890425[F3010000]          mov   qword[handleArchEstadisticas],rax
   816 00000AC2 C3                      ret
   817                                  
   818                                  abrirEscrituraArchivoTablero:
   819                                    
   820 00000AC3 48BE-                       mov   rsi, modoAperturaWrite
   820 00000AC5 [4304000000000000] 
   821 00000ACD E8(00000000)                call  fopen
   822                                  
   823 00000AD2 48890425[EB010000]          mov   qword[handleArchTablero],rax
   824 00000ADA C3                      ret
   825                                  
   826                                  
   827                                  abrirEscrituraArchivoEstadisticas:
   828                                    
   829 00000ADB 48BE-                       mov   rsi, modoAperturaWrite
   829 00000ADD [4304000000000000] 
   830 00000AE5 E8(00000000)                call  fopen
   831                                  
   832 00000AEA 48890425[F3010000]          mov   qword[handleArchEstadisticas],rax
   833 00000AF2 C3                      ret
   834                                  
   835                                  leerArchivoTablero:
   836                                  
   837 00000AF3 48BF-                       mov   rdi, registro
   837 00000AF5 [9605000000000000] 
   838 00000AFD BE33000000                  mov   rsi, 51
   839 00000B02 488B1425[EB010000]          mov   rdx, [handleArchTablero]
   840 00000B0A E8(00000000)                call  fgets
   841                                  
   842 00000B0F C3                      ret
   843                                  
   844                                  leerArchivoEstadisticas:
   845 00000B10 48BF-                       mov     rdi, estadisticas
   845 00000B12 [FC05000000000000] 
   846 00000B1A BE0B000000                  mov     rsi, 11
   847 00000B1F 488B1425[F3010000]          mov     rdx, [handleArchEstadisticas]
   848 00000B27 E8(00000000)                call    fgets
   849                                  
   850                                  escribirArchivoTablero:
   851                                  
   852 00000B2C 48BF-                       mov   rdi, tableroStr
   852 00000B2E [C905000000000000] 
   853 00000B36 488B3425[EB010000]          mov   rsi, [handleArchTablero]
   854 00000B3E E8(00000000)                call  fputs
   855 00000B43 C3                      ret
   856                                  
   857                                  escribirArchivoEstadisticas:
   858 00000B44 48BF-                       mov   rdi, estadisticas
   858 00000B46 [FC05000000000000] 
   859 00000B4E 488B3425[F3010000]          mov   rsi, [handleArchEstadisticas]
   860 00000B56 E8(00000000)                call  fputs
   861 00000B5B C3                      ret
   862                                  
   863                                  cerrarArchivoTablero:
   864                                  
   865 00000B5C 488B3C25[EB010000]          mov   rdi, [handleArchTablero]
   866 00000B64 E8(00000000)                call  fclose
   867 00000B69 C3                      ret
   868                                  
   869                                  cerrarArchivoEstadisticas:
   870                                  
   871 00000B6A 488B3C25[F3010000]          mov   rdi, [handleArchEstadisticas]
   872 00000B72 E8(00000000)                call  fclose
   873 00000B77 C3                      ret
   874                                  
   875                                  ;---------------------------------
   876                                  copiarRegistroATablero:
   877                                  
   878 00000B78 C60425[FC010000]00          mov   byte[posicionVect], 0
   879 00000B80 C60425[FD010000]01          mov   byte[posicionMatFil], 1
   880 00000B88 C60425[FE010000]01          mov   byte[posicionMatCol], 1
   881                                  
   882                                  recorroReg:
   883                                  
   884 00000B90 803C25[FC010000]31          cmp   byte[posicionVect], 49
   885 00000B98 0F8D8A000000                jge    finalizoCopia
   886                                  
   887 00000B9E 8A0425[FC010000]            mov   al, byte[posicionVect]
   888 00000BA5 6698                        cbw
   889 00000BA7 98                          cwde
   890 00000BA8 4898                        cdqe
   891 00000BAA 8A88[96050000]              mov   cl,[registro+rax]
   892 00000BB0 80E930                      sub   cl, '0'
   893 00000BB3 880C25[FB010000]            mov   [numero], cl
   894                                  
   895                                      ; Agrego el nro a la matriz
   896                                      
   897 00000BBA 8A0425[FD010000]            mov   al, byte[posicionMatFil] 
   898 00000BC1 6698                        cbw
   899 00000BC3 98                          cwde
   900 00000BC4 4898                        cdqe
   901 00000BC6 48FFC8                      dec   rax
   902 00000BC9 486BC007                    imul  rax, CANT_FIL_COL
   903                                  
   904 00000BCD 4889C1                      mov   rcx, rax
   905                                  
   906 00000BD0 8A0425[FE010000]            mov   al, byte[posicionMatCol]
   907 00000BD7 6698                        cbw
   908 00000BD9 98                          cwde
   909 00000BDA 4898                        cdqe
   910 00000BDC 48FFC8                      dec   rax
   911                                      
   912 00000BDF 4801C1                      add   rcx, rax      ; Desplazamiento en matriz
   913                                  
   914 00000BE2 8A0425[FB010000]            mov   al, byte[numero]
   915 00000BE9 8881[00000000]              mov   [tablero+rcx], al
   916                                  
   917                                  avanzarColumna:
   918 00000BEF FE0425[FE010000]            inc   byte[posicionMatCol]
   919 00000BF6 803C25[FE010000]07          cmp   byte[posicionMatCol], CANT_FIL_COL
   920 00000BFE 7F02                        jg    avanzarFila
   921 00000C00 EB19                        jmp   sigoEnVector
   922                                  
   923                                  avanzarFila:
   924 00000C02 C60425[FE010000]01          mov   byte[posicionMatCol], 1
   925 00000C0A FE0425[FD010000]            inc   byte[posicionMatFil]
   926 00000C11 803C25[FD010000]07          cmp   byte[posicionMatFil], CANT_FIL_COL
   927 00000C19 7F0D                        jg    finalizoCopia
   928                                  
   929                                  sigoEnVector:
   930 00000C1B 800425[FC010000]01          add   byte[posicionVect], 1
   931 00000C23 E968FFFFFF                  jmp   recorroReg
   932                                  
   933                                  finalizoCopia:
   934 00000C28 C3                      ret
   935                                  
   936                                  
   937                                  
   938                                  convertirTableroAStr:
   939 00000C29 C60425[FD010000]01          mov   byte[posicionMatFil], 1
   940 00000C31 C60425[FE010000]01          mov   byte[posicionMatCol], 1
   941                                  
   942                                  continuoCopiaStr:
   943 00000C39 8A0425[FD010000]            mov   al, byte[posicionMatFil] 
   944 00000C40 6698                        cbw
   945 00000C42 98                          cwde
   946 00000C43 4898                        cdqe
   947 00000C45 48FFC8                      dec   rax
   948 00000C48 486BC007                    imul  rax, CANT_FIL_COL
   949                                  
   950 00000C4C 4889C1                      mov   rcx, rax
   951                                  
   952 00000C4F 8A0425[FE010000]            mov   al, byte[posicionMatCol]
   953 00000C56 6698                        cbw
   954 00000C58 98                          cwde
   955 00000C59 4898                        cdqe
   956 00000C5B 48FFC8                      dec   rax
   957                                      
   958 00000C5E 4801C1                      add   rcx, rax      ; Desplazamiento en matriz
   959 00000C61 4883F930                    cmp   rcx, DESPLAZ_LIMITE
   960 00000C65 7F42                        jg    finalizoCopiaStr
   961                                  
   962 00000C67 8A81[00000000]              mov   al, [tablero+rcx]
   963 00000C6D 0430                        add   al, 48
   964 00000C6F 6698                        cbw
   965 00000C71 98                          cwde
   966 00000C72 4898                        cdqe
   967 00000C74 488981[C9050000]            mov   [tableroStr+rcx], rax
   968                                  
   969                                  avanzarColumnaStr:
   970 00000C7B FE0425[FE010000]            inc   byte[posicionMatCol]
   971 00000C82 803C25[FE010000]07          cmp   byte[posicionMatCol], CANT_FIL_COL
   972 00000C8A 7F02                        jg    avanzarFilaStr
   973 00000C8C EBAB                        jmp   continuoCopiaStr
   974                                  
   975                                  avanzarFilaStr:
   976 00000C8E C60425[FE010000]01          mov   byte[posicionMatCol], 1
   977 00000C96 FE0425[FD010000]            inc   byte[posicionMatFil]
   978 00000C9D 803C25[FD010000]07          cmp   byte[posicionMatFil], CANT_FIL_COL
   979 00000CA5 7F02                        jg    finalizoCopiaStr
   980 00000CA7 EB90                        jmp   continuoCopiaStr
   981                                      
   982                                  finalizoCopiaStr:
   983 00000CA9 C60425[FA050000]0A          mov   byte[tableroStr+49], 10 ;Agrego un salto de l√≠nea al final del archivo
   984 00000CB1 C3                      ret
   985                                  
   986                                  
   987                                  
   988                                  cargarEstadisticas:
   989 00000CB2 488B0C25[FC050000]          mov     rcx, [turnoGuardado]
   990 00000CBA 4883E930                    sub     rcx, 48
   991 00000CBE 48890C25[E1010000]          mov     [turno], rcx
   992                                  
   993 00000CC6 488B0C25[FD050000]          mov     rcx, [cantOcasEliminadas]
   994 00000CCE 4883E930                    sub     rcx, 48
   995 00000CD2 48890C25[38030000]          mov     [cantidad_ocas_eliminadas], rcx
   996                                  
   997 00000CDA 488B0C25[FE050000]          mov     rcx, [estats_mov_abajo_guardado]
   998 00000CE2 4883E930                    sub     rcx, 48
   999 00000CE6 48890C25[E3010000]          mov     [estats_mov_abajo], rcx
  1000                                  
  1001 00000CEE 488B0C25[03060000]          mov     rcx, [estats_mov_abajo_izq_guardado]
  1002 00000CF6 4883E930                    sub     rcx, 48
  1003 00000CFA 48890C25[E8010000]          mov     [estats_mov_abajo_izq], rcx
  1004                                  
  1005 00000D02 488B0C25[02060000]          mov     rcx, [estats_mov_abajo_der_guardado]
  1006 00000D0A 4883E930                    sub     rcx, 48
  1007 00000D0E 48890C25[E7010000]          mov     [estats_mov_abajo_der], rcx
  1008                                  
  1009 00000D16 488B0C25[FF050000]          mov     rcx, [estats_mov_arriba_guardado]
  1010 00000D1E 4883E930                    sub     rcx, 48
  1011 00000D22 48890C25[E4010000]          mov     [estats_mov_arriba], rcx
  1012                                  
  1013 00000D2A 488B0C25[05060000]          mov     rcx, [estats_mov_arriba_izq_guardado]
  1014 00000D32 4883E930                    sub     rcx, 48
  1015 00000D36 48890C25[EA010000]          mov     [estats_mov_arriba_izq], rcx
  1016                                  
  1017 00000D3E 488B0C25[04060000]          mov     rcx, [estats_mov_arriba_der_guardado]
  1018 00000D46 4883E930                    sub     rcx, 48
  1019 00000D4A 48890C25[E9010000]          mov     [estats_mov_arriba_der], rcx
  1020                                  
  1021 00000D52 488B0C25[01060000]          mov     rcx, [estats_mov_der_guardado]
  1022 00000D5A 4883E930                    sub     rcx, 48
  1023 00000D5E 48890C25[E6010000]          mov     [estats_mov_der], rcx
  1024                                  
  1025 00000D66 488B0C25[00060000]          mov     rcx, [estats_mov_izq_guardado]
  1026 00000D6E 4883E930                    sub     rcx, 48
  1027 00000D72 48890C25[E5010000]          mov     [estats_mov_izq], rcx
  1028 00000D7A C3                      ret
  1029                                  
  1030                                  convertirEstadisticasAStr:
  1031 00000D7B 488B0C25[E1010000]          mov     rcx, [turno]
  1032 00000D83 4883C130                    add     rcx, 48
  1033 00000D87 48890C25[FC050000]          mov     [turnoGuardado], rcx
  1034                                  
  1035 00000D8F 488B0C25[38030000]          mov     rcx, [cantidad_ocas_eliminadas]
  1036 00000D97 4883C130                    add     rcx, 48
  1037 00000D9B 48890C25[FD050000]          mov     [cantOcasEliminadas], rcx
  1038                                  
  1039 00000DA3 488B0C25[FE050000]          mov     rcx, [estats_mov_abajo_guardado]
  1040 00000DAB 4883C130                    add     rcx, 48
  1041 00000DAF 48890C25[E3010000]          mov     [estats_mov_abajo], rcx
  1042                                  
  1043 00000DB7 488B0C25[03060000]          mov     rcx, [estats_mov_abajo_izq_guardado]
  1044 00000DBF 4883C130                    add     rcx, 48
  1045 00000DC3 48890C25[E8010000]          mov     [estats_mov_abajo_izq], rcx
  1046                                  
  1047 00000DCB 488B0C25[02060000]          mov     rcx, [estats_mov_abajo_der_guardado]
  1048 00000DD3 4883C130                    add     rcx, 48
  1049 00000DD7 48890C25[E7010000]          mov     [estats_mov_abajo_der], rcx
  1050                                  
  1051 00000DDF 488B0C25[FF050000]          mov     rcx, [estats_mov_arriba_guardado]
  1052 00000DE7 4883C130                    add     rcx, 48
  1053 00000DEB 48890C25[E4010000]          mov     [estats_mov_arriba], rcx
  1054                                  
  1055 00000DF3 488B0C25[05060000]          mov     rcx, [estats_mov_arriba_izq_guardado]
  1056 00000DFB 4883C130                    add     rcx, 48
  1057 00000DFF 48890C25[EA010000]          mov     [estats_mov_arriba_izq], rcx
  1058                                  
  1059 00000E07 488B0C25[04060000]          mov     rcx, [estats_mov_arriba_der_guardado]
  1060 00000E0F 4883C130                    add     rcx, 48
  1061 00000E13 48890C25[E9010000]          mov     [estats_mov_arriba_der], rcx
  1062                                  
  1063 00000E1B 488B0C25[01060000]          mov     rcx, [estats_mov_der_guardado]
  1064 00000E23 4883C130                    add     rcx, 48
  1065 00000E27 48890C25[E6010000]          mov     [estats_mov_der], rcx
  1066                                  
  1067 00000E2F 488B0C25[00060000]          mov     rcx, [estats_mov_izq_guardado]
  1068 00000E37 4883C130                    add     rcx, 48
  1069 00000E3B 48890C25[E5010000]          mov     [estats_mov_izq], rcx
  1070                                  
  1071 00000E43 C60425[06060000]0A          mov     byte[estadisticas+10], 10
  1072                                  
  1073 00000E4B C3                      ret
  1074                                  
  1075                                  sumarEstadisticaMovimiento:
  1076 00000E4C 48BF-                       mov rdi, input_zorro
  1076 00000E4E [7301000000000000] 
  1077 00000E56 8A07                        mov al, [rdi]
  1078                                      
  1079 00000E58 3C77                        cmp al, 'w'
  1080 00000E5A 7509                        jne movimiento_abajo
  1081 00000E5C FE0425[E4010000]            inc byte[estats_mov_arriba]
  1082 00000E63 EB57                        jmp fin_estadisticas_mov
  1083                                  
  1084                                  movimiento_abajo:
  1085 00000E65 3C73                        cmp al, 's'
  1086 00000E67 7509                        jne movimiento_izq
  1087 00000E69 FE0425[E3010000]            inc byte[estats_mov_abajo]
  1088 00000E70 EB4A                        jmp fin_estadisticas_mov
  1089                                  
  1090                                  movimiento_izq:
  1091 00000E72 3C61                        cmp al, 'a'
  1092 00000E74 7509                        jne movimiento_derecha
  1093 00000E76 FE0425[E5010000]            inc byte[estats_mov_izq]
  1094 00000E7D EB3D                        jmp fin_estadisticas_mov
  1095                                  
  1096                                  movimiento_derecha:
  1097 00000E7F 3C64                        cmp al, 'd'
  1098 00000E81 7509                        jne movimiento_arriba_der
  1099 00000E83 FE0425[E6010000]            inc byte[estats_mov_der]
  1100 00000E8A EB30                        jmp fin_estadisticas_mov
  1101                                  
  1102                                  movimiento_arriba_der:
  1103 00000E8C 3C65                        cmp al, 'e'
  1104 00000E8E 7509                        jne movimiento_arriba_izq
  1105 00000E90 FE0425[E9010000]            inc byte[estats_mov_arriba_der]
  1106 00000E97 EB23                        jmp fin_estadisticas_mov
  1107                                  
  1108                                  movimiento_arriba_izq:
  1109 00000E99 3C71                        cmp al, 'q'
  1110 00000E9B 7509                        jne movimiento_abajo_izq
  1111 00000E9D FE0425[EA010000]            inc byte[estats_mov_arriba_izq]
  1112 00000EA4 EB16                        jmp fin_estadisticas_mov
  1113                                  
  1114                                  movimiento_abajo_izq:
  1115 00000EA6 3C7A                        cmp al, 'z'
  1116 00000EA8 7509                        jne movimiento_abajo_der
  1117 00000EAA FE0425[E8010000]            inc byte[estats_mov_abajo_izq]
  1118 00000EB1 EB09                        jmp fin_estadisticas_mov
  1119                                  
  1120                                  movimiento_abajo_der:
  1121 00000EB3 3C78                        cmp al, 'x'
  1122 00000EB5 FE0425[E7010000]            inc byte[estats_mov_abajo_der]
  1123                                  
  1124                                  fin_estadisticas_mov:
  1125 00000EBC C3                      ret
  1126                                  
  1127                                  mostrar_estadisticas:
  1128                                  
  1129 00000EBD 48BF-                       mov rdi, msg_mov_abajo
  1129 00000EBF [4003000000000000] 
  1130 00000EC7 4829F6                      sub rsi, rsi
  1131 00000ECA 488B3425[E3010000]          mov rsi, [estats_mov_abajo]
  1132                                      mPrintF
    16 00000ED2 4883EC08            <1>  sub rsp,8
    17 00000ED6 E8(00000000)        <1>  call printf
    18 00000EDB 4883C408            <1>  add rsp,8
  1133                                  
  1134 00000EDF 48BF-                       mov rdi, msg_mov_abajo_der
  1134 00000EE1 [A703000000000000] 
  1135 00000EE9 4829F6                      sub rsi, rsi
  1136 00000EEC 488B3425[E7010000]          mov rsi, [estats_mov_abajo_der]
  1137                                      mPrintF
    16 00000EF4 4883EC08            <1>  sub rsp,8
    17 00000EF8 E8(00000000)        <1>  call printf
    18 00000EFD 4883C408            <1>  add rsp,8
  1138                                  
  1139 00000F01 48BF-                       mov rdi, msg_mov_abajo_izq
  1139 00000F03 [C903000000000000] 
  1140 00000F0B 4829F6                      sub rsi, rsi
  1141 00000F0E 488B3425[E8010000]          mov rsi, [estats_mov_abajo_izq]
  1142                                      mPrintF
    16 00000F16 4883EC08            <1>  sub rsp,8
    17 00000F1A E8(00000000)        <1>  call printf
    18 00000F1F 4883C408            <1>  add rsp,8
  1143                                  
  1144 00000F23 48BF-                       mov rdi, msg_mov_arriba
  1144 00000F25 [5803000000000000] 
  1145 00000F2D 4829F6                      sub rsi, rsi
  1146 00000F30 488B3425[E4010000]          mov rsi, [estats_mov_arriba]
  1147                                      mPrintF
    16 00000F38 4883EC08            <1>  sub rsp,8
    17 00000F3C E8(00000000)        <1>  call printf
    18 00000F41 4883C408            <1>  add rsp,8
  1148                                  
  1149 00000F45 48BF-                       mov rdi, msg_mov_arriba_izq
  1149 00000F47 [1004000000000000] 
  1150 00000F4F 4829F6                      sub rsi, rsi
  1151 00000F52 488B3425[EA010000]          mov rsi, [estats_mov_arriba_izq]
  1152                                      mPrintF
    16 00000F5A 4883EC08            <1>  sub rsp,8
    17 00000F5E E8(00000000)        <1>  call printf
    18 00000F63 4883C408            <1>  add rsp,8
  1153                                  
  1154 00000F67 48BF-                       mov rdi, msg_mov_arriba_der
  1154 00000F69 [ED03000000000000] 
  1155 00000F71 4829F6                      sub rsi, rsi
  1156 00000F74 488B3425[E9010000]          mov rsi, [estats_mov_arriba_der]
  1157                                      mPrintF
    16 00000F7C 4883EC08            <1>  sub rsp,8
    17 00000F80 E8(00000000)        <1>  call printf
    18 00000F85 4883C408            <1>  add rsp,8
  1158                                  
  1159 00000F89 48BF-                       mov rdi, msg_mov_derecha
  1159 00000F8B [8D03000000000000] 
  1160 00000F93 4829F6                      sub rsi, rsi
  1161 00000F96 488B3425[E6010000]          mov rsi, [estats_mov_der]
  1162                                      mPrintF
    16 00000F9E 4883EC08            <1>  sub rsp,8
    17 00000FA2 E8(00000000)        <1>  call printf
    18 00000FA7 4883C408            <1>  add rsp,8
  1163                                  
  1164 00000FAB 48BF-                       mov rdi, msg_mov_izquierda
  1164 00000FAD [7103000000000000] 
  1165 00000FB5 4829F6                      sub rsi, rsi
  1166 00000FB8 488B3425[E5010000]          mov rsi, [estats_mov_izq]
  1167                                      mPrintF
    16 00000FC0 4883EC08            <1>  sub rsp,8
    17 00000FC4 E8(00000000)        <1>  call printf
    18 00000FC9 4883C408            <1>  add rsp,8
  1168 00000FCD C3                      ret
