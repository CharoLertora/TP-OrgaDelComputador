     1                                  global main
     2                                  
     3                                  %macro mPuts 0
     4                                      sub     rsp,8
     5                                      call    puts
     6                                      add     rsp,8
     7                                  %endmacro
     8                                  
     9                                  %macro mGets 0
    10                                      sub     rsp,8
    11                                      call    gets
    12                                      add     rsp,8
    13                                  %endmacro
    14                                  
    15                                  extern puts
    16                                  extern gets
    17                                  extern sscanf
    18                                  extern fopen
    19                                  extern fgets
    20                                  extern printf
    21                                  extern fputs
    22                                  extern fclose
    23                                  
    24                                  section .data
    25 00000000 00000101010000              tablero     db  0, 0, 1, 1, 1, 0, 0
    26 00000007 00000101010000                          db  0, 0, 1, 1, 1, 0, 0
    27 0000000E 01010101010101                          db  1, 1, 1, 1, 1, 1, 1
    28 00000015 01020202020201                          db  1, 2, 2, 2, 2, 2, 1
    29 0000001C 01020203020201                          db  1, 2, 2, 3, 2, 2, 1
    30 00000023 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    31 0000002A 00000202020000                          db  0, 0, 2, 2, 2, 0, 0
    32                                  
    33 00000031 0A00                        salto_linea                 db 10, 0        
    34 00000033 2E00                        simbolo_fuera_tablero       db ".", 0
    35 00000035 4F00                        simbolo_oca                 db 'O', 0
    36 00000037 5800                        simbolo_zorro               db 'X', 0
    37 00000039 2000                        simbolo_espacio_vacio       db ' ', 0
    38 0000003B 7C00                        simbolo_separador           db '|', 0
    39                                      ;longfila                    db 7     ME TIRA ERROR USANDO VARIABLE, HARDCODEO EL 7 POR EL MOMENTO
    40                                  
    41 0000003D 496E6772657365206C-         mensaje_mover_oca                   db "Ingrese la fila y columna de la oca a mover (ejemplo: 3 3). Presione f para salir de la partida: ", 0
    41 00000046 612066696C61207920-
    41 0000004F 636F6C756D6E612064-
    41 00000058 65206C61206F636120-
    41 00000061 61206D6F7665722028-
    41 0000006A 656A656D706C6F3A20-
    41 00000073 332033292E20507265-
    41 0000007C 73696F6E6520662070-
    41 00000085 6172612073616C6972-
    41 0000008E 206465206C61207061-
    41 00000097 72746964613A2000   
    42 0000009F 4D75657661206C6120-         mensaje_mover_oca_direccion         db "Mueva la oca con w: arriba /a: izquierda /s: abajo /d: derecha. Presione f para salir de la partida: ", 0
    42 000000A8 6F636120636F6E2077-
    42 000000B1 3A2061727269626120-
    42 000000BA 2F613A20697A717569-
    42 000000C3 65726461202F733A20-
    42 000000CC 6162616A6F202F643A-
    42 000000D5 20646572656368612E-
    42 000000DE 2050726573696F6E65-
    42 000000E7 206620706172612073-
    42 000000F0 616C6972206465206C-
    42 000000F9 612070617274696461-
    42 00000102 3A2000             
    43 00000105 256868752025686875-         formatInputFilCol                   db "%hhu %hhu", 0                               ; Formato para leer enteros de 1 byte
    43 0000010E 00                 
    44 0000010F 4C6F73206461746F73-         msjErrorInput                       db "Los datos ingresados son inválidos. Intente nuevamente.", 0
    44 00000118 20696E677265736164-
    44 00000121 6F7320736F6E20696E-
    44 0000012A 76C3A16C69646F732E-
    44 00000133 20496E74656E746520-
    44 0000013C 6E756576616D656E74-
    44 00000145 652E00             
    45 00000148 4D7565766120656C20-         mensaje_mover_zorro                 db "Mueva el zorro con w: arriba /a: izquierda /s: abajo /d: derecha /e: arriba-derecha /q: arriba-izquierda /z: abajo-izquierda /x: abajo-derecha. Presione f para salir de la partida: ", 0
    45 00000151 7A6F72726F20636F6E-
    45 0000015A 20773A206172726962-
    45 00000163 61202F613A20697A71-
    45 0000016C 756965726461202F73-
    45 00000175 3A206162616A6F202F-
    45 0000017E 643A20646572656368-
    45 00000187 61202F653A20617272-
    45 00000190 6962612D6465726563-
    45 00000199 6861202F713A206172-
    45 000001A2 726962612D697A7175-
    45 000001AB 6965726461202F7A3A-
    45 000001B4 206162616A6F2D697A-
    45 000001BD 71756965726461202F-
    45 000001C6 783A206162616A6F2D-
    45 000001CF 646572656368612E20-
    45 000001D8 50726573696F6E6520-
    45 000001E1 662070617261207361-
    45 000001EA 6C6972206465206C61-
    45 000001F3 20706172746964613A-
    45 000001FC 2000               
    46 000001FE 4D6F76696D69656E74-         mensaje_mov_invalido                db "Movimiento invalido, intente nuevamente", 0
    46 00000207 6F20696E76616C6964-
    46 00000210 6F2C20696E74656E74-
    46 00000219 65206E756576616D65-
    46 00000222 6E746500           
    47 00000226 496E67726573652065-         mensaje_ingresar_j1                 db "Ingrese el nombre del jugador 1 (zorro): ", 0
    47 0000022F 6C206E6F6D62726520-
    47 00000238 64656C206A75676164-
    47 00000241 6F72203120287A6F72-
    47 0000024A 726F293A2000       
    48 00000250 496E67726573652065-         mensaje_ingresar_j2                 db "Ingrese el nombre del jugador 2 (ocas): ", 0
    48 00000259 6C206E6F6D62726520-
    48 00000262 64656C206A75676164-
    48 0000026B 6F72203220286F6361-
    48 00000274 73293A2000         
    49 00000279 456C2067616E61646F-         mensaje_ganador                     db "El ganador es: ", 0
    49 00000282 722065733A2000     
    50 00000289 456C206A7565676F20-         mensaje_fin_juego                   db "El juego ha sido abandonado.", 0
    50 00000292 6861207369646F2061-
    50 0000029B 62616E646F6E61646F-
    50 000002A4 2E00               
    51                                      
    52                                      ;Variables de archivo
    53 000002A6 7461626C65726F2E74-         archivo             db      "tablero.txt",0
    53 000002AF 787400             
    54 000002B2 7200                        modoAperturaRead    db      "r",0   ; Abro y leo un archivo de texto
    55 000002B4 772B00                      modoAperturaWrite   db      "w+",0
    56                                  
    57 000002B7 4C6F2073656E74696D-         msgErrorAp          db      "Lo sentimos, no se pudo abrir el archivo.",10,0
    57 000002C0 6F732C206E6F207365-
    57 000002C9 207075646F20616272-
    57 000002D2 697220656C20617263-
    57 000002DB 6869766F2E0A00     
    58 000002E2 4E6F20736520656E63-         msgErrorLectura     db      "No se encontró una partida guardada, se iniciará una nueva.",10,0
    58 000002EB 6F6E7472C3B320756E-
    58 000002F4 612070617274696461-
    58 000002FD 206775617264616461-
    58 00000306 2C20736520696E6963-
    58 0000030F 696172C3A120756E61-
    58 00000318 206E756576612E0A00 
    59 00000321 4C65C3AD646F20636F-         msgLeido            db      "Leído con éxito.",10,0
    59 0000032A 6E20C3A97869746F2E-
    59 00000333 0A00               
    60 00000335 4572726F7220636F6E-         msgErrorConvirt     db      "Error convirtiendo el numero",10,0
    60 0000033E 7669727469656E646F-
    60 00000347 20656C206E756D6572-
    60 00000350 6F0A00             
    61 00000353 4572726F7220657363-         msgErrorEscritura   db      "Error escribiendo el archivo",10,0
    61 0000035C 72696269656E646F20-
    61 00000365 656C20617263686976-
    61 0000036E 6F0A00             
    62 00000371 536520686120656E63-         msgPartidaGuardada  db      "Se ha encontrado una partida guardada, desea continuarla? (si/no)",10,0
    62 0000037A 6F6E747261646F2075-
    62 00000383 6E6120706172746964-
    62 0000038C 612067756172646164-
    62 00000395 612C20646573656120-
    62 0000039E 636F6E74696E756172-
    62 000003A7 6C613F202873692F6E-
    62 000003B0 6F290A00           
    63 000003B4 457374C3A173207361-         msgGuardarPartida   db      "Estás saliendo del juego, querés guardar tu partida? (si/no)",10,0
    63 000003BD 6C69656E646F206465-
    63 000003C6 6C206A7565676F2C20-
    63 000003CF 71756572C3A9732067-
    63 000003D8 756172646172207475-
    63 000003E1 20706172746964613F-
    63 000003EA 202873692F6E6F290A-
    63 000003F3 00                 
    64 000003F4 736900                      respuestaSi         db      "si",0
    65 000003F7 20<rep 33h>                 registro            times 51  db  " "
    66 0000042A 20<rep 33h>                 tableroStr          times 51  db  " "
    67                                  
    68                                      CANT_FIL_COL        equ   7
    69                                      DESPLAZ_LIMITE      equ   48
    70                                  
    71                                  section .bss
    72 00000000 <res 15Eh>                  buffer          resb 350  ; Suficiente espacio para el tablero con saltos de línea
    73 0000015E <res Ah>                    input_oca       resb 10
    74 00000168 ??                          fila            resb 1
    75 00000169 ??                          columna         resb 1
    76 0000016A ??                          inputValido     resb 1
    77 0000016B ????????????????            posicion_oca    resq 1
    78 00000173 <res Ah>                    input_zorro     resb 10
    79 0000017D <res 32h>                   nombre_jugador1 resb 50
    80 000001AF <res 32h>                   nombre_jugador2 resb 50
    81 000001E1 ??                          turno           resb 1
    82                                  
    83                                      ;Variables de archivo
    84 000001E2 ????????????????            handleArch                  resq  1
    85 000001EA ??                          numero                      resb  1
    86 000001EB ??                          posicionVect                resb  1
    87 000001EC ??                          posicionMatFil              resb  1
    88 000001ED ??                          posicionMatCol              resb  1
    89 000001EE ????????                    respuestaPartidaGuardada    resb  4
    90                                  
    91                                  section .text
    92                                  main:
    93                                      
    94 00000000 E820060000                  call    abrirLecturaArchivo
    95 00000005 4883F800                    cmp     rax, 0
    96 00000009 0F8E4C050000                jle     errorApertura
    97                                          
    98 0000000F E855060000                  call    leerArchivo  
    99 00000014 4883F800                    cmp     rax, 0
   100 00000018 0F8E59050000                jle     errorLeyendoArchivo
   101                                  
   102 0000001E 48BF-                       mov     rdi, msgPartidaGuardada
   102 00000020 [7103000000000000] 
   103                                      mPuts
     4 00000028 4883EC08            <1>  sub rsp,8
     5 0000002C E8(00000000)        <1>  call puts
     6 00000031 4883C408            <1>  add rsp,8
   104 00000035 48BF-                       mov     rdi, respuestaPartidaGuardada
   104 00000037 [EE01000000000000] 
   105                                      mGets
    10 0000003F 4883EC08            <1>  sub rsp,8
    11 00000043 E8(00000000)        <1>  call gets
    12 00000048 4883C408            <1>  add rsp,8
   106 0000004C B902000000                  mov     rcx, 2
   107 00000051 488D3425[F4030000]          lea     rsi, [respuestaSi]
   108 00000059 488D3C25[EE010000]          lea     rdi, [respuestaPartidaGuardada]
   109 00000061 F3A6                        repe    cmpsb
   110 00000063 750A                        jne     continuar_jugando
   111 00000065 E842060000                  call    copiarRegistroATablero
   112 0000006A E82F060000                  call    cerrarArchivo
   113                                  
   114                                  continuar_jugando:
   115 0000006F 4883EC08                    sub     rsp,8
   116 00000073 E8C3000000                  call    ingresar_nombres_jugadores        ;llamo a la subrutina para ingresar nombres
   117 00000078 4883C408                    add     rsp,8
   118                                  
   119 0000007C 4883EC08                    sub     rsp,8
   120 00000080 E81B010000                  call    construir_tablero       ;llamo a la subrutina para construir el tablero inicial
   121 00000085 4883C408                    add     rsp,8
   122                                  
   123 00000089 4883EC08                    sub     rsp,8
   124 0000008D E8E9010000                  call    imprimir_tablero        ;llamo a la subrutina para imprimir el tablero
   125 00000092 4883C408                    add     rsp,8
   126                                  
   127                                  loop_juego:
   128 00000096 8A0425[E1010000]            mov     al, [turno]     ; veo de quien es el turno
   129 0000009D 3C01                        cmp     al, 1
   130 0000009F 7404                        je turno_zorro          ; si es el turno del zorro, voy a la etiqueta turno_zorro
   131 000000A1 3C02                        cmp     al, 2
   132 000000A3 743C                        je turno_ocas           ; si es el turno de las ocas, voy a la etiqueta turno_ocas
   133                                  
   134                                  turno_zorro:
   135 000000A5 4883EC08                    sub     rsp,8
   136 000000A9 E8E5010000                  call    pedir_movimiento_zorro  ;llamo a la subrutina para pedir movimiento del zorro
   137 000000AE 4883C408                    add     rsp,8
   138 000000B2 803C25[73010000]66          cmp     byte [input_zorro], 'f' ; Verificar si se desea abandonar la partida
   139 000000BA 0F84EC040000                je      guardar_partida
   140 000000C0 4883EC08                    sub     rsp,8
   141 000000C4 E8F9010000                  call    mover_zorro              ;llamo a la subrutina para mover al zorro
   142 000000C9 4883C408                    add     rsp,8
   143 000000CD 803C25[6A010000]52          cmp     byte [inputValido], 'R'  ;comparo si el movimiento del zorro fue inválido
   144 000000D5 74CE                        je      turno_zorro              ;si fue inválido, vuelvo a pedir movimiento del zorro
   145 000000D7 C60425[E1010000]02          mov     byte [turno], 2          ;si fue válido, cambio el turno a las ocas
   146 000000DF EB3A                        jmp     continuar_juego          ;voy a la etiqueta continuar_juego
   147                                  
   148                                  turno_ocas:
   149 000000E1 4883EC08                    sub     rsp,8
   150 000000E5 E885020000                  call    pedir_movimiento_oca     ;llamo a la subrutina para pedir movimiento de la oca
   151 000000EA 4883C408                    add     rsp,8
   152 000000EE 803C25[5E010000]66          cmp     byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   153 000000F6 0F84B0040000                je      guardar_partida
   154 000000FC 4883EC08                    sub     rsp,8
   155 00000100 E811030000                  call    mover_oca                ;llamo a la subrutina para mover la oca
   156 00000105 4883C408                    add     rsp,8
   157 00000109 803C25[6A010000]52          cmp     byte [inputValido], 'R'  ;comparo si el movimiento de la oca fue inválido
   158 00000111 74CE                        je      turno_ocas               ;si fue inválido, vuelvo a pedir movimiento de la oca
   159 00000113 C60425[E1010000]01          mov     byte [turno], 1          ;si fue válido, cambio el turno al zorro
   160                                  
   161                                  continuar_juego:
   162 0000011B 4883EC08                    sub     rsp,8
   163 0000011F E87C000000                  call    construir_tablero       ;reconstruyo el tablero después de cada turno
   164 00000124 4883C408                    add     rsp,8
   165 00000128 4883EC08                    sub     rsp,8
   166 0000012C E84A010000                  call    imprimir_tablero        ;imprimo el tablero después de cada turno
   167 00000131 4883C408                    add     rsp,8
   168 00000135 E95CFFFFFF                  jmp     loop_juego              ;vuelvo al inicio del bucle del juego
   169                                  
   170 0000013A C3                          ret
   171                                  
   172                                  ingresar_nombres_jugadores:
   173 0000013B 48BF-                       mov     rdi, mensaje_ingresar_j1   
   173 0000013D [2602000000000000] 
   174                                      mPuts
     4 00000145 4883EC08            <1>  sub rsp,8
     5 00000149 E8(00000000)        <1>  call puts
     6 0000014E 4883C408            <1>  add rsp,8
   175 00000152 48BF-                       mov     rdi, nombre_jugador1              ; guardo el nombre de cada jugador
   175 00000154 [7D01000000000000] 
   176                                      mGets
    10 0000015C 4883EC08            <1>  sub rsp,8
    11 00000160 E8(00000000)        <1>  call gets
    12 00000165 4883C408            <1>  add rsp,8
   177 00000169 48BF-                       mov rdi, mensaje_ingresar_j2
   177 0000016B [5002000000000000] 
   178                                      mPuts
     4 00000173 4883EC08            <1>  sub rsp,8
     5 00000177 E8(00000000)        <1>  call puts
     6 0000017C 4883C408            <1>  add rsp,8
   179 00000180 48BF-                       mov rdi, nombre_jugador2
   179 00000182 [AF01000000000000] 
   180                                      mGets
    10 0000018A 4883EC08            <1>  sub rsp,8
    11 0000018E E8(00000000)        <1>  call gets
    12 00000193 4883C408            <1>  add rsp,8
   181                                  
   182 00000197 C60425[E1010000]01          mov byte [turno], 1  ; Comienza el turno del zorro
   183 0000019F C3                          ret
   184                                  
   185                                  construir_tablero:
   186 000001A0 BB01000000                  mov     rbx, 1            ; i que será la fila, iniciada en 1 y no aumenta hasta no terminar las 7 columnas
   187 000001A5 41BA01000000                mov     r10, 1            ; j que será la columna
   188 000001AB 48BF-                       mov     rdi, buffer       ; Apuntar al inicio del buffer
   188 000001AD [0000000000000000] 
   189                                  
   190                                  imprimir_siguiente_caracter:   
   191 000001B5 4889D8                      mov     rax, rbx
   192 000001B8 48FFC8                      dec     rax
   193 000001BB 486BC007                    imul    rax, rax, 7       ; (i-1) * longfila
   194 000001BF 4C89D2                      mov     rdx, r10
   195 000001C2 48FFCA                      dec     rdx
   196 000001C5 4801D0                      add     rax, rdx          ; (i-1) * longfila + (j-1)
   197 000001C8 48BE-                       mov     rsi, tablero
   197 000001CA [0000000000000000] 
   198 000001D2 4801C6                      add     rsi, rax          ; rsi apunta a la posición actual en el tablero
   199                                  
   200 000001D5 803E00                      cmp     byte [rsi], 0      ;segun el numero en tablero imprimo un caracter distinto
   201 000001D8 740F                        je      imprimir_fuera_tablero                
   202 000001DA 803E02                      cmp     byte [rsi], 2           
   203 000001DD 7458                        je      imprimir_espacio_vacio              
   204 000001DF 803E01                      cmp     byte [rsi], 1         
   205 000001E2 741F                        je      imprimir_oca
   206 000001E4 803E03                      cmp     byte [rsi], 3
   207 000001E7 7434                        je      imprimir_zorro
   208                                  
   209                                  imprimir_fuera_tablero:
   210 000001E9 8A0425[3B000000]            mov     al, [simbolo_separador]
   211 000001F0 AA                          stosb
   212 000001F1 8A0425[33000000]            mov     al, [simbolo_fuera_tablero]
   213 000001F8 AA                          stosb
   214 000001F9 8A0425[3B000000]            mov     al, [simbolo_separador]
   215 00000200 AA                          stosb
   216 00000201 EB4E                        jmp     continuar_construyendo_tablero
   217                                  
   218                                  imprimir_oca:
   219 00000203 8A0425[3B000000]            mov     al, [simbolo_separador]
   220 0000020A AA                          stosb
   221 0000020B 8A0425[35000000]            mov     al, [simbolo_oca]
   222 00000212 AA                          stosb
   223 00000213 8A0425[3B000000]            mov     al, [simbolo_separador]
   224 0000021A AA                          stosb
   225 0000021B EB34                        jmp     continuar_construyendo_tablero
   226                                  
   227                                  imprimir_zorro:
   228 0000021D 8A0425[3B000000]            mov     al, [simbolo_separador]
   229 00000224 AA                          stosb
   230 00000225 8A0425[37000000]            mov     al, [simbolo_zorro]
   231 0000022C AA                          stosb
   232 0000022D 8A0425[3B000000]            mov     al, [simbolo_separador]
   233 00000234 AA                          stosb
   234 00000235 EB1A                        jmp     continuar_construyendo_tablero
   235                                  
   236                                  imprimir_espacio_vacio:
   237 00000237 8A0425[3B000000]            mov     al, [simbolo_separador]
   238 0000023E AA                          stosb
   239 0000023F 8A0425[39000000]            mov     al, [simbolo_espacio_vacio]
   240 00000246 AA                          stosb
   241 00000247 8A0425[3B000000]            mov     al, [simbolo_separador]
   242 0000024E AA                          stosb
   243 0000024F EB00                        jmp     continuar_construyendo_tablero
   244                                  
   245                                  continuar_construyendo_tablero:
   246 00000251 49FFC2                      inc     r10                ; Incrementar en uno para tener la siguiente columna
   247 00000254 4983FA08                    cmp     r10, 8             ; Si no llegué a la columna 7, construyo el siguiente elemento de la misma fila              
   248 00000258 0F8C57FFFFFF                jl      imprimir_siguiente_caracter       
   249                                  
   250                                      ; Añadir un salto de línea al final de la fila
   251 0000025E 8A0425[31000000]            mov     al, [salto_linea]
   252 00000265 AA                          stosb
   253 00000266 41BA01000000                mov     r10, 1
   254 0000026C 48FFC3                      inc     rbx                ; Incremento en uno la fila (siguiente fila)
   255 0000026F 4883FB08                    cmp     rbx, 8             ; Si llegué a la fila 7, termino la construcción
   256 00000273 7405                        je      fin_construir_tablero
   257                                  
   258 00000275 E93BFFFFFF                  jmp     imprimir_siguiente_caracter
   259                                  
   260                                  fin_construir_tablero:
   261 0000027A C3                          ret
   262                                  
   263                                  imprimir_tablero:
   264 0000027B 48BF-                       mov     rdi, buffer
   264 0000027D [0000000000000000] 
   265                                      mPuts
     4 00000285 4883EC08            <1>  sub rsp,8
     5 00000289 E8(00000000)        <1>  call puts
     6 0000028E 4883C408            <1>  add rsp,8
   266 00000292 C3                          ret
   267                                  
   268                                  pedir_movimiento_zorro:
   269 00000293 48BF-                       mov rdi, mensaje_mover_zorro
   269 00000295 [4801000000000000] 
   270                                      mPuts
     4 0000029D 4883EC08            <1>  sub rsp,8
     5 000002A1 E8(00000000)        <1>  call puts
     6 000002A6 4883C408            <1>  add rsp,8
   271 000002AA 48BF-                       mov rdi, input_zorro
   271 000002AC [7301000000000000] 
   272                                      mGets
    10 000002B4 4883EC08            <1>  sub rsp,8
    11 000002B8 E8(00000000)        <1>  call gets
    12 000002BD 4883C408            <1>  add rsp,8
   273 000002C1 C3                          ret
   274                                  
   275                                  mover_zorro:
   276 000002C2 48BE-                       mov rsi, tablero
   276 000002C4 [0000000000000000] 
   277 000002CC B931000000                  mov rcx, 49
   278                                  
   279                                  buscar_zorro:
   280 000002D1 AC                          lodsb
   281 000002D2 3C03                        cmp al, 3
   282 000002D4 7403                        je zorro_encontrado
   283 000002D6 E2F9                        loop buscar_zorro
   284 000002D8 C3                          ret
   285                                  
   286                                  zorro_encontrado:
   287 000002D9 4889F3                      mov rbx, rsi   ; Mueve el valor del registro rsi (posición actual del zorro) a rbx
   288 000002DC 48FFCB                      dec rbx         ; Decrementa rbx en 1 para apuntar correctamente a la posición actual del zorro
   289                                  
   290 000002DF 48BF-                       mov rdi, input_zorro
   290 000002E1 [7301000000000000] 
   291 000002E9 8A07                        mov al, [rdi]
   292 000002EB 3C77                        cmp al, 'w'
   293 000002ED 741D                        je mover_zorro_arriba
   294 000002EF 3C73                        cmp al, 's'
   295 000002F1 741F                        je mover_zorro_abajo
   296 000002F3 3C61                        cmp al, 'a'
   297 000002F5 7421                        je mover_zorro_izquierda
   298 000002F7 3C64                        cmp al, 'd'
   299 000002F9 7422                        je mover_zorro_derecha
   300 000002FB 3C65                        cmp al, 'e'
   301 000002FD 7423                        je mover_zorro_arriba_derecha
   302 000002FF 3C71                        cmp al, 'q'
   303 00000301 7425                        je mover_zorro_arriba_izquierda
   304 00000303 3C7A                        cmp al, 'z'
   305 00000305 7427                        je mover_zorro_abajo_izquierda
   306 00000307 3C78                        cmp al, 'x'
   307 00000309 7429                        je mover_zorro_abajo_derecha
   308 0000030B C3                          ret
   309                                  
   310                                  mover_zorro_arriba:
   311 0000030C 4883EB07                    sub rbx, 7                  ; resto 7 a rbx para mover al zorro una fila hacia arriba
   312 00000310 EB28                        jmp validar_movimiento_zorro 
   313                                  
   314                                  mover_zorro_abajo:
   315 00000312 4883C307                    add rbx, 7                  ; sumo 7 a rbx para mover al zorro una fila hacia abajo
   316 00000316 EB22                        jmp validar_movimiento_zorro
   317                                  
   318                                  mover_zorro_izquierda:
   319 00000318 48FFCB                      dec rbx                     ; resto 1 a rbx para mover al zorro una columna a la izquierda
   320 0000031B EB1D                        jmp validar_movimiento_zorro
   321                                  
   322                                  mover_zorro_derecha:
   323 0000031D 48FFC3                      inc rbx                     ; sumo 1 a rbx para mover al zorro una columna a la derecha
   324 00000320 EB18                        jmp validar_movimiento_zorro
   325                                  
   326                                  mover_zorro_arriba_derecha:
   327 00000322 4883EB06                    sub rbx, 6                  ; resto 6 a rbx para mover al zorro en diagonal arriba derecha
   328 00000326 EB12                        jmp validar_movimiento_zorro
   329                                  
   330                                  mover_zorro_arriba_izquierda:
   331 00000328 4883EB08                    sub rbx, 8                  ; resto 8 a rbx para mover al zorro en diagonal arriba izquierda
   332 0000032C EB0C                        jmp validar_movimiento_zorro
   333                                  
   334                                  mover_zorro_abajo_izquierda:
   335 0000032E 4883C306                    add rbx, 6                  ; sumo 6 a rbx para mover al zorro en diagonal abajo izquierda
   336 00000332 EB06                        jmp validar_movimiento_zorro
   337                                  
   338                                  mover_zorro_abajo_derecha:
   339 00000334 4883C308                    add rbx, 8                   ; sumo 8 a rbx para mover al zorro en diagonal abajo derecha
   340 00000338 EB00                        jmp validar_movimiento_zorro
   341                                  
   342                                  validar_movimiento_zorro:
   343 0000033A 803B02                      cmp byte [rbx], 2           ; Comparar destino con una posición vacía (2)
   344 0000033D 7510                        jne movimiento_invalido_zorro         
   345 0000033F C646FF02                    mov byte [rsi - 1], 2       ; Actualizar la posición anterior del zorro con 2 (vacío)
   346 00000343 C60303                      mov byte [rbx], 3           ; Colocar al zorro en la nueva posición
   347 00000346 C60425[6A010000]53          mov byte [inputValido], 'S' ; Indicar que el movimiento fue válido
   348 0000034E C3                          ret
   349                                  
   350                                  movimiento_invalido_zorro:
   351 0000034F C60425[6A010000]52          mov byte [inputValido], 'R'
   352 00000357 48BF-                       mov rdi, mensaje_mov_invalido
   352 00000359 [FE01000000000000] 
   353                                      mPuts
     4 00000361 4883EC08            <1>  sub rsp,8
     5 00000365 E8(00000000)        <1>  call puts
     6 0000036A 4883C408            <1>  add rsp,8
   354 0000036E C3                          ret
   355                                  
   356                                  pedir_movimiento_oca:
   357 0000036F 48BF-                       mov rdi, mensaje_mover_oca
   357 00000371 [3D00000000000000] 
   358                                      mPuts
     4 00000379 4883EC08            <1>  sub rsp,8
     5 0000037D E8(00000000)        <1>  call puts
     6 00000382 4883C408            <1>  add rsp,8
   359 00000386 48BF-                       mov rdi, input_oca
   359 00000388 [5E01000000000000] 
   360                                      mGets
    10 00000390 4883EC08            <1>  sub rsp,8
    11 00000394 E8(00000000)        <1>  call gets
    12 00000399 4883C408            <1>  add rsp,8
   361 0000039D 803C25[5E010000]66          cmp byte [input_oca], 'f'    ; Verificar si se desea abandonar la partida
   362 000003A5 0F845D020000                je fin_juego
   363                                      ; Validar las coordenadas de la oca
   364 000003AB 4883EC08                    sub rsp,8
   365 000003AF E8E3000000                  call validar_coordenadas_oca
   366 000003B4 4883C408                    add rsp,8
   367 000003B8 803C25[6A010000]53          cmp byte [inputValido], 'S'
   368 000003C0 7425                        je pedir_direccion_oca
   369                                  
   370 000003C2 48BF-                       mov rdi, msjErrorInput
   370 000003C4 [0F01000000000000] 
   371                                      mPuts
     4 000003CC 4883EC08            <1>  sub rsp,8
     5 000003D0 E8(00000000)        <1>  call puts
     6 000003D5 4883C408            <1>  add rsp,8
   372 000003D9 4883EC08                    sub rsp,8
   373 000003DD E88DFFFFFF                  call pedir_movimiento_oca
   374 000003E2 4883C408                    add rsp,8
   375 000003E6 C3                          ret
   376                                  
   377                                  pedir_direccion_oca:
   378 000003E7 48BF-                       mov rdi, mensaje_mover_oca_direccion
   378 000003E9 [9F00000000000000] 
   379                                      mPuts
     4 000003F1 4883EC08            <1>  sub rsp,8
     5 000003F5 E8(00000000)        <1>  call puts
     6 000003FA 4883C408            <1>  add rsp,8
   380 000003FE 48BF-                       mov rdi, input_oca
   380 00000400 [5E01000000000000] 
   381                                      mGets
    10 00000408 4883EC08            <1>  sub rsp,8
    11 0000040C E8(00000000)        <1>  call gets
    12 00000411 4883C408            <1>  add rsp,8
   382 00000415 C3                          ret
   383                                  
   384                                  mover_oca:
   385 00000416 48BE-                       mov rsi, tablero
   385 00000418 [0000000000000000] 
   386                                      ; Calcular la posición en el tablero
   387 00000420 488B1C25[6B010000]          mov rbx, [posicion_oca]
   388                                  
   389                                      ; Leer la dirección de movimiento
   390 00000428 48BF-                       mov rdi, input_oca
   390 0000042A [5E01000000000000] 
   391 00000432 8A07                        mov al, [rdi]
   392 00000434 3C77                        cmp al, 'w'
   393 00000436 740D                        je mover_oca_arriba
   394 00000438 3C73                        cmp al, 's'
   395 0000043A 740F                        je mover_oca_abajo
   396 0000043C 3C61                        cmp al, 'a'
   397 0000043E 7411                        je mover_oca_izquierda
   398 00000440 3C64                        cmp al, 'd'
   399 00000442 7412                        je mover_oca_derecha
   400 00000444 C3                          ret
   401                                  
   402                                  mover_oca_arriba:
   403 00000445 4883EB07                    sub rbx, 7
   404 00000449 EB10                        jmp validar_movimiento_oca
   405                                  
   406                                  mover_oca_abajo:
   407 0000044B 4883C307                    add rbx, 7
   408 0000044F EB0A                        jmp validar_movimiento_oca
   409                                  
   410                                  mover_oca_izquierda:
   411 00000451 48FFCB                      dec rbx
   412 00000454 EB05                        jmp validar_movimiento_oca
   413                                  
   414                                  mover_oca_derecha:
   415 00000456 48FFC3                      inc rbx
   416 00000459 EB00                        jmp validar_movimiento_oca
   417                                  
   418                                  validar_movimiento_oca:
   419 0000045B 803B02                      cmp byte [rbx], 2
   420 0000045E 7517                        jne movimiento_invalido_oca
   421 00000460 488B3425[6B010000]          mov rsi, [posicion_oca]
   422 00000468 C60602                      mov byte [rsi], 2          ; Actualizar la posición anterior de la oca con 2 (vacío)
   423 0000046B C60301                      mov byte [rbx], 1          ; Colocar la oca en la nueva posición
   424 0000046E C60425[6A010000]53          mov byte [inputValido], 'S' ; Indicar que el movimiento fue válido
   425 00000476 C3                          ret
   426                                  
   427                                  movimiento_invalido_oca:
   428 00000477 C60425[6A010000]52          mov byte [inputValido], 'R'
   429 0000047F 48BF-                       mov rdi, mensaje_mov_invalido
   429 00000481 [FE01000000000000] 
   430                                      mPuts
     4 00000489 4883EC08            <1>  sub rsp,8
     5 0000048D E8(00000000)        <1>  call puts
     6 00000492 4883C408            <1>  add rsp,8
   431 00000496 C3                          ret
   432                                  
   433                                  validar_coordenadas_oca:
   434 00000497 C60425[6A010000]4E          mov byte [inputValido], 'N'
   435 0000049F 48BF-                       mov rdi, input_oca
   435 000004A1 [5E01000000000000] 
   436 000004A9 48BE-                       mov rsi, formatInputFilCol
   436 000004AB [0501000000000000] 
   437 000004B3 48BA-                       mov rdx, fila
   437 000004B5 [6801000000000000] 
   438 000004BD 48B9-                       mov rcx, columna
   438 000004BF [6901000000000000] 
   439 000004C7 4883EC08                    sub rsp,8
   440 000004CB E8(00000000)                call sscanf
   441 000004D0 4883C408                    add rsp,8
   442                                  
   443 000004D4 4883F802                    cmp rax, 2
   444 000004D8 7C69                        jl coordenadas_invalidas
   445                                  
   446 000004DA 803C25[68010000]01          cmp byte [fila], 1
   447 000004E2 7C5F                        jl coordenadas_invalidas
   448 000004E4 803C25[68010000]07          cmp byte [fila], 7
   449 000004EC 7F55                        jg coordenadas_invalidas
   450                                  
   451 000004EE 803C25[69010000]01          cmp byte [columna], 1
   452 000004F6 7C4B                        jl coordenadas_invalidas
   453 000004F8 803C25[69010000]07          cmp byte [columna], 7
   454 00000500 7F41                        jg coordenadas_invalidas
   455                                  
   456                                      ; Calcular la posición en el tablero
   457 00000502 660FB60425-                 movzx ax, byte [fila]
   457 00000507 [68010000]         
   458 0000050B 6683E801                    sub ax, 1
   459 0000050F 666BC007                    imul ax, 7
   460 00000513 660FB61425-                 movzx dx, byte [columna]
   460 00000518 [69010000]         
   461 0000051C 6683EA01                    sub dx, 1
   462 00000520 6601D0                      add ax, dx
   463 00000523 4889C3                      mov rbx, rax
   464 00000526 4881C3[00000000]            add rbx, tablero
   465                                  
   466                                      ; Verificar si hay una oca en la posición ingresada
   467 0000052D 803B01                      cmp byte [rbx], 1
   468 00000530 7511                        jne coordenadas_invalidas
   469                                  
   470 00000532 C60425[6A010000]53          mov byte [inputValido], 'S'
   471 0000053A 48891C25[6B010000]          mov [posicion_oca], rbx    ; Guardar la posición de la oca
   472 00000542 C3                          ret
   473                                  
   474                                  coordenadas_invalidas:
   475 00000543 48BF-                       mov rdi, msjErrorInput
   475 00000545 [0F01000000000000] 
   476                                      mPuts
     4 0000054D 4883EC08            <1>  sub rsp,8
     5 00000551 E8(00000000)        <1>  call puts
     6 00000556 4883C408            <1>  add rsp,8
   477 0000055A C3                          ret
   478                                  
   479                                  errorApertura:
   480 0000055B 48BF-                       mov   rdi, msgErrorAp
   480 0000055D [B702000000000000] 
   481                                      mPuts
     4 00000565 4883EC08            <1>  sub rsp,8
     5 00000569 E8(00000000)        <1>  call puts
     6 0000056E 4883C408            <1>  add rsp,8
   482 00000572 E991000000                  jmp   fin_juego
   483                                  
   484                                  errorLeyendoArchivo:
   485 00000577 48BF-                       mov   rdi, msgErrorLectura
   485 00000579 [E202000000000000] 
   486                                      mPuts
     4 00000581 4883EC08            <1>  sub rsp,8
     5 00000585 E8(00000000)        <1>  call puts
     6 0000058A 4883C408            <1>  add rsp,8
   487 0000058E E9DCFAFFFF                  jmp   continuar_jugando
   488                                  
   489                                  errorEscritura:
   490 00000593 48BF-                       mov   rdi, msgErrorEscritura
   490 00000595 [5303000000000000] 
   491                                      mPuts
     4 0000059D 4883EC08            <1>  sub rsp,8
     5 000005A1 E8(00000000)        <1>  call puts
     6 000005A6 4883C408            <1>  add rsp,8
   492 000005AA EB5C                        jmp   fin_juego
   493                                  
   494                                  guardar_partida:
   495 000005AC E896000000                  call    abrirEscrituraArchivo
   496                                  
   497 000005B1 48BF-                       mov     rdi, msgGuardarPartida
   497 000005B3 [B403000000000000] 
   498                                      mPuts
     4 000005BB 4883EC08            <1>  sub rsp,8
     5 000005BF E8(00000000)        <1>  call puts
     6 000005C4 4883C408            <1>  add rsp,8
   499 000005C8 48BF-                       mov     rdi, respuestaPartidaGuardada
   499 000005CA [EE01000000000000] 
   500                                      mGets
    10 000005D2 4883EC08            <1>  sub rsp,8
    11 000005D6 E8(00000000)        <1>  call gets
    12 000005DB 4883C408            <1>  add rsp,8
   501 000005DF B902000000                  mov     rcx, 2
   502 000005E4 488D3425[F4030000]          lea     rsi, [respuestaSi]
   503 000005EC 488D3C25[EE010000]          lea     rdi, [respuestaPartidaGuardada]
   504 000005F4 F3A6                        repe    cmpsb
   505 000005F6 7510                        jne     fin_juego
   506                                  
   507 000005F8 E860010000                  call    convertirTableroAStr
   508 000005FD E884000000                  call    escribirArchivo
   509 00000602 4883F800                    cmp     rax, 0
   510 00000606 7E8B                        jle     errorEscritura
   511                                  fin_juego:
   512 00000608 E891000000                  call    cerrarArchivo
   513                                  
   514 0000060D 48BF-                       mov     rdi, mensaje_fin_juego  ; Imprimir el mensaje de fin del juego
   514 0000060F [8902000000000000] 
   515                                      mPuts
     4 00000617 4883EC08            <1>  sub rsp,8
     5 0000061B E8(00000000)        <1>  call puts
     6 00000620 4883C408            <1>  add rsp,8
   516 00000624 C3                      ret
   517                                  
   518                                  
   519                                  
   520                                  ;---------  RUTINAS INTERNAS -----------
   521                                  abrirLecturaArchivo:
   522 00000625 48BF-                     mov   rdi, archivo
   522 00000627 [A602000000000000] 
   523 0000062F 48BE-                     mov   rsi, modoAperturaRead
   523 00000631 [B202000000000000] 
   524 00000639 E8(00000000)              call  fopen
   525                                  
   526 0000063E 48890425[E2010000]        mov   qword[handleArch],rax
   527 00000646 C3                      ret
   528                                  
   529                                  abrirEscrituraArchivo:
   530 00000647 48BF-                     mov   rdi, archivo
   530 00000649 [A602000000000000] 
   531 00000651 48BE-                     mov   rsi, modoAperturaWrite
   531 00000653 [B402000000000000] 
   532 0000065B E8(00000000)              call  fopen
   533                                  
   534 00000660 48890425[E2010000]        mov   qword[handleArch],rax
   535 00000668 C3                      ret
   536                                  
   537                                  leerArchivo:
   538                                  
   539 00000669 48BF-                     mov   rdi, registro
   539 0000066B [F703000000000000] 
   540 00000673 BE33000000                mov   rsi, 51
   541 00000678 488B1425[E2010000]        mov   rdx, [handleArch]
   542 00000680 E8(00000000)              call  fgets
   543                                  
   544 00000685 C3                      ret
   545                                  
   546                                  escribirArchivo:
   547                                  
   548 00000686 48BF-                     mov   rdi, tableroStr
   548 00000688 [2A04000000000000] 
   549 00000690 488B3425[E2010000]        mov   rsi, [handleArch]
   550 00000698 E8(00000000)              call  fputs
   551 0000069D C3                      ret
   552                                  
   553                                  cerrarArchivo:
   554                                  
   555 0000069E 488B3C25[E2010000]        mov   rdi, [handleArch]
   556 000006A6 E8(00000000)              call  fclose
   557 000006AB C3                      ret
   558                                  
   559                                  
   560                                  ;---------------------------------
   561                                  copiarRegistroATablero:
   562                                  
   563 000006AC C60425[EB010000]00        mov   byte[posicionVect], 0
   564 000006B4 C60425[EC010000]01        mov   byte[posicionMatFil], 1
   565 000006BC C60425[ED010000]01        mov   byte[posicionMatCol], 1
   566                                  
   567                                  recorroReg:
   568                                  
   569 000006C4 803C25[EB010000]31        cmp   byte[posicionVect], 49
   570 000006CC 0F8D8A000000              jge    finalizoCopia
   571                                  
   572 000006D2 8A0425[EB010000]          mov   al, byte[posicionVect]
   573 000006D9 6698                      cbw
   574 000006DB 98                        cwde
   575 000006DC 4898                      cdqe
   576 000006DE 8A88[F7030000]            mov   cl,[registro+rax]
   577 000006E4 80E930                    sub   cl, '0'
   578 000006E7 880C25[EA010000]          mov   [numero], cl
   579                                  
   580                                    ; Agrego el nro a la matriz
   581                                    
   582 000006EE 8A0425[EC010000]          mov   al, byte[posicionMatFil] 
   583 000006F5 6698                      cbw
   584 000006F7 98                        cwde
   585 000006F8 4898                      cdqe
   586 000006FA 48FFC8                    dec   rax
   587 000006FD 486BC007                  imul  rax, CANT_FIL_COL
   588                                  
   589 00000701 4889C1                    mov   rcx, rax
   590                                  
   591 00000704 8A0425[ED010000]          mov   al, byte[posicionMatCol]
   592 0000070B 6698                      cbw
   593 0000070D 98                        cwde
   594 0000070E 4898                      cdqe
   595 00000710 48FFC8                    dec   rax
   596                                    
   597 00000713 4801C1                    add   rcx, rax      ; Desplazamiento en matriz
   598                                  
   599 00000716 8A0425[EA010000]          mov   al, byte[numero]
   600 0000071D 8881[00000000]            mov   [tablero+rcx], al
   601                                  
   602                                  avanzarColumna:
   603 00000723 FE0425[ED010000]          inc   byte[posicionMatCol]
   604 0000072A 803C25[ED010000]07        cmp   byte[posicionMatCol], CANT_FIL_COL
   605 00000732 7F02                      jg    avanzarFila
   606 00000734 EB19                      jmp   sigoEnVector
   607                                  
   608                                  avanzarFila:
   609 00000736 C60425[ED010000]01        mov   byte[posicionMatCol], 1
   610 0000073E FE0425[EC010000]          inc   byte[posicionMatFil]
   611 00000745 803C25[EC010000]07        cmp   byte[posicionMatFil], CANT_FIL_COL
   612 0000074D 7F0D                      jg    finalizoCopia
   613                                  
   614                                  sigoEnVector:
   615 0000074F 800425[EB010000]01        add   byte[posicionVect], 1
   616 00000757 E968FFFFFF                jmp   recorroReg
   617                                  
   618                                  finalizoCopia:
   619 0000075C C3                      ret
   620                                  
   621                                  
   622                                  
   623                                  convertirTableroAStr:
   624 0000075D C60425[EC010000]01        mov   byte[posicionMatFil], 1
   625 00000765 C60425[ED010000]01        mov   byte[posicionMatCol], 1
   626                                  
   627                                  continuoCopiaStr:
   628 0000076D 8A0425[EC010000]          mov   al, byte[posicionMatFil] 
   629 00000774 6698                      cbw
   630 00000776 98                        cwde
   631 00000777 4898                      cdqe
   632 00000779 48FFC8                    dec   rax
   633 0000077C 486BC007                  imul  rax, CANT_FIL_COL
   634                                  
   635 00000780 4889C1                    mov   rcx, rax
   636                                  
   637 00000783 8A0425[ED010000]          mov   al, byte[posicionMatCol]
   638 0000078A 6698                      cbw
   639 0000078C 98                        cwde
   640 0000078D 4898                      cdqe
   641 0000078F 48FFC8                    dec   rax
   642                                    
   643 00000792 4801C1                    add   rcx, rax      ; Desplazamiento en matriz
   644 00000795 4883F930                  cmp   rcx, DESPLAZ_LIMITE
   645 00000799 7F42                      jg    finalizoCopiaStr
   646                                  
   647 0000079B 8A81[00000000]            mov   al, [tablero+rcx]
   648 000007A1 0430                      add   al, 48
   649 000007A3 6698                      cbw
   650 000007A5 98                        cwde
   651 000007A6 4898                      cdqe
   652 000007A8 488981[2A040000]          mov   [tableroStr+rcx], rax
   653                                  
   654                                  avanzarColumnaStr:
   655 000007AF FE0425[ED010000]          inc   byte[posicionMatCol]
   656 000007B6 803C25[ED010000]07        cmp   byte[posicionMatCol], CANT_FIL_COL
   657 000007BE 7F02                      jg    avanzarFilaStr
   658 000007C0 EBAB                      jmp   continuoCopiaStr
   659                                  
   660                                  avanzarFilaStr:
   661 000007C2 C60425[ED010000]01        mov   byte[posicionMatCol], 1
   662 000007CA FE0425[EC010000]          inc   byte[posicionMatFil]
   663 000007D1 803C25[EC010000]07        cmp   byte[posicionMatFil], CANT_FIL_COL
   664 000007D9 7F02                      jg    finalizoCopiaStr
   665 000007DB EB90                      jmp   continuoCopiaStr
   666                                    
   667                                  finalizoCopiaStr:
   668 000007DD C60425[5B040000]0A        mov   byte[tableroStr+49], 10 ;Agrego un salto de línea al final del archivo
   669 000007E5 C3                      ret
